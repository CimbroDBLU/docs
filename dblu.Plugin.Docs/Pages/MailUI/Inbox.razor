@*
    Page that manage the inbox and its interaction with Dossiers and Items
    Third version, using MSG suggestions
*@

@page "/MailUI/Inbox"
@page "/MailUI/Inbox/{nPreselAttach}"
@page "/MailUI/Inbox/{nPreselFolder}/{nPreselAttach}"
@page "/MailUI/Inbox/{nPreselFolder}/{nPreselAttach}/{nPreselItem}"
@using Microsoft.AspNetCore.Components.CompilerServices
@using Newtonsoft.Json.Linq
@using Syncfusion.Blazor.PdfViewerServer
@using dblu.Docs.Models
@using dblu.Docs.Classi
@using dblu.Portale.Plugin.Docs.Services
@using dblu.Portale.Plugin.Docs.Pages.Docs.Shared
@using dblu.Portale.Plugin.Docs.Pages.Mail.Shared
@using dblu.Portale.Plugin.Docs.Classes
@using Microsoft.AspNetCore.Http
@using System.IO
@using dblu.Docs.Interfacce
@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject dblu.Docs.Interfacce.ISoggettiService _SubjectService
@inject IHttpContextAccessor _HttpContextAccessor
@inject ILogger<Inbox> _Logger
@inject NavigationManager  _NavigationManager

<dblu.Portale.Core.UI.PageTitle nTitle="Inbox" />

<section class="content">

    <SfSpinner @bind-Visible="IsSpinnerVisible">
    </SfSpinner>

    <SfCard>
        <CardHeader Title="Email in arrivo" />
        <CardContent EnableSeperator="true">
            <div class="row form-group">
                <div  class="col-5" style=@($"align-self: auto;{((ForceCollapsed)?"pointer-events:none;":"")}")>
                        <div class="row form-group">
                            <div class="col">
                                <ServerCombo nEnabled=@(!ForceCollapsed) @bind-nServer="@MailBox" nPresel="@nPreselFolder"></ServerCombo>
                            </div>
                        </div>
                        <div class="row ">
                            <div class="col">
                                <MailTable @ref="@Grid" nType=MailTable.TableType.InboxSel nMailBox="@MailBox" OnSelectAttachment="OnSelectAttach" OnReplyAttachment="OnReply" OnForwardAttachment="OnForward" OnMoveAttachment="OnMove" OnShowAttachment="OnShow" OnShowLogsAttachment="OnShowLogs" OnDeleteAttachment="OnDelete" nPreselAttach="@nPreselAttach" OnRegisterAttachment="OnRegisterAttachment"></MailTable>
                            </div>
                        </div>                    
                </div>

                <div class="col-7" style="align-self: auto;">
                    @if (!string.IsNullOrEmpty(AttachID))
                    {
                        if (IsAnswerDialog || IsForwardDialog)
                        {
                            <div class="row form-group">
                                <div class="col">
                                    <SfAccordion>
                                        <AccordionItems>
                                            <AccordionItem Expanded="true">
                                                <HeaderTemplate>
                                                    @{
                                                        string sub = Attach?.Mittente ?? "";
                                                        string caption = "Rispondi a ";
                                                        if (IsForwardDialog)
                                                        {
                                                            caption = "Inoltra ";
                                                            sub = @AttachSubject;
                                                        } 
                                                        <div>@caption<b>@sub</b></div>
                                                    }
                                                </HeaderTemplate>
                                                <ContentTemplate>
                                                    <MailForwardAnswer nAttach="@Attach" nSourceServer="@MailBox" IsAnswerDialog="@IsAnswerDialog" OnAbort="OnAbort" OnOperationDone="OnSend"></MailForwardAnswer> 
                                                </ContentTemplate>
                                            </AccordionItem>
                                        </AccordionItems>
                                    </SfAccordion>
                                </div>
                            </div>
                        }
                        else if (IsMoveDialog)
                        {
                            <div class="row form-group">
                                <div class="col">
                                    <SfAccordion>
                                        <AccordionItems>
                                            <AccordionItem Expanded="true">
                                                <HeaderTemplate>
                                                    <div>Sposta <b>@AttachSubject</b></div>
                                                </HeaderTemplate>
                                                <ContentTemplate>
                                                    <REG_MoveInFolder nAttach="@Attach" nSourceServer="@MailBox" OnOperationDone="OnDone" OnAbort="OnAbort"></REG_MoveInFolder>
                                                </ContentTemplate>
                                            </AccordionItem>
                                        </AccordionItems>
                                    </SfAccordion>
                                </div>
                            </div>
                        }                       
                        else if (IsLogsDialog)
                        {
                            <div class="row form-group">
                                <div class="col">
                                    <SfAccordion>
                                        <AccordionItems>
                                            <AccordionItem Expanded="true">
                                                <HeaderTemplate>
                                                    <div>Operazioni sulla mail <b>@AttachSubject</b></div>
                                                </HeaderTemplate>
                                                <ContentTemplate>
                                                    <REG_Logs nAttach="@Attach" OnAbort="OnAbort"></REG_Logs>
                                                </ContentTemplate>
                                            </AccordionItem>
                                        </AccordionItems>
                                    </SfAccordion>
                                </div>
                            </div>
                        }
                        else
                        {
                                <div class="row form-group">
                                    <div class="col">
                                       <OperationList nDisplayManage="true" nDisplayOperations="@(!string.IsNullOrEmpty(Attach.Chiave3))" OnRegisterAttachment="OnRegisterAttach" nRecordServer=TipiRecordServer.CartellaMail nDocumentType=TipiDocumentiFile.ZIP OnLinkItemPressed="OnLinkItemPressed"></OperationList>
                                    </div>
                                </div>
                        }
                    }

                    else
                    {
                        <h3 style="display:flex;justify-content: center;">Selezionare una E-Mail a sinistra</h3>
                    }


                    <div class="row form-group" style=@((string.IsNullOrEmpty(AttachID))?"display: none;":"")>
                        <div class="col">
                            <SfAccordion>
                                <AccordionItems>
                                    <AccordionItem Expanded="true">
                                        <HeaderTemplate>
                                            <div>Anteprima</div>
                                        </HeaderTemplate>
                                        <ContentTemplate>        
                                                <MailHTMLView nShowBack="false" nAttach="@Attach" OnDocumentLoaded="OnDocumentTransformedZ" nReadAttachments="true" nHeight="600"></MailHTMLView>
                                                        
                                        </ContentTemplate>
                                    </AccordionItem>
                                </AccordionItems>
                            </SfAccordion>
                        </div>
                    </div>

                        @*ALLEGATI EMAIL*@
                            @if (@IsAttachVisible && !string.IsNullOrEmpty(AttachID))
                            {
                                <div class="row form-group">
                                    <div class="col">
                                        <SfAccordion>
                                            <AccordionItems>
                                                <AccordionItem Expanded="@(IsAttachExpanded && !ForceCollapsed)">
                                                    <HeaderTemplate>
                                                        <div>Allegati in Email</div>
                                                    </HeaderTemplate>
                                                    <ContentTemplate>
                                                        <OriginalAttachsTable nAttachID="@AttachID" nAttachments="@SourceAttach"></OriginalAttachsTable>
                                                    </ContentTemplate>
                                                </AccordionItem>
                                            </AccordionItems>
                                        </SfAccordion>
                                    </div>
                                </div>
                            }               
                 </div>
            </div>
        </CardContent>
    </SfCard>

    <QuestionDialog nTitle="Conferma"
                    nText="Rimuovo l'email selezionata?"
                    OnExitPressed="OnCloseDialog"
                    OnNoPressed="OnCloseDialog"
                    OnYesPressed="OnDeleteConfirmed"
                    OnClose="OnCloseDialog"
                    nShowDialog="@ShowConfirm">
    </QuestionDialog>

    <Toast @ref="ToastOK" nToastType="Toast.e_ToastType.OK" nTitle="Elimina email" nContent="Email eliminata correttamente"></Toast>
    <Toast @ref="ToastKO" nToastType="Toast.e_ToastType.Fail" nTitle="Elimina email" nContent="Eliminazione non riuscita"></Toast>

    <Toast @ref="ToastMoveOK" nToastType="Toast.e_ToastType.OK" nTitle="Sposta email" nContent="Email spostata correttamente"></Toast>
    <Toast @ref="ToastMoveKO" nToastType="Toast.e_ToastType.Fail" nTitle="Sposta email" nContent="Spostamento NON riuscito"></Toast>

    <Toast @ref="ToastForwardOK" nToastType="Toast.e_ToastType.OK" nTitle="Inoltra email" nContent="Email inoltrata correttamente"></Toast>
    <Toast @ref="ToastForwardKO" nToastType="Toast.e_ToastType.Fail" nTitle="inoltra email" nContent="Inoltro NON riuscito"></Toast>

    <Toast @ref="ToastAnswerOK" nToastType="Toast.e_ToastType.OK" nTitle="Rispondi a email" nContent="Email inviata correttamente"></Toast>
    <Toast @ref="ToastAnswerKO" nToastType="Toast.e_ToastType.Fail" nTitle="Rispondi a email" nContent="Invio NON riuscito"></Toast>

    <Toast @ref="ToastAttachOK" nToastType="Toast.e_ToastType.OK" nTitle="Allega a fascicolo\elemento" nContent="@LinkDescription"></Toast>

    @if (IsShowDialog)
    {
    <dblu.Portale.Core.UI.DynamicComponent nType="@DynamicContent" nAttributes="@DynamicAttributes"></dblu.Portale.Core.UI.DynamicComponent>
    }

</section>

@code
{
    /// <summary>
    /// Email that has to be selected, if any. We expect to receive the qattach id of the email selected
    /// </summary>
    [Parameter]
    public string nPreselAttach { get; set; } = "";

    /// <summary>
    /// Folder that has to be preselected
    /// </summary>
    [Parameter]
    public string nPreselFolder { get; set; } = "";

    /// <summary>
    /// Item that has to be preselected
    /// </summary>
    [Parameter]
    public string nPreselItem { get; set; } = null;

    /// <summary>
    /// Force the collapsing of dossier and costumers
    /// </summary>
    [Parameter]
    public bool ForceCollapsed { get; set; } = false;

    /// <summary>
    /// Indicate an autoselection of an item
    /// </summary>
    private string AutoSel { get; set; } = "";

    /// <summary>
    /// Document viewer
    /// </summary>
    private DocViewer Viewer { get; set; }

    /// <summary>
    /// Reference to the Mail grid
    /// </summary>
    private MailTable Grid { get; set; }

    /// <summary>
    /// Indicates if the spinner has to be showed
    /// </summary>
    private bool IsSpinnerVisible { get; set; } = false;

    /// <summary>
    /// Indicates if Mail attachments panel is visible
    /// </summary>
    private bool IsAttachVisible { get; set; } = false;

    /// <summary>
    /// Indicates if Mail attachments panel has has to be expanded
    /// </summary>
    private bool IsAttachExpanded { get; set; } = false;

    /// <summary>
    /// Indicates if Answer panel is visible
    /// </summary>
    private bool IsAnswerDialog { get; set; } = false;

    /// <summary>
    /// Indicates if Forward panel is visible
    /// </summary>
    private bool IsForwardDialog { get; set; } = false;

    /// <summary>
    /// Indicates if Move panel is visible
    /// </summary>
    private bool IsMoveDialog { get; set; } = false;

    /// <summary>
    /// Indicates if HTML panel is visible
    /// </summary>
    private bool IsShowDialog { get; set; } = false;

    /// <summary>
    /// Indicates if LOG panel is visible
    /// </summary>
    private bool IsLogsDialog { get; set; } = false;

    /// <summary>
    /// Attach ID
    /// </summary>
    public string AttachID { get; set; }

    /// <summary>
    /// Attachment Subject
    /// </summary>
    private string AttachSubject { get; set; }

    /// <summary>
    /// Dossier ID
    /// </summary>
    private string DossierID { get; set; }

    /// <summary>
    /// Costumer Code
    /// </summary>
    private string CustomerCode
    {
        get;
        set;
    }

    /// <summary>
    /// Costumer Name
    /// </summary>
    private string CustomerName { get; set; } = "";

    /// <summary>
    /// Show delete confirm
    /// </summary>
    private bool ShowConfirm { get; set; } = false;

    /// <summary>
    /// Item ID
    /// </summary>
    private string ItemID { get; set; }

    /// <summary>
    /// Current Mail box
    /// </summary>
    private EmailServer MailBox { get; set; }

    /// <summary>
    /// Current Attach
    /// </summary>
    private AllegatoEmail Attach { get; set; }

    /// <summary>
    /// Toaster for a positive deletion
    /// </summary>
    private Toast ToastOK { get; set; }

    /// <summary>
    /// Toaster for a negative deletion
    /// </summary>
    private Toast ToastKO { get; set; }

    /// <summary>
    /// Toaster for a positive move
    /// </summary>
    private Toast ToastMoveOK { get; set; }

    /// <summary>
    /// Toaster for a negative move
    /// </summary>
    private Toast ToastMoveKO { get; set; }

    /// <summary>
    /// Toaster for a positive forward
    /// </summary>
    private Toast ToastForwardOK { get; set; }

    /// <summary>
    /// Toaster for a negative forward
    /// </summary>
    private Toast ToastForwardKO { get; set; }

    /// <summary>
    /// Toaster for a positive forward
    /// </summary>
    private Toast ToastAnswerOK { get; set; }

    /// <summary>
    /// Toaster for a negative forward
    /// </summary>
    private Toast ToastAnswerKO { get; set; }

    /// <summary>
    /// Toast for a positive attaqch on an email
    /// </summary>
    private Toast ToastAttachOK { get; set; }

    /// <summary>
    /// List of current Attach source Attachments
    /// </summary>
    private ObservableCollection<OriginalAttachments> SourceAttach { get; set; } = new();

    /// <summary>
    /// Current Document as memory stream
    /// </summary>
    public MemoryStream Document => Viewer?.Doc?.Payload ?? new();

    /// <summary>
    /// Last document loaded from an attach
    /// </summary>
    public MemoryStream LastDocumentFromAttach { get; set; } = new();

    /// <summary>
    /// Show/Hide the dialog for the current selection
    /// </summary>
    private bool ShowCostumerSelection { get; set; } = false;

    /// <summary>
    ///  Source from witch read the PDF (Attachments or items)
    /// </summary>
    public e_SourceType PDFSourceType { get; set; }

    /// <summary>
    /// Id of the PDF Source
    /// </summary>
    public string PDFSourceId { get; set; }

    /// <summary>
    /// Description of the costumer accordion
    /// </summary>
    private string CostumerDesc { get; set; } = "Cliente da selezionare";

    /// <summary>
    /// Description of the dossier accordion
    /// </summary>
    private string DossierDesc { get; set; } = "Fascicolo da selezionare";

    /// <summary>
    /// Indicateds if costumer block has to be expanded
    /// </summary>
    private bool IsCustomerExpand { get; set; } = true;

    /// <summary>
    /// Dinamic component to load
    /// </summary>
    private Type DynamicContent { get; set; } = null;

    /// <summary>
    /// Attributes of the dynamic compponent
    /// </summary>
    private ObservableCollection<dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute> DynamicAttributes = new();

    /// <summary>
    /// Description to show when an email has been attached
    /// </summary>
    private string LinkDescription{ get; set; }


    /// <summary>
    /// On selection of the email,shows and hide panels properly
    /// </summary>
    /// <param name="e"></param>
    public async void OnSelectAttach((AllegatoEmail,bool) e)
    {
        try
        {
            if (ForceCollapsed) return;

            IsCustomerExpand = true;

            if (e.Item1 == null)
            {
                _Logger.LogDebug($"Inbox[MAIL].OnSelectAttach: DeSelecting attach");
                DossierID = "";

                AttachID = "";                
                CustomerCode = "";
                CustomerName = "";
                CostumerDesc = "";
                PDFSourceId = "";
                PDFSourceType = e_SourceType.Attachment;
                return;
            }

            _Logger.LogDebug($"Inbox[UI].OnSelectAttach: Selecting attach {e.Item1.Id}");

            AutoSel=nPreselItem;     
            Attach = e.Item1;
            if (e.Item1?.Id.ToString() != AttachID)
            {
                if(e.Item2)
                    nPreselItem = null;
                PDFSourceId = e.Item1.Id.ToString();
                PDFSourceType = e_SourceType.Attachment;
            }

            if (AttachID != e.Item1.Id.ToString())
                AttachID = e.Item1.Id.ToString();

            if (DossierID != e.Item1.IdFascicolo.ToString())
                DossierID = e.Item1.IdFascicolo.ToString();            


            if (CustomerCode != e.Item1.Chiave3)
            {
                CustomerCode = e.Item1.Chiave3;           
                CustomerName = Attach?.jAttributi["NomeSoggetto"]?.ToString();                
            }
            ApplyCustomer();

            OnAbort();
        }
        catch (Exception ex)
        {
            _Logger.LogError($"Inbox[UI].OnSelectAttach: Unexpected errro on selecting attach {ex}");
        }
    }


    /// <summary>
    /// Once a document has been loaded, refresh the source attachment
    /// </summary>
    /// <param name="O"></param>
    public async void OnDocumentTransformedZ(List<OriginalAttachments> O)
    {
        try
        {
            if (PDFSourceType == e_SourceType.Attachment)
            {
                SourceAttach.Clear();
                foreach (OriginalAttachments o in O)
                    SourceAttach.Add(o);

                LastDocumentFromAttach = Document;

                IsAttachVisible = (SourceAttach.Count != 0);
                IsAttachExpanded = (SourceAttach.Count != 0 && (SourceAttach.Any(x => !string.IsNullOrEmpty(x.Warning)) || SourceAttach.Any(x => x.IsIncluded == false)));
            }
        }
        catch (Exception ex)
        {
            _Logger.LogError($"Inbox[UI].OnDocumentTransformedZ: Unexpected error on OnDocumentTransformedZ {ex}");
        }
    }

    /// <summary>
    /// Change the mail box selected
    /// </summary>
    /// <param name="e"></param>
    public async void OnMailboxChanged(EmailServer e)
    {
        MailBox = e;
    }

    /// <summary>
    /// Activate replay panel
    /// </summary>
    /// <param name="e"></param>
    public async void OnReply(AllegatoEmail e)
    {
        AttachSubject = e.Chiave4;

        IsForwardDialog = false;
        IsMoveDialog = false;
        IsShowDialog = false;
        IsLogsDialog = false;

        IsAnswerDialog = !IsAnswerDialog;
    }

    /// <summary>
    /// Activate forward panel
    /// </summary>
    /// <param name="e"></param>
    public async void OnForward(AllegatoEmail e)
    {
        AttachSubject = e.Chiave4;
        IsAnswerDialog = false;
        IsMoveDialog = false;
        IsShowDialog = false;
        IsLogsDialog = false;

        IsForwardDialog = !IsForwardDialog;
    }

    /// <summary>
    /// Activate move panel
    /// </summary>
    /// <param name="e"></param>
    public async void OnMove(AllegatoEmail e)
    {
        AttachSubject = e.Chiave4;
        IsAnswerDialog = false;
        IsForwardDialog = false;
        IsShowDialog = false;
        IsLogsDialog = false;

        IsMoveDialog = !IsMoveDialog;
    }

    /// <summary>
    /// On request a registration, open it as preview
    /// </summary>
    /// <param name="e">Attachent to open </param>
    public async void OnRegisterAttachment(AllegatoEmail e)
    {
        if(e!=null)
            _NavigationManager.NavigateTo($"/Mail/Register/{e.Id.ToString()}");
    }

    /// <summary>
    /// Register current selected attach
    /// </summary>
    public async void OnRegisterAttach()
    {
        _NavigationManager.NavigateTo($"/Mail/Register/{AttachID}");
    }


    /// <summary>
    /// Activate HTML panel
    /// </summary>
    /// <param name="e"></param>
    public async void OnShow(AllegatoEmail e)
    {
        AttachSubject = e.Chiave4;
        IsAnswerDialog = false;
        IsForwardDialog = false;
        IsMoveDialog = false;
        IsLogsDialog = false;

        IsShowDialog = !IsShowDialog;
    }

    /// <summary>
    /// Activate logs panel
    /// </summary>
    /// <param name="e"></param>
    public async void OnShowLogs(AllegatoEmail e)
    {
        AttachSubject = e.Chiave4;
        IsAnswerDialog = false;
        IsForwardDialog = false;
        IsMoveDialog = false;
        IsShowDialog = false;

        IsLogsDialog = !IsLogsDialog;
    }

    /// <summary>
    /// Ask deletion confirm
    /// </summary>
    /// <param name="e"></param>
    public async void OnDelete(List<AllegatoEmail> e)
    {
        ShowConfirm = true;
    }

    /// <summary>
    /// Close dialog confirm
    /// </summary>
    public async void OnCloseDialog()
    {
        ShowConfirm = false;
    }

    /// <summary>
    /// Delete selected attachment
    /// </summary>
    public async void OnDeleteConfirmed()
    {
        try
        {
            Stopwatch sw = Stopwatch.StartNew();
            ShowConfirm = false;
            var User = _HttpContextAccessor.HttpContext.User;

            var all = _MailService._allMan.Get(Attach.Id.ToString());
            if (all != null)
            {
                all.Stato = StatoAllegato.Annullato;
                _MailService._allMan.Salva(all, false);
                _MailService._logMan.PostLog(all.Id, TipiOggetto.ALLEGATO, TipoOperazione.Cancellato, User.Identity.Name, $"Allegato [{all.Descrizione}] rimosso",new(){ {"1",all.Chiave1},{"2",all.Chiave2},{"3",all.Chiave3},{"4",all.Chiave4},{"5",all.Chiave5} });              
                ToastOK.Show();
            }

            Grid.RemoveItem(AttachID);
            _Logger.LogInformation($"Inbox[UI].OnDeleteConfirmed: Mail {Attach.Id} deleted in {sw.ElapsedMilliseconds} ms");
        }
        catch (Exception ex)
        {
            _Logger.LogError($"Inbox[UI].OnDeleteConfirmed: Unexpeted error deleting {Attach.Id}, {ex}");
            ToastKO.Show();
        }
    }

    /// <summary>
    /// Once Move has done, show the proper toast
    /// </summary>
    /// <param name="RA"></param>
    private async void OnDone(Models.RisultatoAzione RA)
    {
        if (RA.Successo)
        {    
            ToastMoveOK.Show();
            Grid.RemoveItem(AttachID);
        }
        else ToastMoveKO.Show();

        OnAbort();
    }

    /// <summary>
    /// Once forward or aswer is done, show the proper toast
    /// </summary>
    /// <param name="RA"></param>
    private async void OnSend(Models.RisultatoAzione RA)
    {
        if (IsForwardDialog)
        {
            if (RA.Successo) ToastForwardOK.Show();
            else ToastForwardKO.Show();
        }
        else
        {
            if (RA.Successo) ToastAnswerOK.Show();
            else ToastAnswerKO.Show();
        }
        Grid.Refresh();
        OnAbort();
    }


    /// <summary>
    /// Close all dialog panels
    /// </summary>
    private async void OnAbort()
    {
        IsAnswerDialog = false; IsForwardDialog = false; IsMoveDialog = false; IsShowDialog = false; IsLogsDialog = false;
    }

    /// <summary>
    /// On linking item, refresh the grid and components
    /// </summary>
    /// <param name="data"></param>
    private async void OnLinkToItem((string DossierId, string ItemId) data)
    {
        // ToastAttachOK.Show();
        _NavigationManager.NavigateTo($"/Mail/RegisterEND/{AttachID}/{data.ItemId}");

    }


    /// <summary>
    /// Set Description of the costumer
    /// </summary>
    public void ApplyCustomer()
    {
        CostumerDesc = "";
        if (string.IsNullOrEmpty(Attach.Chiave3))
            CostumerDesc = $"Cliente da selezionare";
        else if (!string.IsNullOrEmpty(CustomerCode))
            CostumerDesc = $"{CustomerCode} - {CustomerName?? ""}";       
        else if (string.IsNullOrEmpty(CustomerCode) && string.IsNullOrEmpty(CustomerName))
            CostumerDesc = $"Cliente con codice [{Attach.Chiave3}] non trovato";
    }

    /// <summary>
    /// On request to link, link or create the registration
    /// </summary>
    /// <param name="ElemType"></param>
    public void OnLinkItemPressed(TipiElementi ElemType)
    {
        if (ElemType.AggregaAElemento)
        {
            LinkDescription = $"L'Email stata allegata come [{ElemType.Descrizione}]";
            OnLink(ElemType);
        }
        else
        if (!string.IsNullOrEmpty(AttachID))
            _NavigationManager.NavigateTo($"/Mail/Register/{AttachID}/{ElemType.Codice}");            
    }

    /// <summary>
    /// Open the component for linking the email to an element
    /// </summary>
    public async void OnLink(TipiElementi ElemType)
    {
        try
        {
            string component =  _SubjectService.UrlServizioRicercaElementi(_NavigationManager.Uri);
            DynamicAttributes.Clear();

            IsShowDialog = true;

            DynamicContent = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetTypes().FirstOrDefault(y => y.FullName == component) != null)?.GetType(component);

            if (!component.StartsWith("dblu.Portale") || DynamicContent == null)
            {
                UndefinedComponent(component);
                return;
            }


            DynamicAttributes.Add(new dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute()
            {
                Name = "nAttachID",
                Position = 1,
                Value = AttachID
            });

            DynamicAttributes.Add(new dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute()
            {
                Name = "nCostumerCode",
                Position = 2,
                Value = CustomerCode
            });

            DynamicAttributes.Add(new dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute()
            {
                Name = "nItemType",
                Position = 6,
                Value = ElemType
            });

            DynamicAttributes.Add(new dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute()
            {
                Name = "nAttachments",
                Position = 7,
                Value = SourceAttach

            });

            DynamicAttributes.Add(new dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute()
            {
                Name = "IsShowDialog",
                Position = 3,
                Value = RuntimeHelpers.TypeCheck<bool>(IsShowDialog)
            });

            DynamicAttributes.Add(new dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute()
            {
                Name = "IsShowDialogChanged",
                Position = 4,
                Value = RuntimeHelpers.TypeCheck<EventCallback<bool>>(
                EventCallback.Factory.Create<bool>(this,
                    RuntimeHelpers.CreateInferredEventCallback(this, __value => IsShowDialog = __value, IsShowDialog)))
            });

            DynamicAttributes.Add(new dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute()
            {
                Name = "OnLinkedToItem",
                Position = 5,
                Value = EventCallback.Factory.Create<(string, string)>(this, OnLinkToItem)
            });

        }
        catch (Exception ex)
        {
            _Logger.LogError($"Inbox[UI].OnLink: Unexpected error {ex}");
        }
    }

    /// <summary>
    /// Display the Undefined component, using dynmic loading
    /// </summary>
    /// <param name="nComponent">Name of the component</param>
    public void UndefinedComponent(string nComponent)
    {
        try
        {
            IsShowDialog = true;
            DynamicAttributes.Clear();
            string component = "dblu.Portale.Plugin.Docs.Pages.Custom.UndefinedComponentPopUp";
            DynamicContent = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetTypes().FirstOrDefault(y => y.FullName == component) != null)?.GetType(component);


            DynamicAttributes.Add(new dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute()
            {
                Name = "nComponentName",
                Position = 1,
                Value = nComponent
            });

            DynamicAttributes.Add(new dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute()
            {
                Name = "IsShowDialog",
                Position = 1,
                Value = RuntimeHelpers.TypeCheck<bool>(IsShowDialog)
            });

            DynamicAttributes.Add(new dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute()
            {
                Name = "IsShowDialogChanged",
                Position = 2,
                Value = RuntimeHelpers.TypeCheck<EventCallback<bool>>(
                EventCallback.Factory.Create<bool>(this,
                    RuntimeHelpers.CreateInferredEventCallback(this, __value => IsShowDialog = __value, IsShowDialog)))
            });
        }
        catch (Exception ex)
        {
            _Logger.LogError($"Inbox[UI].UndefinedComponent: Unexpected error {ex}");
        }
    }

}
