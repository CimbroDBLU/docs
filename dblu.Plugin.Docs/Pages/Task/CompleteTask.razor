@*
    Component for Complete a task, showing details of the element
*@
@using BPMClient
@using dblu.Docs.Models
@using dblu.Portale.Plugin.Docs.Pages.Docs.Shared
@using dblu.Portale.Plugin.Docs.Classes
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager  _NavigationManager
@inject ProtectedSessionStorage _SessionStore
@inject dblu.Portale.Plugin.TaskListBase.Services.Camunda.CamundaService  _CamundaService
@inject dblu.Portale.Plugin.Docs.Services.AllegatiService _AttachService
@inject ILogger<CompleteTask> _Logger
@inject IJSRuntime JSRuntime

<PageTitle nTitle="Completa attività" />

<section class="content">
    <EditItemMetadata nItem="@Item" nShowMetadata="false"></EditItemMetadata>
    <CardContent EnableSeperator="true">
        <div class="row">
            <div class="col-12">
                <SfButton OnClick="ShowDialog" CssClass="e-primary">Completa</SfButton>
                <SfButton OnClick="GoBack">Indietro</SfButton>
            </div>
        </div>
    </CardContent>

    <Toast @ref="ToastCompleteKO" nToastType="Toast.e_ToastType.Fail" nTitle="Completamento task" nContent="Completamento task NON riuscito"></Toast>

    <QuestionDialog nTitle="Conferma"
                    nText="@DialogTitle"
                    OnExitPressed="OnCloseDialog"
                    OnNoPressed="OnCloseDialog"
                    OnYesPressed="OnComplete"
                    OnClose="OnCloseDialog"
                    nShowDialog="@IsShowDialog">
    </QuestionDialog>

    <Toast @ref="ToastCompleteKO" nToastType="Toast.e_ToastType.Fail" nTitle="Completamento task" nContent="Completamento task NON riuscito"></Toast>
    <Toast @ref="ToastCompleteOK" nToastType="Toast.e_ToastType.OK" nTitle="Completamento task" nContent="Task Completato"></Toast>
</section>


@code {

    /// <summary>
    /// Task that is managed from this view
    /// </summary>
    [Parameter]
    public BPMTaskDto nTask { get; set; }

    /// <summary>
    /// List of variables of the Task
    /// </summary>
    private Dictionary<string, VariableValue> Variables { get; set; } = new();

    /// <summary>
    /// Item  ID under process
    /// </summary>
    private Elementi Item { get; set; }

    /// <summary>
    /// Toaster to show in case of failed task
    /// </summary>
    private Toast ToastCompleteKO { get; set; }

    /// <summary>
    /// Toaster to show in case of completed task
    /// </summary>
    private Toast ToastCompleteOK { get; set; }

    /// <summary>
    /// Title of the complete task dialog
    /// </summary>
    private string DialogTitle { get; set; } = "";

    /// <summary>
    /// Indicateds if dialog for complete task is showed
    /// </summary>
    private bool IsShowDialog { get; set; } = false;

    /// <summary>
    /// Initialize the collections
    /// </summary>
    protected override void OnInitialized()
    {
        BPMVariable var = new BPMVariable();
        Variables = var.GetAll(_CamundaService._eng, nTask.id).Result;

        if (Variables.ContainsKey("IdElemento"))
            Item = _AttachService.GetElemento(Guid.Parse((string)Variables["IdElemento"].value), 0);
        else
            if (Variables.ContainsKey("_IdElemento"))
            Item = _AttachService.GetElemento(Guid.Parse((string)Variables["_IdElemento"].value), 0);
    }

    /// <summary>
    /// Go back to the caller
    /// </summary>
    private async void GoBack()
    {
        string back = (await _SessionStore.GetAsync<string>("Referrer")).Value;
        if (string.IsNullOrEmpty(back))
            _NavigationManager.NavigateTo($"/BPM/ActivityList");
        else
        {
            await JSRuntime.InvokeVoidAsync("BlazorSetHREF", back);        
            await _SessionStore.DeleteAsync("Referrer");
        }
    }

    /// <summary>
    /// Complete the task
    /// </summary>
    private async void OnComplete()
    {
        bool res = false;
        try
        {
            IsShowDialog = false;
            Stopwatch sw = Stopwatch.StartNew();
            BPMTask tsk = new BPMTask();
            Dictionary<string, VariableValue> fVars = await tsk.GetTaskFormVariables(_CamundaService._eng, nTask.id);
            BPMTaskDto tdto = tsk.Get(_CamundaService._eng, nTask.id);
            res = tsk.SubmitTaskForm(_CamundaService._eng, nTask.id, fVars);
            if (res)
            {
                _Logger.LogInformation($"CompleteTask.Complete: Completed task {nTask.id} in {sw.ElapsedMilliseconds} ms");
                ToastCompleteOK.Show();
                GoBack();
            }
            else
            {
                ToastCompleteKO.Show();
            }
        }
        catch (Exception ex)
        {
            _Logger.LogError($"CompleteTask.Complete: Unexpected exception {ex}");
        }
    }

    /// <summary>
    /// Open the confirmation dialog
    /// </summary>
    private void ShowDialog()
    {
        DialogTitle = $"Completi il task {nTask.name} [{nTask.description}] ?";
        IsShowDialog = true;
    }

    /// <summary>
    /// Close the confirmation dialog
    /// </summary>
    private void OnCloseDialog()
    {
        IsShowDialog = false;
    }

}
