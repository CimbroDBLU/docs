@*
    Component for showing a table with all emails
*@

@using dblu.Docs.Models
@using dblu.Docs.Classi
@using dblu.Portale.Plugin.Docs.Services
@using dblu.Portale.Core.Infrastructure.Identity.Classes
@using dblu.Portale.Core.Infrastructure.Identity.Services
@using Microsoft.AspNetCore.Http
@using System.Security.Claims
@using dblu.Portale.Plugin.Docs.Pages.Docs.Shared
@using Syncfusion.Blazor.Data
@using System.Timers
@implements IDisposable

@inject dblu.Portale.Plugin.Docs.Services.ZipService _ZipService
@inject IHttpContextAccessor _HttpContextAccessor
@inject ILogger<FileTable> _Logger
@inject IConfiguration _Conf



<SfGrid @ref="@Grid" ID="@Id" EnablePersistence="true" DataSource="@nFiles" TValue="Allegati" AllowGrouping="false" AllowTextWrap="true" AllowPaging="true" AllowSorting="true">
    <GridSelectionSettings PersistSelection="true" Type="Syncfusion.Blazor.Grids.SelectionType.Single" Mode="Syncfusion.Blazor.Grids.SelectionMode.Row"></GridSelectionSettings>
    <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
    <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="EditMode.Batch"></GridEditSettings>
    <GridPageSettings PageSize="20"></GridPageSettings>
    <GridEvents TValue="Allegati" OnDataBound="OnDataBoundHandler" DataBound="DataBoundHandler" OnToolbarClick="OnToolbarClick" RowSelected="RowSelected" RowDeselected="RowDeselected"></GridEvents>

    <SfSpinner @bind-Visible="IsSpinnerVisible">
    </SfSpinner>

    <SfToolbar>
        <ToolbarEvents Clicked="OnToolbarClick"></ToolbarEvents>
        <ToolbarItems>

            <ToolbarItem Id="Refresh" TooltipText="Aggiorna">
                <Template>
                    <div style="position:relative">
                        <button type="button" tabindex="-1" style="width:auto" aria-label="Aggiorna" class="e-control e-btn e-lib e-tbar-btn e-icon-btn e-icon-btn">
                            <span class="e-refresh e-icons e-btn-icon">
                                @if (NewItems != 0)
                                {
                                    <span style="padding: 0.2rem;font-family:Verdana;line-height:8px;font-size: 10px; border-radius: 5px; background: Tomato; right: 0px; top: 2px; position: absolute;">@NewItems</span>
                                }
                            </span>
                        </button>
                    </div>
                </Template>
            </ToolbarItem>

            @if (nType == TableType.Inbox)
            {
                <ToolbarItem Id="Move" PrefixIcon="e-icons e-folder" TooltipText="Sposta"></ToolbarItem>
            }

            @if (nType == TableType.Processed)
            {
                <ToolbarItem Id="ReOpen" PrefixIcon="e-comment-reopen" TooltipText="Riapri"></ToolbarItem>
            }

            <ToolbarItem Id="Delete" PrefixIcon="e-icons e-delete" TooltipText="Cancella"></ToolbarItem>
            <ToolbarItem Id="Log" PrefixIcon="e-icons e-justify" TooltipText="Visualizza logs"></ToolbarItem>
            <ToolbarItem Align=ItemAlign.Right Id="SearchItem" Type="ItemType.Input">
                <Template>
                    <SfTextBox @ref="@SearchText" ID="SearchItemText" EnablePersistence="false" Autocomplete="AutoComplete.On" @bind-Value="@SearchKey" @onchange="OnSearch" Placeholder="Ricerca" Created="@OnSearchCreated"></SfTextBox>
                </Template>
            </ToolbarItem>
        </ToolbarItems>
    </SfToolbar>


    <GridColumns>
        <GridColumn IsPrimaryKey="true" Visible="false" Field=@nameof(Allegati.Id)></GridColumn>
        <GridColumn AllowEditing="false" AllowSorting="true" Field=@nameof(Allegati.Chiave3) HeaderText="Mittente">
            <Template>
                @{
                    var Attach = (context as Allegati);
                    bool IsClient = !string.IsNullOrEmpty(Attach.Chiave3);
                    <div>
                        @if (IsClient)
                        {
                            <span>Cliente: @Attach.Chiave3</span>
                            <br />
                        }
                        <b>@Attach.Chiave4</b><br />
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn AllowEditing="false" AllowSorting="true" Field=@nameof(Allegati.Descrizione) HeaderText="Descrizione">
            <Template>
                @{
                    var Attach = (context as Allegati);
                    <div>

                        <span>@Attach.Descrizione</span>
                        <br />

                        <b>RIF: @Attach.Chiave5</b><br />
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn AllowEditing="false" Width="120px" AllowSorting="true" Field=@nameof(Allegati.DataC) HeaderText="Data" Format="d" Type="ColumnType.Date"></GridColumn>
        <GridColumn AllowEditing="false" Width="40px" AllowSorting="true" Field=@nameof(Allegati.LastOp) HeaderText="LastOp">
            <Template>
                <LastOperation nOperation="@((context as Allegati).LastOp)"></LastOperation>
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>


@code {

    ///// <summary>
    ///// Url to use to retreive paginated data
    ///// </summary>
    //private string DataUrl => $"/ODATA/Files(Doc='{nDocumentType.ToString()}',Type='{nType.ToString()}',Folder='{nFolder?.Cartella}')";

    /// <summary>
    /// Indicates if spinner must be visible
    /// </summary>
    private bool IsSpinnerVisible { get; set; } = false;

    /// <summary>
    ///Type of mail that we need to show
    /// </summary>
    public enum TableType
    {
        /// <summary>
        /// Inbox emails
        /// </summary>
        Inbox,
        /// <summary>
        /// Processed emails
        /// </summary>
        Processed
    };

    /// <summary>
    /// Id of the table
    /// </summary>
    public string Id => "FileTable" + nType.ToString();

    /// <summary>
    /// Mailbox that we are browsing
    /// </summary>
    [Parameter]
    public EmailServer nFolder { get; set; }

    /// <summary>
    /// Type of maitable we are browsing
    /// </summary>
    [Parameter]
    public TableType nType { get; set; } = TableType.Inbox;

    /// <summary>
    /// Specify witch type od file we are processing
    /// </summary>
    [Parameter]
    public TipiDocumentiFile nDocumentType { get; set; } = TipiDocumentiFile.ZIP;

    /// <summary>
    /// Attachment we have to select if any (useful for go back)
    /// </summary>
    [Parameter]
    public string nPreselAttach { get; set; } = "";

    /// <summary>
    /// Fires when an attach is selected
    /// </summary>
    [Parameter]
    public EventCallback<(Allegati,bool)> OnSelectAttachment { get; set; }

    /// <summary>
    /// Fires when user request to reply
    /// </summary>
    [Parameter]
    public EventCallback<Allegati> OnReplyAttachment { get; set; }

    /// <summary>
    /// Fires when user request to forward
    /// </summary>
    [Parameter]
    public EventCallback<Allegati> OnForwardAttachment { get; set; }

    /// <summary>
    /// Fires when user request to move an item
    /// </summary>
    [Parameter]
    public EventCallback<Allegati> OnMoveAttachment { get; set; }

    /// <summary>
    /// Fires when user request to see source of an email
    /// </summary>
    [Parameter]
    public EventCallback<Allegati> OnShowAttachment { get; set; }

    /// <summary>
    /// Fires when user request to see operative logs
    /// </summary>
    [Parameter]
    public EventCallback<Allegati> OnShowLogsAttachment { get; set; }

    /// <summary>
    /// Fires when user request to delete an email
    /// </summary>
    [Parameter]
    public EventCallback<Allegati> OnDeleteAttachment { get; set; }

    /// <summary>
    /// Fires when user request to re-opem an email
    /// </summary>
    [Parameter]
    public EventCallback<Allegati> OnReOpenAttachment { get; set; }

    /// <summary>
    /// Reference to the grid
    /// </summary>
    private SfGrid<Allegati> Grid { get; set; }

    /// <summary>
    /// Previous selected Mailbox
    /// </summary>
    public EmailServer nFolderOld { get; set; }

    /// <summary>
    /// List of attachment to show
    /// </summary>
    private ObservableCollection<Allegati> nFiles { get; set; } = new();

    /// <summary>
    /// Get/set the current selected row
    /// </summary>
    public double SelectedRow { get => Grid.SelectedRowIndex; set { Grid.SelectRowAsync(value); } }

    /// <summary>
    /// Text box for seaching
    /// </summary>
    private SfTextBox SearchText { get; set; }

    /// <summary>
    /// The key text type inside search box
    /// </summary>
    private string SearchKey { get; set; } = "";

    /// <summary>
    /// New Items identifies in last check
    /// </summary>
    private int NewItems { get; set; } = 0;

    /// <summary>
    /// Timer for periodically check for new emails
    /// </summary>
    private Timer InTimer { get; set; }

    /// <summary>
    /// Last emails arrived and visualized in current folder
    /// </summary>
    private DateTime LastFileTime { get; set; }

    /// <summary>
    /// List of previous selected indexes on the table
    /// </summary>
    private List<double> SelectedIndexes { get; set; } = new();

    /// <summary>
    /// Clear the selection
    /// </summary>
    public  void ClearSelectionAsync() {SelectedIndexes.Clear(); Grid.ClearSelection(); }

    /// <summary>
    /// On init , if necessary, start the timer
    /// </summary>
    protected override async void OnInitialized()
    {

        int.TryParse(_Conf["Docs:AutoRefresh"], out int Time);
        if (Time != 0)
        {
            Time = Time * (60 * 1000);
            InTimer = new Timer();
            InTimer.Elapsed += NotifyTimerElapsed;
            InTimer.AutoReset = true;
            InTimer.Interval = Time;
            InTimer.Enabled = true;
            _Logger.LogInformation($"FileTable.OnInitialized: Autorefresh set every {Time} ms");
        }
        else _Logger.LogDebug($"FileTable.OnInitialized: Autorefresh NOT set");
    }

    /// <summary>
    /// Close the timer on dispose
    /// </summary>
    public void Dispose() => InTimer?.Dispose();

    /// <summary>
    /// Add the search icon to the text box
    /// </summary>
    public void OnSearchCreated()
    {
        this.SearchText.AddIcon("append", "e-icons e-search");

    }

    /// <summary>
    /// Apply the search
    /// </summary>
    public void OnSearch()
    {
        ClearSelectionAsync();
        Grid.SearchAsync(SearchKey);
    }

    /// <summary>
    /// Once the time fire, check for incoming emails
    /// </summary>
    /// <param name="source"></param>
    /// <param name="e"></param>
    private void NotifyTimerElapsed(object source, ElapsedEventArgs e)
    {
        int tmp = NewItems;
        switch (nType)
        {
            case TableType.Inbox:
                NewItems = _ZipService._allMan.GetNewInboxFiles (nDocumentType.ToString(), nFolder?.Nome??"", LastFileTime);
                break;
        }
        if(tmp!=NewItems)
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
    }

    /// <summary>
    /// On Init component
    /// </summary>
    protected override Task OnParametersSetAsync()
    {
        if (nFolder is not null)
        {
            if (nFolderOld != nFolder)
            {
                Refresh();
            }
        }
        else nFiles = new();
        return base.OnParametersSetAsync();
    }

    /// <summary>
    /// Remove selected attach from grid and clear the selection
    /// </summary>
    /// <param name="AttachId">Id to remove</param>
    public void RemoveItem(string AttachId)
    {
        nFiles.Remove(nFiles.FirstOrDefault(x => x.Id.ToString() == AttachId));
        ClearSelectionAsync();
    }

    /// <summary>
    /// On record select forward the selection
    /// </summary>
    /// <param name="args"></param>
    public void RowSelected(RowSelectEventArgs<Allegati> args)
    {
        OnSelectAttachment.InvokeAsync((args.Data,args.IsInteracted));
        _Logger.LogDebug($"FileTable.RowSelected: Selected attach {args.Data.Id}");
    }

    /// <summary>
    /// On record select forward the selection
    /// </summary>
    /// <param name="args"></param>
    public async void RowDeselected(RowDeselectEventArgs<Allegati> args)
    {
        // Commentata per San Giacomo, anche se secondo me starebbe meglio  de-commentata...
        // Andrea Ghizzo ha paura che gli utente facciano doppio click per selezionare e non vedendo la mail selezionata muoiano.

        //if ((await Grid.GetSelectedRecordsAsync()).Count == 0)
        //{
        //    _Logger.LogDebug($"FileTable.RowDeselected: Deselected attach {args.Data.Id}");
        //    await OnSelectAttachment.InvokeAsync(null);
        //}        
    }
    /// <summary>
    /// Forward the events on toolbar button press
    /// </summary>
    /// <param name="args"></param>
    public async void OnToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        Allegati Attach = (await Grid.GetSelectedRecords()).FirstOrDefault();

        if (Attach == null) return;

        if (args.Item.Id == "Answer")
            await OnReplyAttachment.InvokeAsync(Attach);
        else if (args.Item.Id == "Forward")
            await OnForwardAttachment.InvokeAsync(Attach);
        else if (args.Item.Id == "Move")
            await OnMoveAttachment.InvokeAsync(Attach);
        else if (args.Item.Id == "ShowHTML")
            await OnShowAttachment.InvokeAsync(Attach);
        else if (args.Item.Id == "Log")
            await OnShowLogsAttachment.InvokeAsync(Attach);
        else if (args.Item.Id == "Delete")
            await OnDeleteAttachment.InvokeAsync(Attach);
        else if (args.Item.Id == "Refresh")
            Refresh();
        else if (args.Item.Id == "ReOpen")
            await OnReOpenAttachment.InvokeAsync(Attach);
    }

    /// <summary>
    /// Reload the list fo the email
    /// </summary>
    public async void Refresh()
    {
        if(nFolderOld == nFolder)
        {
            SelectedIndexes.Clear();
            List<double> T = (await Grid.GetSelectedRowIndexesAsync()).ToList();
            foreach (var index in T)
                SelectedIndexes.Add(index);
            Grid.ClearSelectionAsync();
        }
        else ClearSelectionAsync();
        nFolderOld = nFolder;
        IsSpinnerVisible=true;
        //Grid.DataManager.Url = DataUrl;
        Task.Run(async () =>
        {
        Stopwatch sw = Stopwatch.StartNew();
        switch(nType)
        {
           case TableType.Inbox:
                nFiles= new ObservableCollection<Allegati>(_ZipService._allMan.GetZipInArrivo(nDocumentType.ToString(), nFolder.Cartella).OrderBy(c => c.DataC));
                _Logger.LogInformation($"InFiles.Refresh[{TableType.Inbox},{nFolder.Nome},{nDocumentType}]: {nFiles.Count} files detected in {sw.ElapsedMilliseconds} ms");
           break;
           case TableType.Processed:
                nFiles= new ObservableCollection<Allegati>(_ZipService._allMan.GetEmailProcessate(nDocumentType.ToString(), nFolder.Cartella).OrderBy(c => c.DataC));
                _Logger.LogInformation($"InFiles.Refresh[{TableType.Processed},{nFolder.Nome},{nDocumentType}]: {nFiles.Count} files detected in {sw.ElapsedMilliseconds} ms");
           break;
        }

        switch (nType)
        {
            case TableType.Inbox: LastFileTime = _ZipService._allMan.GetLastInboxFileTime(nDocumentType.ToString(), nFolder.Cartella); break;
        }
        NewItems = 0;
        InvokeAsync(() => { Grid.Refresh(); IsSpinnerVisible = false; });
        });     
    }

    /// <summary>
    /// On reloading list of email, the presel attach will be selected
    /// </summary>
    /// <param name="args"></param>
    public async void OnDataBoundHandler(BeforeDataBoundArgs<Allegati> args)
    {
        ClearSelectionAsync();
        SearchKey = Grid.SearchSettings.Key;
    }


    /// <summary>
    /// Page in witch i am searching th selection (sometimes seems not keep the page so, if i cannot find the item, i search from page 1 to )
    /// </summary>
    private int Page{ get; set; } = 1;

    /// <summary>
    /// On databound check id there is content, to send selection properly
    /// </summary>
    public async void DataBoundHandler()
    {
        try
        {
             foreach (var index in SelectedIndexes)               
                await Grid.SelectRowAsync(index);

             if ((await Grid.GetSelectedRecordsAsync()).Count != 0)
                return;

            _Logger.LogDebug("FileTable.DataBoundHandler: Selection empty -> AutoSelection needed");


            if (Grid.CurrentViewData.Count() == 0)
                {
                await OnSelectAttachment.InvokeAsync((null,false));
                _Logger.LogDebug("FileTable.DataBoundHandler: Auto Deselect");
                }
            else
            {
                if (!string.IsNullOrEmpty(nPreselAttach))
                {
                    Allegati e = Grid.CurrentViewData.Where(x => (x as Allegati).Id == Guid.Parse(nPreselAttach)).FirstOrDefault() as Allegati;
                    var PrimayIndex = await this.Grid.GetRowIndexByPrimaryKey(Guid.Parse(nPreselAttach));
                    if(PrimayIndex==-1 && Page < 100 && nFiles.Any(x=>x.Id==Guid.Parse(nPreselAttach)))
                    {
                        await Grid.GoToPageAsync(Page++);
                        return;
                    }
                    Page = 1;
                    await this.Grid.SelectRow(PrimayIndex);
                    OnSelectAttachment.InvokeAsync((e,false));
                    _Logger.LogDebug("FileTable.DataBoundHandler: Select presel");
                }
                else
                {
                    Allegati e = (Grid.CurrentViewData).FirstOrDefault() as Allegati;
                    var PrimayIndex = await this.Grid.GetRowIndexByPrimaryKey(e.Id);
                    await this.Grid.SelectRow(PrimayIndex);
                    OnSelectAttachment.InvokeAsync((e,false));
                    _Logger.LogDebug("FileTable.DataBoundHandler: Select first");
                }
            }
        }
        catch (Exception)
        {
            _Logger.LogWarning("FileTable.DataBoundHandler: Items changed during loading...");
        }
    }
}
