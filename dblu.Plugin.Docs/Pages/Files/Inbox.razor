@*
    Page that manage the inbox and its interaction with Dossiers and Items
*@

@page "/Files/{nDocType}/Inbox"
@page "/Files/{nDocType}/Inbox/{nPreselAttach}"
@page "/Files/{nDocType}/Inbox/{nPreselFolder}/{nPreselAttach}"
@page "/Files/{nDocType}/Inbox/{nPreselFolder}/{nPreselAttach}/{nPreselItem}"

@using dblu.Docs.Models
@using dblu.Docs.Classi
@using dblu.Portale.Plugin.Docs.Services
@using dblu.Portale.Plugin.Docs.Pages.Docs.Shared
@using dblu.Portale.Plugin.Docs.Pages.Mail.Shared
@using dblu.Portale.Plugin.Docs.Pages.Files.Shared
@using dblu.Portale.Plugin.Docs.Classes
@using Microsoft.AspNetCore.Http
@using System.IO
@using dblu.Docs.Interfacce
@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject dblu.Docs.Interfacce.ISoggettiService _SubjectService
@inject IHttpContextAccessor _HttpContextAccessor
@inject NavigationManager _NavigatorManager
@inject ILogger<Inbox> _Logger

<PageTitle nTitle="@Title" />

<section class="content">

    <SfSpinner @bind-Visible="IsSpinnerVisible">
    </SfSpinner>

    <SfCard>
        <CardHeader Title="@Title" />
        <CardContent EnableSeperator="true">
            <div class="row form-group">
                <div class="col-5" style="align-self: auto;">
                    <div class="row form-group">
                        <div class="col">
                            <ServerCombo nLabel="Cartella" nPresel="@nPreselFolder" nRecordServer="TipiRecordServer.CartellaFile" nDocumentType="@DocType" @bind-nServer="@MailBox"></ServerCombo>
                        </div>
                    </div>
                    <div class="row ">
                        <div class="col">
                            <FileTable @ref="@Grid" nFolder="@MailBox" nDocumentType="@DocType" OnSelectAttachment="OnSelectAttach" OnMoveAttachment="OnMove" OnShowLogsAttachment="OnShowLogs" OnDeleteAttachment="OnDelete" nPreselAttach="@nPreselAttach"></FileTable>
                        </div>
                    </div>
                </div>

                <div class="col-7" style="align-self: auto;">
                    @if (!string.IsNullOrEmpty(AttachID))
                    {
                        if (IsMoveDialog)
                        {
                            <div class="row form-group">
                                <div class="col">
                                    <SfAccordion>
                                        <AccordionItems>
                                            <AccordionItem Expanded="true">
                                                <HeaderTemplate>
                                                    <div>Sposta <b>@AttachSubject</b></div>
                                                </HeaderTemplate>
                                                <ContentTemplate>
                                                    <REG_MoveInFolder nRecordServer="TipiRecordServer.CartellaFile" nDocumentType="@DocType" nAttach="@Attach" nSourceServer="@MailBox" OnOperationDone="OnDone" OnAbort="OnAbort"></REG_MoveInFolder>
                                                </ContentTemplate>
                                            </AccordionItem>
                                        </AccordionItems>
                                    </SfAccordion>
                                </div>
                            </div>
                        }
                        else if (IsLogsDialog)
                        {
                            <div class="row form-group">
                                <div class="col">
                                    <SfAccordion>
                                        <AccordionItems>
                                            <AccordionItem Expanded="true">
                                                <HeaderTemplate>
                                                    <div>Operazioni sul file <b>@AttachSubject</b></div>
                                                </HeaderTemplate>
                                                <ContentTemplate>
                                                    <REG_Logs nAttach="@Attach" OnAbort="OnAbort"></REG_Logs>
                                                </ContentTemplate>
                                            </AccordionItem>
                                        </AccordionItems>
                                    </SfAccordion>
                                </div>
                            </div>
                        }
                        else
                        {
                            @*CLIENTE*@
                            <div class="row form-group">
                                <div class="col">
                                    <SfAccordion>
                                        <AccordionItems>
                                            <AccordionItem Expanded="true">
                                                <HeaderTemplate>
                                                    <div>@CostumerDesc</div>
                                                </HeaderTemplate>
                                                <ContentTemplate>
                                                    <REG_Customer OnOpenItems="OnOpenItems"  OnLinkedToCostumer="OnLinkCostumer"  nCostumerCode="@CustomerCode" nCostumerName="@CustomerName" nAttachID="@AttachID"></REG_Customer>
                                                </ContentTemplate>
                                            </AccordionItem>
                                        </AccordionItems>
                                    </SfAccordion>
                                </div>
                            </div>
                            @*FASCICOLI*@
                            <div class="row form-group">
                                <div class="col">
                                    <SfAccordion>
                                        <AccordionItems>
                                            <AccordionItem Expanded="true">
                                                <HeaderTemplate>
                                                    <div>@DossierDesc</div>
                                                </HeaderTemplate>
                                                <ContentTemplate>
                                                    <REG_AttachDossierItems OnRefresh="OnRefreshDossier" nSelectedItem="@nPreselItem" nRecordServer="TipiRecordServer.CartellaFile" nDocumentType="@DocType" nCurrentDocument="@Document" nAttachID="@AttachID" nCostumerCode="@CustomerCode" nDossierID="@DossierID" nAttachments="@SourceAttach" nSourceFolder="@MailBox.Nome" OnAttachCompleted="OnAttachCompleted" OnLinkedToItem="OnLinkToItem" OnSelectedItem="OnSelectedItem"></REG_AttachDossierItems>
                                                </ContentTemplate>
                                            </AccordionItem>
                                        </AccordionItems>
                                    </SfAccordion>
                                </div>
                            </div>

                            @*ALLEGATI EMAIL*@
                            @if (@IsAttachVisible)
                            {
                                <div class="row form-group">
                                    <div class="col">
                                        <SfAccordion>
                                            <AccordionItems>
                                                <AccordionItem Expanded="@IsAttachExpanded">
                                                    <HeaderTemplate>
                                                        <div>Allegati nel file</div>
                                                    </HeaderTemplate>
                                                    <ContentTemplate>
                                                        <OriginalAttachsTable nAttachID="@AttachID" nAttachments="@SourceAttach" nRecordServer="TipiRecordServer.CartellaFile"></OriginalAttachsTable>
                                                    </ContentTemplate>
                                                </AccordionItem>
                                            </AccordionItems>
                                        </SfAccordion>
                                    </div>
                                </div>
                            }
                        }
                        @*PDF VIEWER*@
                    <div class="row form-group">
                        <div class="col">
                            <SfAccordion>
                                <AccordionItems>
                                    <AccordionItem Expanded="true">
                                        <HeaderTemplate>
                                            <div>Anteprima</div>
                                        </HeaderTemplate>
                                        <ContentTemplate>

                                            <DocViewer @ref="@Viewer" OnDocumentTransformed="OnDocumentTransformedZ" nHeight=700 nSourceType="@PDFSourceType" nDocIdentifier="@PDFSourceId"></DocViewer>
                                        </ContentTemplate>
                                    </AccordionItem>
                                </AccordionItems>
                            </SfAccordion>
                        </div>
                    </div>
                    }
                </div>
            </div>
        </CardContent>
    </SfCard>

    <QuestionDialog nTitle="Conferma"
                    nText="Rimuovo il file selezionato?"
                    OnExitPressed="OnCloseDialog"
                    OnNoPressed="OnCloseDialog"
                    OnYesPressed="OnDeleteConfirmed"
                    OnClose="OnCloseDialog"
                    nShowDialog="@ShowConfirm">
    </QuestionDialog>

    <Toast @ref="ToastOK" nToastType="Toast.e_ToastType.OK" nTitle="Elimina file" nContent="File eliminato correttamente"></Toast>
    <Toast @ref="ToastKO" nToastType="Toast.e_ToastType.Fail" nTitle="Elimina file" nContent="Eliminazione non riuscita"></Toast>

    <Toast @ref="ToastMoveOK" nToastType="Toast.e_ToastType.OK" nTitle="Sposta file" nContent="File spostato correttamente"></Toast>
    <Toast @ref="ToastMoveKO" nToastType="Toast.e_ToastType.Fail" nTitle="Sposta file" nContent="Spostamento NON riuscito"></Toast>

</section>

@code
{


    /// <summary>
    /// Folder that has to be preselected
    /// </summary>
    [Parameter]
    public string nPreselFolder { get; set; } = "";

    /// <summary>
    /// Email that has to be selected, if any. We expect to receive the qattach id of the email selected
    /// </summary>
    [Parameter]
    public string nPreselAttach { get; set; } = "";

    /// <summary>
    /// Item that has to be preselected
    /// </summary>
    [Parameter]
    public string nPreselItem { get; set; } = "";

    /// <summary>
    /// Type of document we need to manage (ZIP,REQ...)
    /// </summary>
    [Parameter]
    public string nDocType { get; set; } = "ZIP";

    /// <summary>
    /// Type of document we need to manage as enum
    /// </summary>
    public TipiDocumentiFile DocType { get; set; }

    /// <summary>
    /// Document viewer
    /// </summary>
    private DocViewer Viewer { get; set; }

    /// <summary>
    /// Reference to the Mail grid
    /// </summary>
    private FileTable Grid { get; set; }

    /// <summary>
    /// Indicates if the spinner has to be showed
    /// </summary>
    private bool IsSpinnerVisible { get; set; } = false;

    /// <summary>
    /// Indicates if Mail attachments panel is visible
    /// </summary>
    private bool IsAttachVisible { get; set; } = false;

    /// <summary>
    /// Indicates if Mail attachments panel has has to be expanded
    /// </summary>
    private bool IsAttachExpanded { get; set; } = false;

    /// <summary>
    /// Indicates if Move panel is visible
    /// </summary>
    private bool IsMoveDialog { get; set; } = false;

    /// <summary>
    /// Indicates if LOG panel is visible
    /// </summary>
    private bool IsLogsDialog { get; set; } = false;

    /// <summary>
    /// Attach ID
    /// </summary>
    public string AttachID { get; set; }

    /// <summary>
    /// Attachment Subject
    /// </summary>
    private string AttachSubject { get; set; }

    /// <summary>
    /// Dossier ID
    /// </summary>
    private string DossierID { get; set; }

    /// <summary>
    /// Costumer Code
    /// </summary>
    private string CustomerCode
    {
        get;
        set;
    }

    /// <summary>
    /// Costumer Name
    /// </summary>
    private string CustomerName { get; set; } = "";

    /// <summary>
    /// Show delete confirm
    /// </summary>
    private bool ShowConfirm { get; set; } = false;

    /// <summary>
    /// Item ID
    /// </summary>
    private string ItemID { get; set; }

    /// <summary>
    /// Current Mail box
    /// </summary>
    private EmailServer MailBox { get; set; }

    /// <summary>
    /// Current Attach
    /// </summary>
    private Allegati Attach { get; set; }

    /// <summary>
    /// Toaster for a positive deletion
    /// </summary>
    private Toast ToastOK { get; set; }

    /// <summary>
    /// Toaster for a negative deletion
    /// </summary>
    private Toast ToastKO { get; set; }

    /// <summary>
    /// Toaster for a positive move
    /// </summary>
    private Toast ToastMoveOK { get; set; }

    /// <summary>
    /// Toaster for a negative move
    /// </summary>
    private Toast ToastMoveKO { get; set; }

    /// <summary>
    /// List of current Attach source Attachments
    /// </summary>
    private ObservableCollection<OriginalAttachments> SourceAttach { get; set; } = new();

    /// <summary>
    /// List of available users for the current attachment email
    /// </summary>
    private ObservableCollection<ISoggetti> CostumerToAssing { get; set; } = new();

    /// <summary>
    /// Current Document as memory stream
    /// </summary>
    public MemoryStream Document => Viewer?.Doc?.Payload ?? new();

    /// <summary>
    /// Show/Hide the dialog for the current selection
    /// </summary>
    private bool ShowCostumerSelection { get; set; } = false;

    /// <summary>
    ///  Source from witch read the PDF (Attachments or items)
    /// </summary>
    public e_SourceType PDFSourceType { get; set; }

    /// <summary>
    /// Id of the PDF Source
    /// </summary>
    public string PDFSourceId { get; set; }

    /// <summary>
    /// Depending of type, shows a different title
    /// </summary>
    public string Title => (DocType == TipiDocumentiFile.ZIP) ? "File in arrivo" : "Richieste in arrivo";

    /// <summary>
    /// Last document type selected
    /// </summary>
    private string nLastDocType { get; set; } = "";

    /// <summary>
    /// Description of the costumer accordion
    /// </summary>
    private string CostumerDesc { get; set; } = "Cliente da selezionare";

    /// <summary>
    /// Description of the dossier accordion
    /// </summary>
    private string DossierDesc { get; set; } = "Fascicolo da selezionare";

    /// <summary>
    /// Indicateds if costumer block has to be expanded
    /// </summary>
    private bool IsCustomerExpand { get; set; } = true;

    /// <summary>
    /// Re-calculate type, if changed
    /// </summary>
    protected async override void OnParametersSet()
    {
        if (nDocType == "REQ")
            DocType = TipiDocumentiFile.REQ;
        else DocType = TipiDocumentiFile.ZIP;

        AttachID = "";
        DossierID = "";

        CustomerCode = "";
    }



    /// <summary>
    /// On selection of the email,shows and hide panels properly
    /// </summary>
    /// <param name="e"></param>
    public async void OnSelectAttach(Allegati e)
    {
        try
        {
            if (e == null)
            {
                _Logger.LogDebug($"Inbox[FILE].OnSelectAttach: DeSelecting attach");              

                AttachID = "";
                DossierID = "";
                CustomerCode = "";
                PDFSourceId = "";
                CustomerName = "";
                PDFSourceType = e_SourceType.Attachment;
                return;
            }
            _Logger.LogDebug($"Inbox[FILE].OnSelectAttach: Selecting attach {e.Id}");
            Attach = e;
            PDFSourceId = e.Id.ToString();
            PDFSourceType = e_SourceType.Attachment;

            if (AttachID != e.Id.ToString())
                AttachID = e.Id.ToString();

            if (DossierID != e.IdFascicolo.ToString())
                DossierID = e.IdFascicolo.ToString();

            if (CustomerCode != e.Chiave3)
            {
                CustomerCode = e.Chiave3;
                CustomerName = Attach.jAttributi["NomeSoggetto"].ToString();
            }

            ApplyCustomer();

            OnAbort();

        }
        catch (Exception ex)
        {
            _Logger.LogError($"Inbox[FILE,{nDocType}].OnSelectAttach: Unexpected errro on selecting attach {ex}");
        }
    }


    /// <summary>
    /// Set Description of the costumer
    /// </summary>
    public void ApplyCustomer()
    {
        if (string.IsNullOrEmpty(Attach.Chiave3))
            CostumerDesc = $"Cliente da selezionare";
        else if (!string.IsNullOrEmpty(CustomerCode))
            CostumerDesc = $"{CustomerCode} - {CustomerName?? ""}";       
        else if (string.IsNullOrEmpty(CustomerCode) && string.IsNullOrEmpty(CustomerName))
            CostumerDesc = $"Cliente con codice [{Attach.Chiave3}] non trovato";       
    }
    /// <summary>
    /// Once a document has been loaded, refresh the source attachment
    /// </summary>
    /// <param name="O"></param>
    public async void OnDocumentTransformedZ(List<OriginalAttachments> O)
    {
        if (PDFSourceType == e_SourceType.Attachment)
        {
            SourceAttach.Clear();
            foreach (OriginalAttachments o in O)
                SourceAttach.Add(o);

            IsAttachVisible = (SourceAttach.Count != 0);
            IsAttachExpanded = (SourceAttach.Count != 0 && (SourceAttach.Any(x => !string.IsNullOrEmpty(x.Warning)) || SourceAttach.Any(x => x.IsIncluded == false)));

        }
    }

    /// <summary>
    /// Change the mail box selected
    /// </summary>
    /// <param name="e"></param>
    public async void OnMailboxChanged(EmailServer e)
    {
        MailBox = e;
    }



    /// <summary>
    /// Activate move panel
    /// </summary>
    /// <param name="e"></param>
    public async void OnMove(Allegati e)
    {
        AttachSubject = e.Chiave4;
        IsLogsDialog = false;
        IsMoveDialog = !IsMoveDialog;
    }


    /// <summary>
    /// Activate logs panel
    /// </summary>
    /// <param name="e"></param>
    public async void OnShowLogs(Allegati e)
    {
        AttachSubject = e.Descrizione;
        IsMoveDialog = false;

        IsLogsDialog = !IsLogsDialog;
    }

    /// <summary>
    /// Ask deletion confirm
    /// </summary>
    /// <param name="e"></param>
    public async void OnDelete(Allegati e)
    {
        ShowConfirm = true;
    }

    /// <summary>
    /// Close dialog confirm
    /// </summary>
    public async void OnCloseDialog()
    {
        ShowConfirm = false;
    }

    /// <summary>
    /// Delete selected attachment
    /// </summary>
    public async void OnDeleteConfirmed()
    {
        try
        {
            Stopwatch sw = Stopwatch.StartNew();
            ShowConfirm = false;
            var User = _HttpContextAccessor.HttpContext.User;

            var all = _MailService._allMan.Get(Attach.Id.ToString());
            if (all != null)
            {
                all.Stato = StatoAllegato.Annullato;
                _MailService._allMan.Salva(all, false);
                _MailService._logMan.PostLog(all.Id, TipiOggetto.ALLEGATO, TipoOperazione.Cancellato, User.Identity.Name, $"Allegato [{all.Descrizione}] rimosso",new(){ {"1",all.Chiave1},{"2",all.Chiave2},{"3",all.Chiave3},{"4",all.Chiave4},{"5",all.Chiave5} });                  
                ToastOK.Show();
            }

            Grid.Refresh();
            _Logger.LogInformation($"Inbox[FILE,{nDocType}].OnDeleteConfirmed: File {Attach.Id} deleted in {sw.ElapsedMilliseconds} ms");
        }
        catch (Exception ex)
        {
            _Logger.LogError($"Inbox[FILE,{nDocType}].OnDeleteConfirmed: Unexpeted error deleting {Attach.Id}, {ex}");
            ToastKO.Show();
        }
    }

    /// <summary>
    /// Once Move has done, show the proper toast
    /// </summary>
    /// <param name="RA"></param>
    private async void OnDone(Models.RisultatoAzione RA)
    {
        if (RA.Successo)
            ToastMoveOK.Show();
        else ToastMoveKO.Show();
        Grid.Refresh();
        OnAbort();
    }


    /// <summary>
    /// Close all dialog panels
    /// </summary>
    private async void OnAbort()
    {
        IsMoveDialog = false; IsLogsDialog = false;
    }

    /// <summary>
    /// On linking item, refresh the grid and components
    /// </summary>
    /// <param name="data"></param>
    private async void OnLinkToItem((string DossierId, string ItemId) data)
    {
        DossierID = data.DossierId;
        ItemID = data.ItemId;
        Grid.Refresh();
    }

    /// <summary>
    /// Link the costumer to current Attach
    /// </summary>
    /// <param name="Customer">Costumer to link</param>
    public void OnLinkCostumer(REG_CustomerSearch.CustomerData Customer)
    {
        if (Customer.AttachId == Attach.Id.ToString())
        {
            CustomerCode = Customer.Customer?.Codice ?? "";
            CustomerName = Customer.Customer?.Nome ?? "";
            ApplyCustomer();
        }
    }

    /// <summary>
    /// On Dossier loaded, set the descrition on the accordion
    /// </summary>
    /// <param name="Dossier">Fossier currently opened</param>
    public void OnRefreshDossier(Fascicoli Dossier)
    {
        DossierDesc = (Dossier == null) ? "Fascicolo da selezionare" : $"Fascicolo: {Dossier?.Descrizione} [{Dossier?.Id}]";
    }

    /// <summary>
    /// On getting open items , fires out the number of items detected
    /// </summary>
    /// <param name="Items"></param>
    public void OnOpenItems(int Items)
    {
        if (Items == 0 && !string.IsNullOrEmpty(Attach?.Chiave3 ?? ""))
            IsCustomerExpand = false;
        else
            IsCustomerExpand = true;
    }

    /// <summary>
    /// On completed attach, i refresh the grid
    /// </summary>
    /// <param name="AttachId"></param>
    public async void OnAttachCompleted(string AttachId)
    {
        Grid.Refresh();
        Grid.ClearSelectionAsync(); 
    }

    /// <summary>
    /// On selected Item, Reload the PDF from the item
    /// </summary>
    /// <param name="Id">Id of the item to load on PDF preview</param>
    public void OnSelectedItem(string Id)
    {
        PDFSourceId = Id;
        PDFSourceType = e_SourceType.Item;
    }


}
