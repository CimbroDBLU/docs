@*
    Page that manage the processed emails and its interactions
*@

@page "/Files/{nDocType}/Processed"
@page "/Files/{nDocType}/Processed/{nPreselAttach}"

@using dblu.Docs.Models
@using dblu.Docs.Classi
@using dblu.Portale.Plugin.Docs.Services
@using dblu.Portale.Plugin.Docs.Pages.Docs.Shared
@using dblu.Portale.Plugin.Docs.Pages.Files.Shared
@using dblu.Portale.Plugin.Docs.Classes
@using Microsoft.AspNetCore.Http
@using System.IO;
@inject dblu.Portale.Plugin.Docs.Services.ZipService _ZipService
@inject IHttpContextAccessor _HttpContextAccessor
@inject ILogger<Processed> _Logger

<PageTitle nTitle=@Title />

<section class="content">

    <SfSpinner @bind-Visible="IsSpinnerVisible">
    </SfSpinner>

    <SfCard>
        <CardHeader Title=@Title />
        <CardContent EnableSeperator="true">
            <div class="row form-group">
                <div class="col-5" style="align-self: auto;">
                    <div class="row form-group">
                        <div class="col">
                            <ServerCombo nLabel="Cartella" nRecordServer="TipiRecordServer.CartellaFile" nDocumentType="@DocType" @bind-nServer="@MailBox"></ServerCombo>
                        </div>
                    </div>
                    <div class="row ">
                        <div class="col">
                            <FileTable @ref="@Grid" nType="FileTable.TableType.Processed" nDocumentType="@DocType" nFolder="@MailBox" OnReOpenAttachment="ReOpen" OnSelectAttachment="OnSelectAttach" OnShowLogsAttachment="OnShowLogs" OnDeleteAttachment="OnDelete" nPreselAttach="@nPreselAttach"></FileTable>
                        </div>
                    </div>

                </div>

                <div class="col-7" style="align-self: auto;">
                    @if (IsLogsDialog)
                    {
                        <div class="row form-group">
                            <div class="col">
                                <SfAccordion>
                                    <AccordionItems>
                                        <AccordionItem Expanded="true">
                                            <HeaderTemplate>
                                                <div>Operazioni sul file <b>@AttachSubject</b></div>
                                            </HeaderTemplate>
                                            <ContentTemplate>
                                                <AttachLogs nAttach="@Attach" OnAbort="OnAbort"></AttachLogs>
                                            </ContentTemplate>
                                        </AccordionItem>
                                    </AccordionItems>
                                </SfAccordion>
                            </div>
                        </div>
                    }
                    else
                    {
                        @*CLIENTE*@
                        <div class="row form-group">
                            <div class="col">
                                <SfAccordion>
                                    <AccordionItems>
                                        <AccordionItem Expanded="true">
                                            <HeaderTemplate>
                                                <div>@CostumerDesc</div>
                                            </HeaderTemplate>
                                            <ContentTemplate>
                                                <AttachCustomer @ref="CustomerComponent"  nAttachments="@SourceAttach" nReadOnly="true" nCostumerCode="@CustomerCode" nAttachID="@AttachID"></AttachCustomer>
                                            </ContentTemplate>
                                        </AccordionItem>
                                    </AccordionItems>
                                </SfAccordion>
                            </div>
                        </div>
                        @*EMAIL PREVIEW*@
                        <div class="row form-group">
                            <div class="col">
                                <SfAccordion>
                                    <AccordionItems>
                                        <AccordionItem Expanded="true">
                                            <HeaderTemplate>
                                                <div>Testo allegato al file</div>
                                            </HeaderTemplate>
                                            <ContentTemplate>
                                                <SfTextBox HtmlAttributes="@(new Dictionary<string, object>(){{ "style", $"width:100%; height:300px "}})" Multiline="true" Value="@Attach?.Descrizione"></SfTextBox>
                                            </ContentTemplate>
                                        </AccordionItem>
                                    </AccordionItems>
                                </SfAccordion>
                            </div>
                        </div>

                        @*ALLEGATI EMAIL*@
                        @if (@IsAttachVisible)
                        {
                            <div class="row form-group">
                                <div class="col">
                                    <SfAccordion>
                                        <AccordionItems>
                                            <AccordionItem Expanded="true">
                                                <HeaderTemplate>
                                                    <div>Allegati in Email</div>
                                                </HeaderTemplate>
                                                <ContentTemplate>
                                                    <OriginalAttachsTable nAttachID="@AttachID" nAttachments="@SourceAttach" nRecordServer="TipiRecordServer.CartellaFile"></OriginalAttachsTable>
                                                </ContentTemplate>
                                            </AccordionItem>
                                        </AccordionItems>
                                    </SfAccordion>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </CardContent>
    </SfCard>

    <QuestionDialog nTitle="Conferma"
                    nText="Rimuovo l'email anche dalla casella di posta ?"
                    nYes="Da entrambi"
                    nNo="Solo dall'archivio"
                    OnExitPressed="OnCloseDialog"
                    OnNoPressed="()=>OnDeleteConfirmed(false)"
                    OnYesPressed="()=>OnDeleteConfirmed(true)"
                    OnClose="OnCloseDialog"
                    nShowDialog="@ShowConfirm">
    </QuestionDialog>

    <Toast @ref="ToastOK" nToastType="Toast.e_ToastType.OK" nTitle="Elimina email" nContent="Email eliminata correttamente"></Toast>
    <Toast @ref="ToastKO" nToastType="Toast.e_ToastType.Fail" nTitle="Elimina email" nContent="Eliminazione non riuscita"></Toast>


    <Toast @ref="ToastReOpenOK" nToastType="Toast.e_ToastType.OK" nTitle="Riapri file" nContent="File ri-aperta"></Toast>
    <Toast @ref="ToastReOpenKO" nToastType="Toast.e_ToastType.Fail" nTitle="Riapri file" nContent="Riapertura NON riuscita"></Toast>
</section>

@code
{
    /// <summary>
    /// Email that has to be selected, if any. We expect to receive the qattach id of the email selected
    /// </summary>
    [Parameter]
    public string nPreselAttach { get; set; } = "";

    /// <summary>
    /// Type of document we need to manage (ZIP,REQ...)
    /// </summary>
    [Parameter]
    public string nDocType { get; set; } = "ZIP";

    /// <summary>
    /// Type of document we need to manage as enum
    /// </summary>
    public TipiDocumentiFile DocType { get; set; }

    /// <summary>
    /// Reference to the Mail grid
    /// </summary>
    private FileTable Grid { get; set; }

    /// <summary>
    /// Indicates if the spinner has to be showed
    /// </summary>
    private bool IsSpinnerVisible { get; set; } = false;

    /// <summary>
    /// Indicates if HTML panel is visible
    /// </summary>
    private bool IsShowDialog { get; set; } = false;

    /// <summary>
    /// Indicates if Mail attachments panel is visible
    /// </summary>
    private bool IsAttachVisible { get; set; } = false;

    /// <summary>
    /// Indicates if Answer panel is visible
    /// </summary>
    private bool IsAnswerDialog { get; set; } = false;

    /// <summary>
    /// Indicates if Forward panel is visible
    /// </summary>
    private bool IsForwardDialog { get; set; } = false;

    /// <summary>
    /// Indicates if LOG panel is visible
    /// </summary>
    private bool IsLogsDialog { get; set; } = false;

    /// <summary>
    /// Attach ID
    /// </summary>
    public string AttachID { get; set; }

    /// <summary>
    /// Attachment Subject
    /// </summary>
    private string AttachSubject { get; set; }


    /// <summary>
    /// Costumer Code
    /// </summary>
    private string CustomerCode
    {
        get;
        set;
    }

    /// <summary>
    /// Show delete confirm
    /// </summary>
    private bool ShowConfirm { get; set; } = false;

    /// <summary>
    /// Item ID
    /// </summary>
    private string ItemID { get; set; }

    /// <summary>
    /// Dossier ID
    /// </summary>
    private string DossierID { get; set; }

    /// <summary>
    /// Current Mail box
    /// </summary>
    private EmailServer MailBox { get; set; }

    /// <summary>
    /// Current Attach
    /// </summary>
    private Allegati Attach { get; set; }

    /// <summary>
    /// Toaster for a positive deletion
    /// </summary>
    private Toast ToastOK { get; set; }

    /// <summary>
    /// Toaster for a negative deletion
    /// </summary>
    private Toast ToastKO { get; set; }

    /// <summary>
    /// Toaster for a positive forward
    /// </summary>
    private Toast ToastForwardOK { get; set; }

    /// <summary>
    /// Toaster for a negative forward
    /// </summary>
    private Toast ToastForwardKO { get; set; }

    /// <summary>
    /// Toaster for a positive forward
    /// </summary>
    private Toast ToastAnswerOK { get; set; }

    /// <summary>
    /// Toaster for a negative forward
    /// </summary>
    private Toast ToastAnswerKO { get; set; }

    /// <summary>
    /// Toaster for a positive re-opening
    /// </summary>
    private Toast ToastReOpenOK { get; set; }

    /// <summary>
    /// Toaster for a negative re-opening
    /// </summary>
    private Toast ToastReOpenKO { get; set; }

    /// <summary>
    /// List of current Attach source Attachments
    /// </summary>
    private ObservableCollection<OriginalAttachments> SourceAttach { get; set; } = new();

    /// <summary>
    /// Depending of type, shows a different title
    /// </summary>
    public string Title => (DocType == TipiDocumentiFile.ZIP) ? "File processati" : "Richieste processate";

    /// <summary>
    /// Reference to che Customer Component
    /// </summary>
    private AttachCustomer CustomerComponent { get; set; }

    /// <summary>
    /// Description to show on "Costumer" tab
    /// </summary>
    private string CostumerDesc => (CustomerComponent?.CurrentCostumer == null) ? "Cliente da selezionare" : $"{CustomerComponent?.CurrentCostumer?.Codice ?? ""} - {CustomerComponent?.CurrentCostumer?.Nome ?? ""}";


    /// <summary>
    ///  Re-calculate type, if changed
    /// </summary>
    protected async override void OnParametersSet()
    {
        if (nDocType == "REQ")
            DocType = TipiDocumentiFile.REQ;
        else DocType = TipiDocumentiFile.ZIP;
    }


    /// <summary>
    /// On selection of the email,shows and hide panels properly
    /// </summary>
    /// <param name="e"></param>
    public async void OnSelectAttach(Allegati e)
    {
        Attach = e;

        if (AttachID != e.Id.ToString())
            AttachID = e.Id.ToString();

        if (DossierID != e.IdFascicolo.ToString())
            DossierID = e.IdFascicolo.ToString();

        if (CustomerCode != e.Chiave3)
            CustomerCode = e.Chiave3;

        SourceAttach = new ObservableCollection<OriginalAttachments>(await _ZipService.GetIncludedFileAsync(Attach, null));
        if (SourceAttach != null && SourceAttach.Count != 0)
            IsAttachVisible = true;
        else IsAttachVisible = false;

        OnAbort();
    }


    /// <summary>
    /// Change the mail box selected
    /// </summary>
    /// <param name="e"></param>
    public async void OnMailboxChanged(EmailServer e)
    {
        MailBox = e;
    }



    /// <summary>
    /// Activate logs panel
    /// </summary>
    /// <param name="e"></param>
    public async void OnShowLogs(Allegati e)
    {
        AttachSubject = e.Descrizione;
        IsAnswerDialog = false;
        IsForwardDialog = false;

        IsLogsDialog = !IsLogsDialog;
    }

    /// <summary>
    /// Ask deletion confirm
    /// </summary>
    /// <param name="e"></param>
    public async void OnDelete(Allegati e)
    {
        ShowConfirm = true;
    }

    /// <summary>
    /// Close dialog confirm
    /// </summary>
    public async void OnCloseDialog()
    {
        ShowConfirm = false;
    }

    /// <summary>
    /// Delete selected attachment
    /// </summary>
    public async void OnDeleteConfirmed(bool nServer)
    {
        try
        {
            ShowConfirm = false;
            if (Attach != null)
            {
                Stopwatch sw = Stopwatch.StartNew();
                var User = _HttpContextAccessor.HttpContext.User;

                Models.RisultatoAzione res = await _ZipService.CancellaZip(Attach.Id.ToString(), User);
                _Logger.LogInformation($"Processed[FILE,{nDocType}].OnDeleteConfirmed: Mail {Attach.Id} deleted in {sw.ElapsedMilliseconds} ms");
                Grid.Refresh();
                ToastOK.Show();
            }
            else
            {
                ToastKO.Show();
            }
        }
        catch (Exception ex)
        {
            _Logger.LogError($"Processed[FILE,{nDocType}].OnDeleteConfirmed: Unexpeted error deleting {Attach.Id}, {ex}");
            ToastKO.Show();
        }
    }




    /// <summary>
    /// Close all dialog panels
    /// </summary>
    private async void OnAbort()
    {
        IsShowDialog = false; IsLogsDialog = false;
    }

    /// <summary>
    /// On completed attach, i refresh the grid
    /// </summary>
    /// <param name="AttachId"></param>
    public async void OnAttachCompleted(string AttachId)
    {
        Grid.Refresh();
        Grid.SelectedRow = 0;
    }



    /// <summary>
    /// Reopen an email
    /// </summary>
    /// <param name="Attach">Email to re-open</param>
    private void ReOpen(Allegati Attach)
    {
        if (Attach != null)
        {
            Models.RisultatoAzione R = _ZipService.RiapriZip(Attach.Id.ToString(), _HttpContextAccessor.HttpContext.User);
            if (R.Successo)
            {
                ToastReOpenOK.Show();
                Grid.Refresh();
            }
            else
                ToastReOpenKO.Show();
        }
    }
}
