@*
    Component for showing a table with all emails
*@

@using dblu.Docs.Models
@using dblu.Docs.Classi
@using dblu.Portale.Plugin.Docs.Services
@using dblu.Portale.Core.Infrastructure.Identity.Classes
@using dblu.Portale.Core.Infrastructure.Identity.Services
@using Microsoft.AspNetCore.Http
@using System.Security.Claims
@using Syncfusion.Blazor.Data  

@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject IHttpContextAccessor _HttpContextAccessor
@inject ILogger<MailTable> _Logger

<style>
    .e-answer:before {
        content: "\ebed"
    }

    .e-move:before {
        content: "\e60b"
    }

    .e-forward:before {
        content: "\ebfa"
    }

    .e-show:before {
        content: "\eb64"
    }
    .e-reopen:before {
        content: "\e818"
    }
    
    .e-logs:before {
        content: "\eb67"
    }

    .e-refresh:before {
        content: "\e218"
    }
</style>



<SfGrid @ref="@Grid" ID="@Id" EnablePersistence="true" AllowGrouping="false" TValue="AllegatoEmail"  AllowTextWrap="true" SelectedRowIndex="0" AllowPaging="true" AllowSorting="true" Toolbar="@Tool">
    <SfDataManager Url="@DataUrl" CrossDomain="true" Adaptor=" Syncfusion.Blazor.Adaptors.ODataV4Adaptor"></SfDataManager>
    <GridSelectionSettings PersistSelection="true" Type="Syncfusion.Blazor.Grids.SelectionType.Single" Mode="Syncfusion.Blazor.Grids.SelectionMode.Row"></GridSelectionSettings>
    <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
    <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="EditMode.Batch"></GridEditSettings>
    <GridPageSettings PageSize="10"></GridPageSettings>
    <GridEvents TValue="AllegatoEmail" OnDataBound="OnDataBoundHandler" DataBound="DataBoundHandler" OnToolbarClick="OnToolbarClick" RowSelected="RowSelected" RowDeselected="RowDeselected"></GridEvents>

    <GridColumns>
        <GridColumn IsPrimaryKey="true" Visible="false" Field=@nameof(AllegatoEmail.Id)></GridColumn>
        <GridColumn AllowEditing="false" AllowSorting="true" Field=@nameof(AllegatoEmail.Mittente) HeaderText="Email">
            <Template>
                @{
                    var Attach = (context as AllegatoEmail);
                    bool IsClient = !string.IsNullOrEmpty(Attach.Chiave3);
                    <div>
                        @if (IsClient)
                        {
                            <span>Cliente: @Attach.Chiave3</span>
                            <br />
                        }
                        <b>@Attach.Chiave4</b><br />
                        @Attach.Mittente
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn AllowEditing="false" AllowSorting="true" Field=@nameof(AllegatoEmail.Oggetto) HeaderText="Oggetto"></GridColumn>
        <GridColumn AllowEditing="false" Width="120px" AllowSorting="true" Field=@nameof(AllegatoEmail.Data) HeaderText="Data" Format="d" Type="ColumnType.Date"></GridColumn>
        <GridColumn AllowEditing="false" Width="40px" AllowSorting="true" Field=@nameof(AllegatoEmail.LastOp) HeaderText="LastOp">
            <Template>
                <dblu.Portale.Plugin.Docs.Pages.Docs.Shared.LastOperation nOperation="@((context as AllegatoEmail).LastOp)"></dblu.Portale.Plugin.Docs.Pages.Docs.Shared.LastOperation>
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>


@code {

    /// <summary>
    /// Url to use to retreive paginated data
    /// </summary>
    private string DataUrl=> $"/ODATA/Mails(Type='{nType.ToString()}',MailBox='{nMailBox.Nome}')";

    /// <summary>
    ///Type of mail that we need to show
    /// </summary>
    public enum TableType
    {
        /// <summary>
        /// Inbox emails
        /// </summary>
        Inbox,
        /// <summary>
        /// Processed emails
        /// </summary>
        Processed,
        /// <summary>
        /// Sent emails
        /// </summary>
        Sent,
        /// <summary>
        /// Sorting of emails
        /// </summary>
        Sorting
    };

    /// <summary>
    /// Id of the table
    /// </summary>
    public string Id => "MailTable" + nType.ToString();

    /// <summary>
    /// Mailbox that we are browsing
    /// </summary>
    [Parameter]
    public EmailServer nMailBox { get; set; }

    /// <summary>
    /// Type of maitable we are browsing
    /// </summary>
    [Parameter]
    public TableType nType { get; set; } = TableType.Inbox;

    /// <summary>
    /// Attachment we have to select if any (useful for go back)
    /// </summary>
    [Parameter]
    public string nPreselAttach { get; set; } = "";

    /// <summary>
    /// Fires when an attach is selected
    /// </summary>
    [Parameter]
    public EventCallback<AllegatoEmail> OnSelectAttachment { get; set; }

    /// <summary>
    /// Fires when user request to reply
    /// </summary>
    [Parameter]
    public EventCallback<AllegatoEmail> OnReplyAttachment { get; set; }

    /// <summary>
    /// Fires when user request to forward
    /// </summary>
    [Parameter]
    public EventCallback<AllegatoEmail> OnForwardAttachment { get; set; }

    /// <summary>
    /// Fires when user request to move an item
    /// </summary>
    [Parameter]
    public EventCallback<AllegatoEmail> OnMoveAttachment { get; set; }

    /// <summary>
    /// Fires when user request to see source of an email
    /// </summary>
    [Parameter]
    public EventCallback<AllegatoEmail> OnShowAttachment { get; set; }

    /// <summary>
    /// Fires when user request to see operative logs
    /// </summary>
    [Parameter]
    public EventCallback<AllegatoEmail> OnShowLogsAttachment { get; set; }

    /// <summary>
    /// Fires when user request to delete an email
    /// </summary>
    [Parameter]
    public EventCallback<AllegatoEmail> OnDeleteAttachment { get; set; }

    /// <summary>
    /// Fires when user request to re-opem an email
    /// </summary>
    [Parameter]
    public EventCallback<AllegatoEmail> OnReOpenAttachment { get; set; }

    /// <summary>
    /// Reference to the grid
    /// </summary>
    private SfGrid<AllegatoEmail> Grid { get; set; }

    /// <summary>
    /// Previous selected Mailbox
    /// </summary>
    public EmailServer nMailBoxOld { get; set; }

    /// <summary>
    /// List of attachment to show
    /// </summary>
    private ObservableCollection<AllegatoEmail> nEmails { get; set; } = new();

    /// <summary>
    /// Get/set the current selected row
    /// </summary>
    public double SelectedRow { get => Grid.SelectedRowIndex; set { Grid.SelectRowAsync(value); } }

    /// <summary>
    ///  Tollbar definition
    /// </summary>
    private List<Object> Tool
    {
        get
        {
            if(nType== TableType.Inbox)
                return new List<Object>()
                {
                new ItemModel() { Id = "Answer",Text = "", TooltipText = "Rispondi", PrefixIcon = "e-answer" },
                new ItemModel() { Id = "Forward",Text = "", TooltipText = "Inoltra", PrefixIcon = "e-forward" } ,
                new ItemModel() { Id = "Refresh",Text = "", TooltipText = "Aggiorna", PrefixIcon = "e-refresh" } ,
                new ItemModel() { Id = "Move",Text = "", TooltipText = "Sposta", PrefixIcon = "e-move" } ,
                new ItemModel() { Id = "Delete",Text = "", TooltipText = "Cancella", PrefixIcon = "e-delete" } ,
                new ItemModel() { Id = "ShowHTML",Text = "", TooltipText = "Mostra", PrefixIcon = "e-show" },
                new ItemModel() { Id = "Log",Text = "", TooltipText = "Visualizza logs", PrefixIcon = "e-logs" },
                new string ("Search")
                };
            if (nType == TableType.Processed)
                return new List<Object>()
                {
                new ItemModel() { Id = "Answer",Text = "", TooltipText = "Rispondi", PrefixIcon = "e-answer" },
                new ItemModel() { Id = "Forward",Text = "", TooltipText = "Inoltra", PrefixIcon = "e-forward" } ,
                new ItemModel() { Id = "Refresh",Text = "", TooltipText = "Aggiorna", PrefixIcon = "e-refresh" } ,
                new ItemModel() { Id = "ReOpen",Text = "", TooltipText = "Riapri", PrefixIcon = "e-reopen" } ,
                new ItemModel() { Id = "Delete",Text = "", TooltipText = "Cancella", PrefixIcon = "e-delete" } ,
                new ItemModel() { Id = "Log",Text = "", TooltipText = "Visualizza logs", PrefixIcon = "e-logs" },
                new string ("Search")
                };
            if (nType == TableType.Sent)
                return new List<Object>()
                {
                new ItemModel() { Id = "Forward",Text = "", TooltipText = "Inoltra", PrefixIcon = "e-forward" } ,
                new ItemModel() { Id = "Refresh",Text = "", TooltipText = "Aggiorna", PrefixIcon = "e-refresh" } ,
                new ItemModel() { Id = "Delete",Text = "", TooltipText = "Cancella", PrefixIcon = "e-delete" } ,
                new ItemModel() { Id = "Log",Text = "", TooltipText = "Visualizza logs", PrefixIcon = "e-logs" },
                new string ("Search")
                };
            if (nType == TableType.Sorting)
                return new List<Object>()
                {
                new ItemModel() { Id = "Answer",Text = "", TooltipText = "Rispondi", PrefixIcon = "e-answer" },
                new ItemModel() { Id = "Forward",Text = "", TooltipText = "Inoltra", PrefixIcon = "e-forward" } ,
                new ItemModel() { Id = "Refresh",Text = "", TooltipText = "Aggiorna", PrefixIcon = "e-refresh" } ,
                new ItemModel() { Id = "Move",Text = "", TooltipText = "Sposta", PrefixIcon = "e-move" } ,
                new ItemModel() { Id = "Delete",Text = "", TooltipText = "Cancella", PrefixIcon = "e-delete" } ,
                new ItemModel() { Id = "Log",Text = "", TooltipText = "Visualizza logs", PrefixIcon = "e-logs" },
                new string ("Search")
                };
            return new List<Object>();
        }
    }

    /// <summary>
    /// On Init component
    /// </summary>
    protected override async void OnParametersSet()
    {
        if (nMailBox is not null)
        {
            if (nMailBoxOld != nMailBox)
            {
                Refresh();
            }
        }
        else nEmails = new();
    }

    /// <summary>
    /// On record select forward the selection
    /// </summary>
    /// <param name="args"></param>
    public void RowSelected(RowSelectEventArgs<AllegatoEmail> args)
    {
        OnSelectAttachment.InvokeAsync(args.Data);
    }

    /// <summary>
    /// On record select forward the selection
    /// </summary>
    /// <param name="args"></param>
    public async void RowDeselected(RowDeselectEventArgs<AllegatoEmail> args)
    {
        if((await Grid.GetSelectedRecordsAsync()).Count==0)
            await OnSelectAttachment.InvokeAsync(null);
    }

    /// <summary>
    /// Forward the events on toolbar button press
    /// </summary>
    /// <param name="args"></param>
    public async void OnToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        AllegatoEmail Attach = (await Grid.GetSelectedRecords()).FirstOrDefault();

        if (Attach == null) return;

        if (args.Item.Id == "Answer")
            await OnReplyAttachment.InvokeAsync(Attach);
        else if (args.Item.Id == "Forward")
            await OnForwardAttachment.InvokeAsync(Attach);
        else if (args.Item.Id == "Refresh")
            Refresh();
        else if (args.Item.Id == "Move")
            await OnMoveAttachment.InvokeAsync(Attach);
        else if (args.Item.Id == "ShowHTML")
            await OnShowAttachment.InvokeAsync(Attach);
        else if (args.Item.Id == "Log")
            await OnShowLogsAttachment.InvokeAsync(Attach);
        else if (args.Item.Id == "Delete")
            await OnDeleteAttachment.InvokeAsync(Attach);
        else if (args.Item.Id == "ReOpen")
            await OnReOpenAttachment.InvokeAsync(Attach);
    }

    /// <summary>
    /// Reload the list fo the email
    /// </summary>
    public async void Refresh()
    {
        nMailBoxOld = nMailBox;
        Grid.DataManager.Url = DataUrl;
        Grid.Refresh();
        await this.Grid.SelectRow(0);
    }

    /// <summary>
    /// On reloading list of email, the presel attach will be selected
    /// </summary>
    /// <param name="args"></param>
    public async void OnDataBoundHandler(BeforeDataBoundArgs<AllegatoEmail> args)
    {
        if (!string.IsNullOrEmpty(nPreselAttach))
        {
            await Task.Delay(200);
            var PrimayIndex = await this.Grid.GetRowIndexByPrimaryKey(Guid.Parse(nPreselAttach));
            await this.Grid.SelectRow(PrimayIndex);
        }
    }

    /// <summary>
    /// On databound check id there is content, to send selection properly
    /// </summary>
    public async void DataBoundHandler()
    {
        if (Grid.CurrentViewData.Count()==0)
            await OnSelectAttachment.InvokeAsync(null);

        else if ((await Grid.GetSelectedRecordsAsync()).Count != 0)
            await OnSelectAttachment.InvokeAsync((await Grid.GetSelectedRecordsAsync()).FirstOrDefault());
    }
}
