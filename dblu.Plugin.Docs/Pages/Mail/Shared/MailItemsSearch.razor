@using dblu.Docs.Models
@using dblu.Docs.Classi
@using Microsoft.AspNetCore.Components.CompilerServices
@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject dblu.Docs.Interfacce.ISoggettiService _SubjectService
@inject AuthenticationStateProvider _AuthenticationStateProvider



<div class="row">
    <div class="col" style="display:flex">
        <SfTextBox Placeholder="Dossier" Value="@(Dossier?.Descrizione ?? "")"></SfTextBox>
        @if (nDisplayComplete)
        {
            <SfButton CssClass="ml-2" Content="Completa" IsPrimary="true" OnClick="Complete"></SfButton>
        }
    </div>
    @*<div class="col-6">
        <SfButton Content="Cerca" OnClick="OnSearch"></SfButton>
    </div>*@
</div>
@if (IsShowDialog)
{
    <DynamicComponent nType="@DynamicContent" nAttributes="@DynamicAttributes"></DynamicComponent>
}

@code {

    [Parameter]
    public string nCostumerCode { get; set; }

    [Parameter]
    public string nAttachID { get; set; }

    [Parameter]
    public string nDossierID { get; set; }

    [Parameter]
    public EventCallback<(string, string)> OnLinkedToItem { get; set; }

    [Parameter]
    public EventCallback<string> OnAttachCompleted { get; set; }

    [Parameter]
    public bool nDisplayComplete { get; set; } = false;

    private Fascicoli Dossier { get; set; }

    private string LastDossierID { get; set; }

    private bool IsShowDialog { get; set; } = false;

    private Type DynamicContent { get; set; } = null;

    private ObservableCollection<dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute> DynamicAttributes = new();

    protected override async void OnParametersSet()
    {
        if (LastDossierID != nDossierID && !string.IsNullOrEmpty(nDossierID))
        {
            Dossier = _MailService._fasMan.Get(nDossierID);
            LastDossierID = nDossierID;
        }
    }
    //public void UndefinedComponent(string nComponent)
    //{
    //    IsShowDialog = true;
    //    DynamicAttributes.Clear();
    //    string component = "dblu.Portale.Plugin.Docs.Pages.Custom.UndefinedComponentPopUp";
    //    DynamicContent = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetTypes().FirstOrDefault(y => y.FullName == component) != null)?.GetType(component);


    //    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
    //    {
    //        Name = "nComponentName",
    //        Position = 1,
    //        Value = nComponent
    //    });

    //    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
    //    {
    //        Name = "IsShowDialog",
    //        Position = 1,
    //        Value = RuntimeHelpers.TypeCheck<bool>(IsShowDialog)
    //    });

    //    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
    //    {
    //        Name = "IsShowDialogChanged",
    //        Position = 2,
    //        Value = RuntimeHelpers.TypeCheck<EventCallback<bool>>(
    //        EventCallback.Factory.Create<bool>(this,
    //            RuntimeHelpers.CreateInferredEventCallback(this, __value => IsShowDialog = __value, IsShowDialog)))
    //    });
    //}


    //public async void OnSearch()
    //{
    //    string component = _SubjectService.UrlServizioRicercaElementi();
    //    DynamicAttributes.Clear();

    //    IsShowDialog = true;

    //    DynamicContent = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetTypes().FirstOrDefault(y => y.FullName == component) != null)?.GetType(component);

    //    if (!component.StartsWith("dblu.Portale") || DynamicContent == null)
    //    {
    //        UndefinedComponent(component);
    //        return;
    //    }


    //    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
    //    {
    //        Name = "nAttachID",
    //        Position = 1,
    //        Value = nAttachID
    //    });

    //    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
    //    {
    //        Name = "nCostumerCode",
    //        Position = 2,
    //        Value = nCostumerCode
    //    });

    //    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
    //    {
    //        Name = "IsShowDialog",
    //        Position = 3,
    //        Value = RuntimeHelpers.TypeCheck<bool>(IsShowDialog)
    //    });

    //    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
    //    {
    //        Name = "IsShowDialogChanged",
    //        Position = 4,
    //        Value = RuntimeHelpers.TypeCheck<EventCallback<bool>>(
    //        EventCallback.Factory.Create<bool>(this,
    //            RuntimeHelpers.CreateInferredEventCallback(this, __value => IsShowDialog = __value, IsShowDialog)))
    //    });

    //    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
    //    {
    //        Name = "OnLinkedToItem",
    //        Position = 5,
    //        Value = EventCallback.Factory.Create<(string, string)>(this, OnLinkedToItem)
    //    });
    //}

    public async void Complete()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var User = authState.User;

        var all = _MailService._allMan.Get(nAttachID);
        if (all != null)
        {
            all.Stato = StatoAllegato.Chiuso;
            _MailService._allMan.Salva(all, false);

            LogDoc log = new LogDoc()
            {
                Data = DateTime.Now,
                IdOggetto = Guid.Parse(nAttachID),
                TipoOggetto = TipiOggetto.ALLEGATO,
                Utente = User.Identity.Name,
                Operazione = TipoOperazione.Chiuso
            };
            _MailService._logMan.Salva(log, true);

            OnAttachCompleted.InvokeAsync(nAttachID);
        }



    }
}
