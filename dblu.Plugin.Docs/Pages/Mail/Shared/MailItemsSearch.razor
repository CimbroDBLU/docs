@*
    Component for showing the name of the dossier e the complete button (if available)
*@

@using dblu.Docs.Models
@using dblu.Docs.Classi
@using System.IO
@using Microsoft.AspNetCore.Components.CompilerServices
@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject dblu.Docs.Interfacce.ISoggettiService _SubjectService
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject ILogger<MailItemsSearch> _Logger


<Toast @ref="ToastCompleteOK" nToastType="Toast.e_ToastType.OK" nTitle="Completa email" nContent="Email completata"></Toast>
<Toast @ref="ToastCompleteKO" nToastType="Toast.e_ToastType.Fail" nTitle="Completa email" nContent="Completamento non riuscito"></Toast>

<div class="row">
    <div class="col" style="display:flex">
        <SfTextBox Placeholder="Dossier" Readonly="true" Value="@(Dossier?.Descrizione ?? "")"></SfTextBox>
        @if (nDisplayComplete)
        {
            <SfButton CssClass="ml-2" Content="Completa" IsPrimary="true" OnClick="Complete"></SfButton>
        }
    </div>
</div>

@code {

    /// <summary>
    /// Customer code
    /// </summary>
    [Parameter]
    public string nCostumerCode { get; set; }

    /// <summary>
    /// Attachment ID
    /// </summary>
    [Parameter]
    public string nAttachID { get; set; }

    /// <summary>
    /// Dossier Id
    /// </summary>
    [Parameter]
    public string nDossierID { get; set; }

    /// <summary>
    /// Current PDF docuement
    /// </summary>
    [Parameter]
    public MemoryStream nCurrentDocument { get; set; }

    ///// <summary>
    ///// Fires when a
    ///// </summary>
    //[Parameter]
    //public EventCallback<(string, string)> OnLinkedToItem { get; set; }

    /// <summary>
    /// Fires when the email has been completed
    /// </summary>
    [Parameter]
    public EventCallback<string> OnAttachCompleted { get; set; }

    /// <summary>
    /// Indicates if displaying the complete button or not
    /// </summary>
    [Parameter]
    public bool nDisplayComplete { get; set; } = false;

    /// <summary>
    /// Current Dossier
    /// </summary>
    private Fascicoli Dossier { get; set; }

    /// <summary>
    /// Previous dossier ID
    /// </summary>
    private string LastDossierID { get; set; }

    /// <summary>
    /// Toast for a positive Complete action
    /// </summary>
    private Toast ToastCompleteOK { get; set; }

    /// <summary>
    /// Toast for a negative Complete action
    /// </summary>
    private Toast ToastCompleteKO { get; set; }

    /// <summary>
    /// Redraw the component only if necessary
    /// </summary>
    protected override async void OnParametersSet()
    {
        if (LastDossierID != nDossierID && !string.IsNullOrEmpty(nDossierID))
        {
            Dossier = _MailService._fasMan.Get(nDossierID);
            LastDossierID = nDossierID;
        }
    }

    /// <summary>
    /// Complete the current email attach
    /// </summary>
    public async void Complete()
    {
        try
        {
            Stopwatch sw = Stopwatch.StartNew();
            var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
            var User = authState.User;

            var all = _MailService._allMan.Get(nAttachID);
            if (all != null)
            {
                all.Stato = StatoAllegato.Chiuso;
                _MailService._allMan.Salva(all, false);

                LogDoc log = new LogDoc()
                {
                    Data = DateTime.Now,
                    IdOggetto = Guid.Parse(nAttachID),
                    TipoOggetto = TipiOggetto.ALLEGATO,
                    Utente = User.Identity.Name,
                    Operazione = TipoOperazione.Chiuso
                };
                _MailService._logMan.Salva(log, true);
                ToastCompleteOK.Show();
                OnAttachCompleted.InvokeAsync(nAttachID);
                _Logger.LogInformation($"MailItemsSearch.Complete: Attach {nAttachID} has been completed in {sw.ElapsedMilliseconds} ms");
                return;
            }
            ToastCompleteKO.Show();
        }
        catch (Exception ex)
        {
            _Logger.LogError($"MailItemsSearch.Complete: Complete fails, {ex}");
            ToastCompleteKO.Show();
        }
    }
}
