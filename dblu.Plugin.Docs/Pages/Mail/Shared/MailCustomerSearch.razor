@using dblu.Docs.Interfacce
@using dblu.Portale.Plugin.Docs.ViewModels
@using Microsoft.AspNetCore.Components.CompilerServices
@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject dblu.Docs.Interfacce.ISoggettiService _SubjectService
@inject NavigationManager _NavigatorManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject ILogger<MailCustomerSearch> _Logger

<div class="row">
    <div class="col-2">
        <SfTextBox Placeholder="Codice Cliente" @bind-Value="@nCostumerCode"></SfTextBox>
    </div>
    <div class="col-4">
        <SfTextBox Readonly="true" Placeholder="Cliente" Value="@Description"></SfTextBox>
    </div>
    <div class="col-6">
        <SfButton Content="Cerca" OnClick="OnSearch"></SfButton>
        <SfButton Content="Associa" OnClick="OnLink"></SfButton>
    </div>

</div>

@if (IsShowDialog)
{
    <DynamicComponent nType="@DynamicContent" nAttributes="@DynamicAttributes"></DynamicComponent>
}

@code {

    [Parameter]
    public string nCostumerCode { get; set; }

    [Parameter]
    public string nAttachID { get; set; }

    [Parameter]
    public EventCallback<(string, string)> OnLinkedToItem { get; set; }

    public string LastCostumerCode { get; set; }

    public string Description { get; set; }

    private bool IsShowDialog { get; set; } = false;

    private Type DynamicContent { get; set; } = null;

    private ObservableCollection<dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute> DynamicAttributes = new();

    public void OnSelectedCustomer(ISoggetti args)
    {
        nCostumerCode = args.Codice; OnParametersSet();
    }

    protected override async void OnParametersSet()
    {

        if (LastCostumerCode != nCostumerCode && !string.IsNullOrEmpty(nCostumerCode))
            Description = _MailService._soggetti.GetSoggetto(nCostumerCode)?.Nome ?? "";
        else if (string.IsNullOrEmpty(nCostumerCode))
            Description = "";
        LastCostumerCode = nCostumerCode;
    }


    public void UndefinedComponent(string nComponent)
    {
        IsShowDialog = true;
        DynamicAttributes.Clear();
        string component = "dblu.Portale.Plugin.Docs.Pages.Custom.UndefinedComponentPopUp";
        DynamicContent = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetTypes().FirstOrDefault(y => y.FullName == component) != null)?.GetType(component);


        DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
        {
            Name = "nComponentName",
            Position = 1,
            Value = nComponent
        });

        DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
        {
            Name = "IsShowDialog",
            Position = 1,
            Value = RuntimeHelpers.TypeCheck<bool>(IsShowDialog)
        });

        DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
        {
            Name = "IsShowDialogChanged",
            Position = 2,
            Value = RuntimeHelpers.TypeCheck<EventCallback<bool>>(
            EventCallback.Factory.Create<bool>(this,
                RuntimeHelpers.CreateInferredEventCallback(this, __value => IsShowDialog = __value, IsShowDialog)))
        });
    }


    public async void OnSearch()
    {
        string component = _SubjectService.UrlServizio();
        DynamicAttributes.Clear();

        IsShowDialog = true;

        DynamicContent = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetTypes().FirstOrDefault(y => y.FullName == component) != null)?.GetType(component);

        if (!component.StartsWith("dblu.Portale") || DynamicContent == null)
        {
            UndefinedComponent(component);
            return;
        }

        DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
        {
            Name = "nAttachID",
            Position = 1,
            Value = nAttachID
        });

        DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
        {
            Name = "nCostumerCode",
            Position = 2,
            Value = nCostumerCode
        });

        DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
        {
            Name = "IsShowDialog",
            Position = 3,
            Value = RuntimeHelpers.TypeCheck<bool>(IsShowDialog)
        });

        DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
        {
            Name = "IsShowDialogChanged",
            Position = 4,
            Value = RuntimeHelpers.TypeCheck<EventCallback<bool>>(
            EventCallback.Factory.Create<bool>(this,
                RuntimeHelpers.CreateInferredEventCallback(this, __value => IsShowDialog = __value, IsShowDialog)))
        });

        DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
        {
            Name = "OnSelectedCustomer",
            Position = 5,
            Value = EventCallback.Factory.Create<ISoggetti>(this, OnSelectedCustomer)
        });

    }

    public async void OnLink()
    {
        string component = _SubjectService.UrlServizioRicercaElementi();
        DynamicAttributes.Clear();

        IsShowDialog = true;

        DynamicContent = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetTypes().FirstOrDefault(y => y.FullName == component) != null)?.GetType(component);

        if (!component.StartsWith("dblu.Portale") || DynamicContent == null)
        {
            UndefinedComponent(component);
            return;
        }


        DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
        {
            Name = "nAttachID",
            Position = 1,
            Value = nAttachID
        });

        DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
        {
            Name = "nCostumerCode",
            Position = 2,
            Value = nCostumerCode
        });

        DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
        {
            Name = "IsShowDialog",
            Position = 3,
            Value = RuntimeHelpers.TypeCheck<bool>(IsShowDialog)
        });

        DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
        {
            Name = "IsShowDialogChanged",
            Position = 4,
            Value = RuntimeHelpers.TypeCheck<EventCallback<bool>>(
            EventCallback.Factory.Create<bool>(this,
                RuntimeHelpers.CreateInferredEventCallback(this, __value => IsShowDialog = __value, IsShowDialog)))
        });

        DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
        {
            Name = "OnLinkedToItem",
            Position = 5,
            Value = EventCallback.Factory.Create<(string, string)>(this, OnLinkedToItem)
        });


    }
}
