@*
    Component for showing a table of Item currently open for this customer
*@

@using dblu.Docs.Interfacce
@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService

@if (nItems.Count != 0)
{
<div>
    <SfSpinner @bind-Visible="IsSpinnerVisible">
    </SfSpinner>
    <SfGrid SelectedRowIndex="0" DataSource="@nItems" AllowTextWrap="false" AllowPaging="true">
        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="EditMode.Batch"></GridEditSettings>
        <GridPageSettings PageSize="3"></GridPageSettings>
        <GridColumns>
            <GridColumn Field=@nameof(ISoggettoElementiAperti.Numero) IsPrimaryKey="true" HeaderText="Numero"></GridColumn>
            <GridColumn Field=@nameof(ISoggettoElementiAperti.Riferimento) HeaderText="Riferimento"></GridColumn>
            <GridColumn Field=@nameof(ISoggettoElementiAperti.DataConsegna) Format="d" HeaderText="Consegna"></GridColumn>
            <GridColumn Field=@nameof(ISoggettoElementiAperti.Stato) HeaderText="Stato"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>
}

@code {
    /// <summary>
    /// Costumer code
    /// </summary>
    [Parameter]
    public string nCustomerCode { get; set; }

    public bool IsSpinnerVisible { get; set; } = false;

    /// <summary>
    /// List of Open items
    /// </summary>
    public ObservableCollection<ISoggettoElementiAperti> nItems { get; set; } = new();

    /// <summary>
    /// On Init component, load the list of open items
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(nCustomerCode)) { nItems = new(); return; }

        IsSpinnerVisible = true;
        await Task.Run(async() =>
        {
            nItems = new ObservableCollection<ISoggettoElementiAperti>((await _MailService._soggetti.GetElementiAperti(nCustomerCode)).OrderByDescending(x => x.DataConsegna));
        });
        IsSpinnerVisible = false;

    }

}
