@*
    Component for forwarding/answering the current attachment
*@

@using dblu.Docs.Models
@using Microsoft.AspNetCore.Http;
@using dblu.Portale.Core.Infrastructure.Identity.Services;
@using dblu.Portale.Core.Infrastructure.Identity.Classes
@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject IApplicationUsersManager _ApplicationUsersManager
@inject IHttpContextAccessor _HttpContextAccessor
@inject ILogger<MailForwardAnswer> _Logger

<SfSpinner @bind-Visible="IsSpinnerVisible">
</SfSpinner>

<div class="row form-group"> 
    <div class="col-2">
        <label>A:</label>
    </div>
    <div class="col-10">
        <SfAutoComplete TValue="string" TItem="ApplicationUser" Placeholder="Destinatario" DataSource="@Mails" @bind-Value="@To">
            <AutoCompleteTemplates TItem="ApplicationUser">
                <ItemTemplate>
                    @{
                        var User = context as ApplicationUser;
                        @($"{User.Name} {User.LastName} [{User.Email}]")
                    }
                </ItemTemplate>
            </AutoCompleteTemplates>
            <AutoCompleteFieldSettings Value="Email"></AutoCompleteFieldSettings>
        </SfAutoComplete>
    </div>
</div>
<div class="row form-group">
    <div class="col-2">
        <label>CC:</label>
    </div>
    <div class="col-10">
        <MultiSelectUserMails @bind-nEmails="@CC"></MultiSelectUserMails>
    </div>
</div>
<div class="row form-group">
    <div class="col-2">
        <label>Oggetto:</label>
    </div>
    <div class="col-10">
        <SfTextBox @bind-Value="Subject" Placeholder="Oggetto"></SfTextBox>
    </div>
</div>
<div class="row form-group">
    <div class="col-2">
        <label>Testo:</label>
    </div>
    <div class="col-10">
        <SfTextBox Multiline="true" @bind-Value="@Body" Placeholder="Testo"></SfTextBox>
    </div>
</div>
<div class="row form-group">
    @if (IsAnswerDialog){
    <div class="col-2">
        <label>Allega Originale</label>
    </div>
    <div class="col-2">
        <SfSwitch @bind-Checked="@IncludeSource"></SfSwitch>
    </div>
    }

    <div class="col-2">
        <label>Chiudi email</label>
    </div>
    <div class="col-2">
        <SfSwitch @bind-Checked="@CloseEmail"></SfSwitch>
    </div>
        <div class="col-2">
        <label>Includi Firma</label>
    </div>
    <div class="col-2">
        <SfSwitch @bind-Checked="@IncludeSign"></SfSwitch>
    </div>
</div>
<div class="row">
    <div class="col">
        <SfButton OnClick="OnSend" CssClass="e-primary">Invia</SfButton>
        <SfButton OnClick="OnGoBack">Indietro</SfButton>
    </div>
</div>

@code {
    /// <summary>
    /// Email witch we are replying
    /// </summary>
    [Parameter]
    public AllegatoEmail nAttach { get; set; }

    /// <summary>
    /// Email inbox
    /// </summary>
    [Parameter]
    public EmailServer nSourceServer { get; set; }

    /// <summary>
    /// determining variable
    /// </summary>
    [Parameter]
    public bool IsAnswerDialog { get; set; }

    /// <summary>
    /// Fires when replay has been sent
    /// </summary>
    [Parameter]
    public EventCallback<Models.RisultatoAzione> OnOperationDone { get; set; }

    /// <summary>
    /// Fires when user left the reply area
    /// </summary>
    [Parameter]
    public EventCallback OnAbort { get; set; }

    /// <summary>
    /// Receiver
    /// </summary>
    public string To { get; set; }

    /// <summary>
    /// Additional receivers
    /// </summary>
    public string[] CC { get; set; }

    /// <summary>
    /// Subject of the email
    /// </summary>
    public string Subject { get; set; }

    /// <summary>
    /// Body of the email
    /// </summary>
    public string Body { get; set; }

    /// <summary>
    /// Indicates if Sources has to be included
    /// </summary>
    public bool IncludeSource { get; set; } = true;
    /// <summary>
    /// List of all available emails
    /// </summary>
    private ObservableCollection<ApplicationUser> Mails { get; set; }

    /// <summary>
    /// Close the mail
    /// </summary>
    public bool CloseEmail { get; set; } = false;

    /// <summary>
    /// Include/not the signature in the mail
    /// </summary>
    public bool IncludeSign { get; set; } = false;

    /// <summary>
    /// Show/Hide the spinner
    /// </summary>
    private bool IsSpinnerVisible { get; set; } = false;

    /// <summary>
    /// On initialize, init some objects
    /// </summary>
    protected override void OnInitialized()
    {
        Mails = new ObservableCollection<ApplicationUser>(_ApplicationUsersManager.GetUsers().Where(e => !string.IsNullOrEmpty(e.Email)));
    }

    /// <summary>
    /// On Parameter Set
    /// </summary>
    protected override void OnParametersSet()
    {
        CC = new string[] { };
        if (IsAnswerDialog)
        {
            To = nAttach.Mittente;
            Subject = "R:" + nAttach.Oggetto;
        }else Subject = "FWD:" + nAttach.Oggetto;
    }


    /// <summary>
    /// Send the reply
    /// </summary>
    private async void OnSend()
    {
        string UserSign = "";
        IsSpinnerVisible = true;
        var User = _HttpContextAccessor.HttpContext.User;
        if (IncludeSign) UserSign = AddSignatureToBody(User)??"";

        Models.RisultatoAzione RA=new();
        if (IsAnswerDialog)
           RA= await _MailService.RispondiEmail(nAttach.Id.ToString(), nSourceServer.Nome, To, string.Join(";", CC), Subject, Body, IncludeSource, CloseEmail,UserSign, User);
        else
            RA= await _MailService.InoltraEmail( nAttach.Id.ToString(), To, string.Join(";", CC), Subject, Body, CloseEmail, User ,UserSign, nSourceServer.Nome);
        
        OnOperationDone.InvokeAsync(RA);
        if(RA.Successo)
            _Logger.LogInformation($"MailAnswer.OnSend: Mail {nAttach.Id} sent to {To},{string.Join(";", CC)} ");
        else
         _Logger.LogError($"MailAnswer.OnSend: Mail {nAttach.Id} to {To} fails {RA.Messaggio} ");
        IsSpinnerVisible = false;
    }

    /// <summary>
    /// Forward the email
    /// </summary>
    private void OnGoBack()
    {
        OnAbort.InvokeAsync();
    }
    /// <summary>
    /// Append the user signature to the email body
    /// </summary>
    private string AddSignatureToBody(System.Security.Claims.ClaimsPrincipal User)
    {
        List<ApplicationUser> Users = _ApplicationUsersManager.GetUsers().ToList();
        ApplicationUser CurrentUser = Users.FirstOrDefault(z => z.UserId == User.Identity.Name);
        return  "\n" + CurrentUser.Properties["SIGNATURE"] as string;
    }
}
