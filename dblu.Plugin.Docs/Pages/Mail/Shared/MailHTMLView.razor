@*
    Component for showing the html of an email, or only the text if html body is empty
    It has be bound in a i-frame to preserve style from the entire site
*@
@using dblu.Docs.Models
@using Microsoft.AspNetCore.Http;
@using dblu.Portale.Plugin.Docs.Classes
@using dblu.Portale.Plugin.Docs.Services
@inject dblu.Portale.Plugin.Docs.Services.AllegatiService _AttachmentsService
@inject dblu.Portale.Plugin.Docs.Services.DocumentTransformationService _DocumentService
@inject IHttpContextAccessor _HttpContextAccessor
@inject ILogger<MailHTMLView> _Logger


<SfSpinner @bind-Visible="IsSpinnerVisible">
</SfSpinner>

<div class="row form-group">
    <div class="col-12">
        @if (IsHtml)
        {
            <iframe style="width:100%; height:@(nHeight.ToString())px" srcdoc="@Source.Item1"></iframe>
        }
        else
        {
            <SfTextBox HtmlAttributes="@(new Dictionary<string, object>(){{ "style", $"width:100%; height:{nHeight}px "}})" Multiline="true" Value="@Source.Item2"></SfTextBox>
        }
    </div>
</div>
@if (nShowBack)
{
    <div class="row">
        <div class="col">
            <SfButton CssClass="e-primary" OnClick="OnGoBack">Indietro</SfButton>
        </div>
    </div>
}

@code {

    /// <summary>
    /// Attach to display
    /// </summary>
    [Parameter]
    public AllegatoEmail nAttach { get; set; }

    /// <summary>
    /// Height of the preview in pixel
    /// </summary>
    [Parameter]
    public int nHeight { get; set; } = 500;

    /// <summary>
    /// Fires whn user has finished to instect source
    /// </summary>
    [Parameter]
    public EventCallback OnAbort { get; set; }

    /// <summary>
    /// Indicates if back button must be showed
    /// </summary>
    [Parameter]
    public bool nShowBack { get; set; } = true;

    /// <summary>
    /// Indicates if attachments must be extracted
    /// </summary>
    [Parameter]
    public bool nReadAttachments { get; set; } = false;

    /// <summary>
    /// Event that will be fired once the document has been loaded
    /// </summary>
    [Parameter]
    public EventCallback<List<OriginalAttachments>> OnDocumentLoaded { get; set; }

    /// <summary>
    /// HTML/Text source to display
    /// </summary>
    private (string, string) Source { get; set; } = ("", "");

    /// <summary>
    /// Indicates if we need to show html or text
    /// </summary>
    private bool IsHtml => !string.IsNullOrEmpty(Source.Item1);

    /// <summary>
    /// Last rendered email attach
    /// </summary>
    public AllegatoEmail LastAttach { get; set; } = null;


    /// <summary>
    /// Spinner that will be shown wile document loading
    /// </summary>
    private bool IsSpinnerVisible { get; set; }

    /// <summary>
    /// On Init, load the HTML from email
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            bool ToSend = false;
            Document Doc = null;

            IsSpinnerVisible = true;

            await Task.Run(async () =>
            {
                if (nAttach is not null && LastAttach != nAttach)
                {
                    LastAttach = nAttach;
                    Stopwatch sw = Stopwatch.StartNew();
                    DocumentManager DocManager = new DocumentManager(_AttachmentsService, _DocumentService, _Logger);
                    Source= (await DocManager.Load(e_SourceType.Attachment, nAttach.Id.ToString(), false)).AsEmail();                   
                    if (nReadAttachments)
                    {
                        Doc = (await DocManager.Load(e_SourceType.Attachment, nAttach.Id.ToString(), true));
                        ToSend = true;
                    }
                    _Logger.LogInformation($"MailHTMLView.OnParametersSet: HTML in {sw.ElapsedMilliseconds} ms");
                }
            });
            if (ToSend) await OnDocumentLoaded.InvokeAsync(Doc.SourceAttachments);
            IsSpinnerVisible = false;
        }
        catch (Exception ex)
        {
            _Logger.LogError($"MailHTMLView.OnParametersSet: Unexpected error {ex} ");
        }
    }

    /// <summary>
    /// Forward the back event
    /// </summary>
    private void OnGoBack()
    {
        OnAbort.InvokeAsync();
    }
}
