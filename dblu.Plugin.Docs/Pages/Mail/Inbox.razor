@*
    Page that manage the inbox and its interaction with Dossiers and Items
*@

@page  "/Mail/Inbox"
@page "/Mail/Inbox/{nPreselAttach}"
@using dblu.Docs.Models
@using dblu.Docs.Classi
@using dblu.Portale.Plugin.Docs.Services
@using dblu.Portale.Plugin.Docs.Pages.Docs.Shared
@using dblu.Portale.Plugin.Docs.Pages.Mail.Shared
@using dblu.Portale.Plugin.Docs.Classes
@using Microsoft.AspNetCore.Http
@using System.IO
@using dblu.Docs.Interfacce
@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject dblu.Docs.Interfacce.ISoggettiService _SubjectService
@inject IHttpContextAccessor _HttpContextAccessor
@inject ILogger<Inbox> _Logger

<PageTitle nTitle="Inbox" />

<section class="content">

    <SfSpinner @bind-Visible="IsSpinnerVisible">
    </SfSpinner>

    <SfCard>
        <CardHeader Title="Email in arrivo" />
        <CardContent EnableSeperator="true">
            <div class="row form-group">
                <div class="col-5" style="align-self: auto;">
                    <div class="row form-group">
                        <div class="col">
                            <ServerCombo @bind-nServer="@MailBox"></ServerCombo>
                        </div>
                    </div>
                    <div class="row ">
                        <div class="col">
                            <MailTable @ref="@Grid" nMailBox="@MailBox" OnSelectAttachment="OnSelectAttach" OnReplyAttachment="OnReply" OnForwardAttachment="OnForward" OnMoveAttachment="OnMove" OnShowAttachment="OnShow" OnShowLogsAttachment="OnShowLogs" OnDeleteAttachment="OnDelete" nPreselAttach="@nPreselAttach"></MailTable>
                        </div>
                    </div>

                </div>

                <div class="col-7" style="align-self: auto;">
                    @if (IsAnswerDialog)
                    {
                        <div class="row form-group">
                            <div class="col">
                                <SfAccordion>
                                    <AccordionItems>
                                        <AccordionItem Expanded="true">
                                            <HeaderTemplate>
                                                <div>Rispondi a <b>@AttachSubject</b></div>
                                            </HeaderTemplate>
                                            <ContentTemplate>
                                                <MailAnswer nAttach="@Attach" nSourceServer="@MailBox" OnAbort="OnAbort" OnOperationDone="OnAnswer"></MailAnswer>
                                            </ContentTemplate>
                                        </AccordionItem>
                                    </AccordionItems>
                                </SfAccordion>
                            </div>
                        </div>
                    }
                    else if (IsForwardDialog)
                    {
                        <div class="row form-group">
                            <div class="col">
                                <SfAccordion>
                                    <AccordionItems>
                                        <AccordionItem Expanded="true">
                                            <HeaderTemplate>
                                                <div>Inoltra <b>@AttachSubject</b></div>
                                            </HeaderTemplate>
                                            <ContentTemplate>
                                                <MailForward nAttach="@Attach" nSourceServer="@MailBox" OnAbort="OnAbort" OnOperationDone="OnForward"></MailForward>
                                            </ContentTemplate>
                                        </AccordionItem>
                                    </AccordionItems>
                                </SfAccordion>
                            </div>
                        </div>
                    }
                    else if (IsMoveDialog)
                    {
                        <div class="row form-group">
                            <div class="col">
                                <SfAccordion>
                                    <AccordionItems>
                                        <AccordionItem Expanded="true">
                                            <HeaderTemplate>
                                                <div>Sposta <b>@AttachSubject</b></div>
                                            </HeaderTemplate>
                                            <ContentTemplate>
                                                <AttachMoveInFolder nAttach="@Attach" nSourceServer="@MailBox" OnOperationDone="OnDone" OnAbort="OnAbort"></AttachMoveInFolder>
                                            </ContentTemplate>
                                        </AccordionItem>
                                    </AccordionItems>
                                </SfAccordion>
                            </div>
                        </div>
                    }
                    else if (IsShowDialog)
                    {
                        <div class="row form-group">
                            <div class="col">
                                <SfAccordion>
                                    <AccordionItems>
                                        <AccordionItem Expanded="true">
                                            <HeaderTemplate>
                                                <div>Struttura di <b>@AttachSubject</b></div>
                                            </HeaderTemplate>
                                            <ContentTemplate>
                                                <MailHTMLView nAttach="@Attach" OnAbort="OnAbort"></MailHTMLView>
                                            </ContentTemplate>
                                        </AccordionItem>
                                    </AccordionItems>
                                </SfAccordion>
                            </div>
                        </div>
                    }
                    else if (IsLogsDialog)
                    {
                        <div class="row form-group">
                            <div class="col">
                                <SfAccordion>
                                    <AccordionItems>
                                        <AccordionItem Expanded="true">
                                            <HeaderTemplate>
                                                <div>Operazioni sulla mail <b>@AttachSubject</b></div>
                                            </HeaderTemplate>
                                            <ContentTemplate>
                                                <AttachLogs nAttach="@Attach" OnAbort="OnAbort"></AttachLogs>
                                            </ContentTemplate>
                                        </AccordionItem>
                                    </AccordionItems>
                                </SfAccordion>
                            </div>
                        </div>
                    }
                    else
                    {
                        @*CLIENTE*@
                        <div class="row form-group">
                            <div class="col">
                                <SfAccordion>
                                    <AccordionItems>
                                        <AccordionItem Expanded="true">
                                            <HeaderTemplate>
                                                <div>@CostumerDesc</div>
                                            </HeaderTemplate>
                                            <ContentTemplate>
                                                <AttachCustomer @ref="CustomerComponent" OnLinkedToCostumer="OnLinkCostumer" OnLinkedToItem="OnLinkToItem" nAttachments="@SourceAttach" nCurrentDocument="@Document" nCostumerCode="@CustomerCode" nAttachID="@AttachID" ></AttachCustomer>
                                            </ContentTemplate>
                                        </AccordionItem>
                                    </AccordionItems>
                                </SfAccordion>
                            </div>
                        </div>
                        @*FASCICOLI*@
                        @if (IsDossierVisible)
                        {
                            <div class="row form-group">
                                <div class="col">
                                    <SfAccordion>
                                        <AccordionItems>
                                            <AccordionItem Expanded="true">
                                                <HeaderTemplate>
                                                    <div>Fascicoli ed elementi</div>
                                                </HeaderTemplate>
                                                <ContentTemplate>
                                                    <AttachDossierItems @ref="@DossierItems" nCurrentDocument="@Document" nAttachID="@AttachID" nCostumerCode="@CustomerCode" nDossierID="@DossierID" nAttachments="@SourceAttach" OnAttachCompleted="OnAttachCompleted"  OnSelectedItem="OnSelectedItem"></AttachDossierItems>
                                                </ContentTemplate>
                                            </AccordionItem>
                                        </AccordionItems>
                                    </SfAccordion>
                                </div>
                            </div>
                        }
                        @*ALLEGATI EMAIL*@
                        @if (@IsAttachVisible)
                        {
                            <div class="row form-group">
                                <div class="col">
                                    <SfAccordion>
                                        <AccordionItems>
                                            <AccordionItem Expanded="true">
                                                <HeaderTemplate>
                                                    <div>Allegati in Email</div>
                                                </HeaderTemplate>
                                                <ContentTemplate>
                                                    <OriginalAttachsTable nAttachID="@AttachID" nAttachments="@SourceAttach"></OriginalAttachsTable>
                                                </ContentTemplate>
                                            </AccordionItem>
                                        </AccordionItems>
                                    </SfAccordion>
                                </div>
                            </div>
                        }
                    }
                    @*PDF VIEWER*@
                    <div class="row form-group">
                        <div class="col">
                            <SfAccordion>
                                <AccordionItems>
                                    <AccordionItem Expanded="true">
                                        <HeaderTemplate>
                                            <div>Anteprima</div>
                                        </HeaderTemplate>
                                        <ContentTemplate>
                                            <DocViewer @ref="@Viewer" OnDocumentTransformed="OnDocumentTransformedZ" nHeight=700 nSourceType="@PDFSourceType" nDocIdentifier="@PDFSourceId"></DocViewer>
                                        </ContentTemplate>
                                    </AccordionItem>
                                </AccordionItems>
                            </SfAccordion>
                        </div>
                    </div>
                </div>
            </div>
        </CardContent>
    </SfCard>

    <QuestionDialog nTitle="Conferma"
                    nText="Rimuovo l'email selezionata?"
                    OnExitPressed="OnCloseDialog"
                    OnNoPressed="OnCloseDialog"
                    OnYesPressed="OnDeleteConfirmed"
                    OnClose="OnCloseDialog"
                    nShowDialog="@ShowConfirm">
    </QuestionDialog>

    <Toast @ref="ToastOK" nToastType="Toast.e_ToastType.OK" nTitle="Elimina email" nContent="Email eliminata correttamente"></Toast>
    <Toast @ref="ToastKO" nToastType="Toast.e_ToastType.Fail" nTitle="Elimina email" nContent="Eliminazione non riuscita"></Toast>

    <Toast @ref="ToastMoveOK" nToastType="Toast.e_ToastType.OK" nTitle="Sposta email" nContent="Email spostata correttamente"></Toast>
    <Toast @ref="ToastMoveKO" nToastType="Toast.e_ToastType.Fail" nTitle="Sposta email" nContent="Spostamento NON riuscito"></Toast>

    <Toast @ref="ToastForwardOK" nToastType="Toast.e_ToastType.OK" nTitle="Inoltra email" nContent="Email inoltrata correttamente"></Toast>
    <Toast @ref="ToastForwardKO" nToastType="Toast.e_ToastType.Fail" nTitle="inoltra email" nContent="Inoltro NON riuscito"></Toast>

    <Toast @ref="ToastAnswerOK" nToastType="Toast.e_ToastType.OK" nTitle="Rispondi a email" nContent="Email inviata correttamente"></Toast>
    <Toast @ref="ToastAnswerKO" nToastType="Toast.e_ToastType.Fail" nTitle="Rispondi a email" nContent="Invio NON riuscito"></Toast>

    <MailCostumerSelectionPopUp @ref="@CustomerSelector" nCostumers="@CostumerToAssing" OnExitPressed="@(()=>OnSelectedCostumer())" OnClose="@(()=>OnSelectedCostumer())" OnSelectPressed="@(()=> OnSelectedCostumer(true))" nShowDialog="@ShowCostumerSelection"></MailCostumerSelectionPopUp>
</section>

@code
{
    /// <summary>
    /// Email that has to be selected, if any. We expect to receive the qattach id of the email selected
    /// </summary>
    [Parameter]
    public string nPreselAttach { get; set; } = "";

    /// <summary>
    /// Document viewer
    /// </summary>
    private DocViewer Viewer { get; set; }

    /// <summary>
    /// Reference to the Mail grid
    /// </summary>
    private MailTable Grid { get; set; }

    /// <summary>
    /// Reference to the Dossier component
    /// </summary>
    private AttachDossierItems DossierItems { get; set; }

    /// <summary>
    /// Indicates if the spinner has to be showed
    /// </summary>
    private bool IsSpinnerVisible { get; set; } = false;


    /// <summary>
    /// Indicates if Mail attachments panel is visible
    /// </summary>
    private bool IsAttachVisible { get; set; } = false;

    /// <summary>
    /// Indicates if Dossier attachments panel is visible
    /// </summary>
    private bool IsDossierVisible { get; set; } = false;

    /// <summary>
    /// Indicates if Answer panel is visible
    /// </summary>
    private bool IsAnswerDialog { get; set; } = false;

    /// <summary>
    /// Indicates if Forward panel is visible
    /// </summary>
    private bool IsForwardDialog { get; set; } = false;

    /// <summary>
    /// Indicates if Move panel is visible
    /// </summary>
    private bool IsMoveDialog { get; set; } = false;

    /// <summary>
    /// Indicates if HTML panel is visible
    /// </summary>
    private bool IsShowDialog { get; set; } = false;

    /// <summary>
    /// Indicates if LOG panel is visible
    /// </summary>
    private bool IsLogsDialog { get; set; } = false;

    /// <summary>
    /// Attach ID
    /// </summary>
    public string AttachID { get; set; }

    /// <summary>
    /// Attachment Subject
    /// </summary>
    private string AttachSubject { get; set; }

    /// <summary>
    /// Dossier ID
    /// </summary>
    private string DossierID { get; set; }

    /// <summary>
    /// Costumer Code
    /// </summary>
    private string CustomerCode
    {
        get;
        set;
    }

    /// <summary>
    /// Show delete confirm
    /// </summary>
    private bool ShowConfirm { get; set; } = false;

    /// <summary>
    /// Item ID
    /// </summary>
    private string ItemID { get; set; }

    /// <summary>
    /// Current Mail box
    /// </summary>
    private EmailServer MailBox { get; set; }

    /// <summary>
    /// Current Attach
    /// </summary>
    private AllegatoEmail Attach { get; set; }

    /// <summary>
    /// Toaster for a positive deletion
    /// </summary>
    private Toast ToastOK { get; set; }

    /// <summary>
    /// Toaster for a negative deletion
    /// </summary>
    private Toast ToastKO { get; set; }

    /// <summary>
    /// Toaster for a positive move
    /// </summary>
    private Toast ToastMoveOK { get; set; }

    /// <summary>
    /// Toaster for a negative move
    /// </summary>
    private Toast ToastMoveKO { get; set; }

    /// <summary>
    /// Toaster for a positive forward
    /// </summary>
    private Toast ToastForwardOK { get; set; }

    /// <summary>
    /// Toaster for a negative forward
    /// </summary>
    private Toast ToastForwardKO { get; set; }

    /// <summary>
    /// Toaster for a positive forward
    /// </summary>
    private Toast ToastAnswerOK { get; set; }

    /// <summary>
    /// Toaster for a negative forward
    /// </summary>
    private Toast ToastAnswerKO { get; set; }

    /// <summary>
    /// List of current Attach source Attachments
    /// </summary>
    private ObservableCollection<OriginalAttachments> SourceAttach { get; set; } = new();

    /// <summary>
    /// List of available users for the current attachment email
    /// </summary>
    private ObservableCollection<ISoggetti> CostumerToAssing { get; set; } = new();

    /// <summary>
    /// Current Document as memory stream
    /// </summary>
    public MemoryStream Document => Viewer?.Doc?.Payload ?? new();

    /// <summary>
    /// Dialog for selecting the costumer from email
    /// </summary>
    private MailCostumerSelectionPopUp CustomerSelector { get; set; }

    /// <summary>
    /// Show/Hide the dialog for the current selection
    /// </summary>
    private bool ShowCostumerSelection { get; set; } = false;

    /// <summary>
    ///  Source from witch read the PDF (Attachments or items)
    /// </summary>
    public e_SourceType PDFSourceType { get; set; }

    /// <summary>
    /// Id of the PDF Source
    /// </summary>
    public string PDFSourceId { get; set; }

    /// <summary>
    /// Reference to che Customer Component
    /// </summary>
    private AttachCustomer CustomerComponent { get; set; }

    /// <summary>
    /// Description to show on "Costumer" tab
    /// </summary>
    private string CostumerDesc => (CustomerComponent?.CurrentCostumer == null) ? "Cliente da selezionare" : $"{CustomerComponent?.CurrentCostumer?.Codice ?? ""} - {CustomerComponent?.CurrentCostumer?.Nome ?? ""}";

    /// <summary>
    /// On selection of the email,shows and hide panels properly
    /// </summary>
    /// <param name="e"></param>
    public async void OnSelectAttach(AllegatoEmail e)
    {
        try
        {
            Attach = e;
            PDFSourceId = e.Id.ToString();
            PDFSourceType = e_SourceType.Attachment;

            if (AttachID != e.Id.ToString())
                AttachID = e.Id.ToString();

            if (DossierID != e.IdFascicolo.ToString())
                DossierID = e.IdFascicolo.ToString();

            if (CustomerCode != e.Chiave3)
                CustomerCode = e.Chiave3;

            if (string.IsNullOrEmpty(CustomerCode))
            {
                IsDossierVisible = false;

                List<ISoggetti> Costumers = _SubjectService.GetSoggettiByMail(Attach.Mittente);
                _Logger.LogDebug($"Inbox[MAIL].OnSelectAttach: {Costumers.Count} costumers retrived for {Attach.Mittente}");
                if (Costumers.Count > 1)
                {
                    CostumerToAssing = new ObservableCollection<ISoggetti>(_SubjectService.GetSoggettiByMail(Attach.Mittente));
                    ShowCostumerSelection = true;
                }
                else
                {
                    if(Costumers.FirstOrDefault()!=null)
                        OnLinkCostumer(Costumers.FirstOrDefault());
                }

                OnAbort();
            }
            else IsDossierVisible = true;
        }
        catch (Exception ex)
        {
            _Logger.LogError($"Inbox[MAIL].OnSelectAttach: Unexpected errro on selecting attach {ex}");
        }
    }

    /// <summary>
    /// Once a document has been loaded, refresh the source attachment
    /// </summary>
    /// <param name="O"></param>
    public async void OnDocumentTransformedZ(List<OriginalAttachments> O)
    {
        if (PDFSourceType == e_SourceType.Attachment)
        {
            SourceAttach.Clear();
            foreach (OriginalAttachments o in O)
                SourceAttach.Add(o);

            IsAttachVisible = (SourceAttach.Count != 0);
        }
    }

    /// <summary>
    /// Change the mail box selected
    /// </summary>
    /// <param name="e"></param>
    public async void OnMailboxChanged(EmailServer e)
    {
        MailBox = e;
    }

    /// <summary>
    /// Activate replay panel
    /// </summary>
    /// <param name="e"></param>
    public async void OnReply(AllegatoEmail e)
    {
        AttachSubject = e.Chiave4;

        IsForwardDialog = false;
        IsMoveDialog = false;
        IsShowDialog = false;
        IsLogsDialog = false;

        IsAnswerDialog = !IsAnswerDialog;
    }

    /// <summary>
    /// Activate forward panel
    /// </summary>
    /// <param name="e"></param>
    public async void OnForward(AllegatoEmail e)
    {
        AttachSubject = e.Chiave4;
        IsAnswerDialog = false;
        IsMoveDialog = false;
        IsShowDialog = false;
        IsLogsDialog = false;

        IsForwardDialog = !IsForwardDialog;
    }

    /// <summary>
    /// Activate move panel
    /// </summary>
    /// <param name="e"></param>
    public async void OnMove(AllegatoEmail e)
    {
        AttachSubject = e.Chiave4;
        IsAnswerDialog = false;
        IsForwardDialog = false;
        IsShowDialog = false;
        IsLogsDialog = false;

        IsMoveDialog = !IsMoveDialog;
    }

    /// <summary>
    /// Activate HTML panel
    /// </summary>
    /// <param name="e"></param>
    public async void OnShow(AllegatoEmail e)
    {
        AttachSubject = e.Chiave4;
        IsAnswerDialog = false;
        IsForwardDialog = false;
        IsMoveDialog = false;
        IsLogsDialog = false;

        IsShowDialog = !IsShowDialog;
    }

    /// <summary>
    /// Activate logs panel
    /// </summary>
    /// <param name="e"></param>
    public async void OnShowLogs(AllegatoEmail e)
    {
        AttachSubject = e.Chiave4;
        IsAnswerDialog = false;
        IsForwardDialog = false;
        IsMoveDialog = false;
        IsShowDialog = false;

        IsLogsDialog = !IsLogsDialog;
    }

    /// <summary>
    /// Ask deletion confirm
    /// </summary>
    /// <param name="e"></param>
    public async void OnDelete(AllegatoEmail e)
    {
        ShowConfirm = true;
    }

    /// <summary>
    /// Close dialog confirm
    /// </summary>
    public async void OnCloseDialog()
    {
        ShowConfirm = false;
    }

    /// <summary>
    /// Delete selected attachment
    /// </summary>
    public async void OnDeleteConfirmed()
    {
        try
        {
            Stopwatch sw = Stopwatch.StartNew();
            ShowConfirm = false;
            var User = _HttpContextAccessor.HttpContext.User;

            var all = _MailService._allMan.Get(Attach.Id.ToString());
            if (all != null)
            {
                all.Stato = StatoAllegato.Annullato;
                _MailService._allMan.Salva(all, false);
                LogDoc log = new LogDoc()
                {
                    Data = DateTime.Now,
                    IdOggetto = all.Id,
                    TipoOggetto = TipiOggetto.ALLEGATO,
                    Utente = User.Identity.Name,
                    Operazione = TipoOperazione.Cancellato
                };
                _MailService._logMan.Salva(log, true);
                ToastOK.Show();
            }

            Grid.Refresh();
            _Logger.LogInformation($"Inbox[MAIL].OnDeleteConfirmed: Mail {Attach.Id} deleted in {sw.ElapsedMilliseconds} ms");
        }
        catch (Exception ex)
        {
            _Logger.LogError($"Inbox[MAIL].OnDeleteConfirmed: Unexpeted error deleting {Attach.Id}, {ex}");
            ToastKO.Show();
        }
    }

    /// <summary>
    /// Once Move has done, show the proper toast
    /// </summary>
    /// <param name="RA"></param>
    private async void OnDone(Models.RisultatoAzione RA)
    {
        if (RA.Successo)
            ToastMoveOK.Show();
        else ToastMoveKO.Show();
        Grid.Refresh();
        OnAbort();
    }

    /// <summary>
    /// Once forward has done, show the proper toast
    /// </summary>
    /// <param name="RA"></param>
    private async void OnForward(Models.RisultatoAzione RA)
    {
        if (RA.Successo)
            ToastForwardOK.Show();
        else ToastForwardKO.Show();
        Grid.Refresh();
        OnAbort();
    }

    /// <summary>
    /// Once forward has done, show the proper toast
    /// </summary>
    /// <param name="RA"></param>
    private async void OnAnswer(Models.RisultatoAzione RA)
    {
        if (RA.Successo)
            ToastAnswerOK.Show();
        else ToastAnswerKO.Show();
        Grid.Refresh();
        OnAbort();
    }

    /// <summary>
    /// Close all dialog panels
    /// </summary>
    private async void OnAbort()
    {
        IsAnswerDialog = false; IsForwardDialog = false; IsMoveDialog = false; IsShowDialog = false; IsLogsDialog = false;
    }

    /// <summary>
    /// On linking item, refresh the grid and components
    /// </summary>
    /// <param name="data"></param>
    private async void OnLinkToItem((string DossierId, string ItemId) data)
    {
        DossierID = data.DossierId;
        ItemID = data.ItemId;
        Grid.Refresh();

        IsDossierVisible = true;
    }

    /// <summary>
    /// Link the costumer to current Attach 
    /// </summary>
    /// <param name="Customer">Costumer to link</param>
    public async void OnLinkCostumer(ISoggetti Customer)
    {
        CustomerCode = Customer?.Codice??"";
        //    CostumerDesc = $"{Customer?.Codice ?? ""} - {Customer?.Nome}";
        IsDossierVisible = true;
    }

    /// <summary>
    /// On completed attach, i refresh the grid
    /// </summary>
    /// <param name="AttachId"></param>
    public async void OnAttachCompleted(string AttachId)
    {
        Grid.Refresh();
        Grid.SelectedRow = 0;
    }

    /// <summary>
    /// On closing dialog, change the visible value and  evnetually link the customer
    /// </summary>
    /// <param name="Save">True id the customer must be linked to</param>
    public async void OnSelectedCostumer(bool Save=false)
    {
        ShowCostumerSelection = false;
        if (Save && CustomerSelector.SelectedCostumer != null)
            OnLinkCostumer(CustomerSelector.SelectedCostumer);
    }

    /// <summary>
    /// On selected Item, Reload the PDF from the item
    /// </summary>
    /// <param name="Id">Id of the item to load on PDF preview</param>
    public void OnSelectedItem(string Id)
    {
        PDFSourceId = Id;
        PDFSourceType = e_SourceType.Item;
    }
}
