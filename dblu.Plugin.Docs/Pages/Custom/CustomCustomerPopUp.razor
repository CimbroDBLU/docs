@using dblu.Docs.Interfacce
@using dblu.Portale.Plugin.Docs.ViewModels
@using dblu.Portale.Plugin.Docs.Pages.Custom.Shared
@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject dblu.Docs.Interfacce.ISoggettiService _SubjectService
@inject NavigationManager _NavigatorManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject ILogger<CustomCustomerPopUp> _Logger

<SfDialog @ref="@Dialog" Width="65%" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsShowDialog">
    <DialogTemplates>
        <Header>
            <i style="font-weight:900" class="fas fa-user-check"></i> Ricerca Clienti
        </Header>
        <Content>
            <CustomersTable OnSelectCostumer="OnSelectedCustomerZ"></CustomersTable>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Ok" IsPrimary="true" OnClick="OnOkPressed" />
        <DialogButton Content="Annulla" IsPrimary="false" OnClick="()=> { IsShowDialog = false; }" />
    </DialogButtons>
</SfDialog>


@code {
    SfDialog Dialog { get; set; }

    [Parameter]
    public string nCostumerCode { get; set; }

    [Parameter]
    public string nAttachID { get; set; }

    private ISoggetti LastSelectedCustomer { get; set; }

    public bool _IsShowDialog = false;

    [Parameter]
    public bool IsShowDialog
    {
        get => _IsShowDialog;
        set
        {
            if (_IsShowDialog == value) return;
            _IsShowDialog = value;
            IsShowDialogChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> IsShowDialogChanged { get; set; }

    [Parameter]
    public EventCallback<ISoggetti> OnSelectedCustomer { get; set; }

    public async void OnOkPressed()
    {
        try
        {
            var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
            var User = authState.User;
            nCostumerCode = LastSelectedCustomer?.Codice;
            OnParametersSet();
            await _SubjectService.NotificaAssociazione(User.Identity.Name, nCostumerCode, nAttachID);

            IsShowDialog = false;
            await OnSelectedCustomer.InvokeAsync(LastSelectedCustomer);

        }
        catch (Exception ex)
        {
            _Logger.LogError($"CustomCustomerPopUp.OnOkPressed: Unxpected error {ex}");
        }

    }

    public async void OnSelectedCustomerZ(ISoggetti args)
    {
        LastSelectedCustomer = args;

    }
}
