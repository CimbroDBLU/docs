@*
    Component for showing a table with all items inside this Dossier
*@
@using dblu.Portale.Plugin.Docs.ViewModels
@using dblu.Docs.Classi
@using dblu.Portale.Plugin.Docs.Class
@using dblu.Docs.Models
@using dblu.Portale.Plugin.Docs.Models
@using dblu.Portale.Plugin.Docs.Services
@using System.Security.Claims
@using System.IO
@using Microsoft.AspNetCore.Components.CompilerServices
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using dblu.Portale.Plugin.Docs.Pages.Custom
@using dblu.Portale.Plugin.Docs.Pages.Docs.Shared
@using dblu.Docs.Interfacce
@inject dblu.Portale.Plugin.Docs.Services.AllegatiService _ele
@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject dblu.Portale.Plugin.Docs.Services.ZipService _ZipService
@inject dblu.Docs.Interfacce.ISoggettiService _SubjectService
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject ProtectedSessionStorage _SessionStore
@inject NavigationManager  _NavigationManager
@inject IJSRuntime JSRuntime
@inject ILogger<AttachItemsTable> _Logger

<style>

    .smallb {
        width: 50px;
    }

    .e-toolbar .e-dblu .e-icons {
        background-color: Highlight;
        color: white;
        font-weight: bold;
    }

    .e-toolbar.e-toolbar-items .e-toolbar-item.e-dblu,
    .e-toolbar.e-toolbar-items .e-toolbar-item.e-dblu button {
        background-color: Highlight;
        color: white;
        font-weight: bold;
    }

        .e-toolbar .e-toolbar-items .e-toolbar-item.e-dblu .e-tbar-btn-text,
        .e-toolbar .e-toolbar-items .e-toolbar-item.e-dblu .e-tbar-btn.e-btn,
        .e-toolbar .e-toolbar-items .e-toolbar-item.e-dblu .e-tbar-btn.e-icons,
        .e-toolbar .e-toolbar-items.e-dblu .e-toolbar-item.e-dblu .e-tbar-btn.e-btn:hover,
        .e-toolbar .e-toolbar-items .e-toolbar-item.e-dblu .e-tbar-btn.e-btn:active,
        .e-toolbar.e-toolbar-items .e-toolbar-item.e-dblu .e-tbar-btn.e-btn:focus {
            background-color: Highlight;
            color: white;
            font-weight: bold;
        }
</style>

@if (nItems != null && nItems.Count != 0)
{

    <SfSpinner @bind-Visible="IsSpinnerVisible">
    </SfSpinner>

    <SfGrid @ref="@Grid" DataSource="@nItems" AllowTextWrap="false" AllowPaging="true">
        <SfToolbar>
            <ToolbarEvents Clicked="OnToolbarClick"></ToolbarEvents>
            <ToolbarItems>
                <ToolbarItem Id="Open" PrefixIcon="e-icons e-folder-open" TooltipText="Apri"></ToolbarItem>
                <ToolbarItem Id="Add" PrefixIcon="e-add" TooltipText="Aggiungi"></ToolbarItem>
                <ToolbarItem Id="Duplicate" PrefixIcon="e-icons e-copy" TooltipText="Duplica"></ToolbarItem>
                <ToolbarItem Id="Print" CssClass="e-dblu" PrefixIcon="e-icons e-print" Disabled="@IsSummaryActive"></ToolbarItem>

                <ToolbarItem Id="Delete" PrefixIcon="e-delete" TooltipText="Elimina"></ToolbarItem>
                <ToolbarItem Align=ItemAlign.Right Id="SearchItem" Type="ItemType.Input">
                    <Template>
                        <SfTextBox @ref="@SearchText" ID="SearchItemText" EnablePersistence="false"  Autocomplete="AutoComplete.On"  @bind-Value="@SearchKey" @onchange="OnSearch" Placeholder="Ricerca" Created="@OnSearchCreated"></SfTextBox>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="EditMode.Batch"></GridEditSettings>
        <GridEvents TValue="EmailElementi" RowSelected="OnRecordSelect" OnRecordDoubleClick="OnDoubleClick"></GridEvents>
        <GridPageSettings PageSize="4"></GridPageSettings>
        <GridColumns>
            <GridColumn Field=@nameof(EmailElementi.Id) IsPrimaryKey="true" Visible="false"></GridColumn>
            <GridColumn Width="40px" Field=@nameof(EmailElementi.IsUltimo) HeaderText="Ult"></GridColumn>
            <GridColumn Field=@nameof(EmailElementi.DscTipoElemento) HeaderText="Tipo"></GridColumn>
            <GridColumn Field=@nameof(EmailElementi.DscElemento) HeaderText="Descrizione"></GridColumn>
            <GridColumn Field=@nameof(EmailElementi.Campo1) HeaderText="@Cols[0].Des" Visible="@Cols[0].Visible"></GridColumn>
            <GridColumn Field=@nameof(EmailElementi.Campo2) HeaderText="@Cols[1].Des" Visible="@Cols[1].Visible"></GridColumn>
            <GridColumn Field=@nameof(EmailElementi.Campo3) HeaderText="@Cols[2].Des" Visible="@Cols[2].Visible"></GridColumn>
            <GridColumn Field=@nameof(EmailElementi.Campo4) HeaderText="@Cols[3].Des" Visible="@Cols[3].Visible"></GridColumn>
            <GridColumn Field=@nameof(EmailElementi.Campo5) HeaderText="@Cols[4].Des" Visible="@Cols[4].Visible"></GridColumn>
            <GridColumn Field=@nameof(EmailElementi.Stato) HeaderText="Stato"></GridColumn>

            <GridColumn Width="40px" AllowSorting="true" Field=@nameof(EmailElementi.LastOp) HeaderText="Last">
                <Template>
                    <LastOperation nOperation="@((context as EmailElementi).LastOp)"></LastOperation>
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
    <div class="mt-2">
        <ActionsButtonsList nAttachID="@nAttachID"nDossierID="@nDossierID" nAttachments="@nAttachments" nCostumerCode="@nCostumerCode"  nCurrentDocument="@nCurrentDocument" nItemTypes="@Actions" nDisplayActions="@(!string.IsNullOrEmpty(nCostumerCode))" OnLinkItemPressed="OnLinkItem" OnLinkPressed="OnLink" nDisplayComplete="@(!IsSummaryActive)" OnCompletePressed="OnComplete" OnAttachCompleted=OnAttachCompleted  ></ActionsButtonsList>
    </div>
}
else
{
   <ActionsButtonsList nAttachID="@nAttachID" nDossierID="@nDossierID" nAttachments="@nAttachments" nCostumerCode="@nCostumerCode" nCurrentDocument="@nCurrentDocument" nItemTypes="@Actions" nDisplayActions="@(!string.IsNullOrEmpty(nCostumerCode))" OnLinkItemPressed="OnLinkItem" OnLinkPressed="OnLink" nDisplayComplete="@(!IsSummaryActive)" OnCompletePressed="OnComplete"  OnAttachCompleted=OnAttachCompleted ></ActionsButtonsList>
}
@if (IsShowDialog)
{
    <DynamicComponent nType="@DynamicContent" nAttributes="@DynamicAttributes"></DynamicComponent>
}

<QuestionDialog nShowDialog="ShowAddConfirm" nText="Aggiungo all'elemento selezionato?" nTitle="Conferma" OnNoPressed="CloseDialog" OnClose="CloseDialog" OnExitPressed="CloseDialog" OnYesPressed="AddToItem"></QuestionDialog>
<QuestionDialog nShowDialog="ShowDuplicateConfirm" nText="Confermi la creazione di un nuovo elemento nel fascicolo corrente?" nTitle="Conferma" OnClose="CloseDialog" OnNoPressed="CloseDialog" OnExitPressed="CloseDialog" OnYesPressed="Duplicate"></QuestionDialog>
<QuestionDialog nShowDialog="ShowDeleteConfirm" nText="Sei sicuro di eliminare completamente l'elemento?" nTitle="Conferma" OnClose="CloseDialog" OnNoPressed="CloseDialog" OnExitPressed="CloseDialog" OnYesPressed="Delete"></QuestionDialog>
<AlertDialog nShowDialog="ShowAlertNoDelete" nText="Non è possibile eliminare un elemento già processato." OnOKPressed="()=> { ShowAlertNoDelete = false; }" OnClose="()=> { ShowAlertNoDelete = false; }"></AlertDialog>
<QuestionDialog nShowDialog="ShowDossierConfirm" nText="Confermi la creazione di un nuovo elemento nel fascicolo corrente?" nTitle="Conferma" OnClose="CloseDialog" OnNoPressed="CloseDialog" OnExitPressed="CloseDialog" OnYesPressed="Register"></QuestionDialog>


<Toast @ref="ToastAddOK" nToastType="Toast.e_ToastType.OK" nTitle="Aggiungi a elemento" nContent="Allegato aggiunto"></Toast>
<Toast @ref="ToastAddKO" nToastType="Toast.e_ToastType.Fail" nTitle="Aggiungi a elemento" nContent="Allegato NON aggiunto"></Toast>
<Toast @ref="ToastDelOK" nToastType="Toast.e_ToastType.OK" nTitle="Rimuovi elemento" nContent="Elemento rimosso"></Toast>
<Toast @ref="ToastDelKO" nToastType="Toast.e_ToastType.Fail" nTitle="Rimuovi elemento" nContent="Rimozione non riuscita"></Toast>
<Toast @ref="ToastDupOK" nToastType="Toast.e_ToastType.OK" nTitle="Duplica elemento" nContent="Elemento duplicato"></Toast>
<Toast @ref="ToastDupKO" nToastType="Toast.e_ToastType.Fail" nTitle="Duplica elemento" nContent="Duplicazione non riuscita"></Toast>

<Toast @ref="ToastActionOK" nToastType="Toast.e_ToastType.OK" nTitle="@ActionSelected" nContent="Elemento creato correttmante"></Toast>
<Toast @ref="ToastActionKO" nToastType="Toast.e_ToastType.Fail" nTitle="@ActionSelected" nContent="Creazione elemnto non riuscita"></Toast>


<UndefinedComponentPopUp @bind-IsShowDialog="@IsShowUndefined" nComponentName="@ComponentName"></UndefinedComponentPopUp>

@code {

    /// <summary>
    /// Id of the current attachment
    /// </summary>
    [Parameter]
    public string nAttachID { get; set; }

    /// <summary>
    /// Id of the current Dossier
    /// </summary>
    [Parameter]
    public string nDossierID { get; set; }

    /// <summary>
    /// The current documetn in memory
    /// </summary>
    [Parameter]
    public MemoryStream nCurrentDocument { get; set; }

    /// <summary>
    /// The list of the attachments related to this email attach
    /// </summary>
    [Parameter]
    public ObservableCollection<OriginalAttachments> nAttachments { get; set; }

    /// <summary>
    /// The costumer code of this dossier
    /// </summary>
    [Parameter]
    public string nCostumerCode { get; set; }

    /// <summary>
    /// Fires when user select one of the items showed
    /// </summary>
    [Parameter]
    public EventCallback<EmailElementi> OnSelectedItem { get; set; }

    /// <summary>
    /// Type of the attachment wwe are processing
    /// </summary>
    [Parameter]
    public TipiRecordServer nRecordServer { get; set; } = TipiRecordServer.CartellaMail;

    /// <summary>
    /// If we are processing document specify witch type
    /// </summary>
    [Parameter]
    public TipiDocumentiFile nDocumentType { get; set; } = TipiDocumentiFile.ZIP;

    /// <summary>
    /// Fires when an attach has been completed
    /// </summary>
    [Parameter]
    public EventCallback<string> OnAttachCompleted { get; set; }

    /// <summary>
    /// Current Suorce folder for selected attach
    /// </summary>
    [Parameter]
    public string nSourceFolder { get; set; }

    /// <summary>
    /// reference to the combo with all the available actions
    /// </summary>
    private ComboActions ActionsCombo { get; set; }

    /// <summary>
    /// Current User
    /// </summary>
    private ClaimsPrincipal User { get; set; }

    /// <summary>
    /// Show the alert fon notify that an item cannot be deleted
    /// </summary>
    private bool ShowAlertNoDelete { get; set; } = false;

    /// <summary>
    /// Show the add confirmation
    /// </summary>
    private bool ShowAddConfirm { get; set; } = false;

    /// <summary>
    /// Show the delete confirmation
    /// </summary>
    private bool ShowDeleteConfirm { get; set; } = false;

    /// <summary>
    /// Show the confirmation for creatinga new item inside dossier
    /// </summary>
    private bool ShowDossierConfirm { get; set; } = false;

    /// <summary>
    /// Inidicate id the toolbar button for printing the summary is enable or not
    /// </summary>
    private bool IsSummaryActive => (nItems?.Where(x => (int)x.Stato > 1).FirstOrDefault() == null) ? true : false;

    /// <summary>
    /// Show /hide the duplicate confirmation
    /// </summary>
    private bool ShowDuplicateConfirm { get; set; } = false;

    /// <summary>
    /// Toast for a positive ADD
    /// </summary>
    private Toast ToastAddOK { get; set; }

    /// <summary>
    /// Toast for a negative ADD
    /// </summary>
    private Toast ToastAddKO { get; set; }

    /// <summary>
    /// Toast for a positive deletion
    /// </summary>
    private Toast ToastDelOK { get; set; }

    /// <summary>
    /// Toast for a negative deletion
    /// </summary>
    private Toast ToastDelKO { get; set; }

    /// <summary>
    /// Toast for a positive duplication
    /// </summary>
    private Toast ToastDupOK { get; set; }

    /// <summary>
    /// Toast for a negative duplication
    /// </summary>
    private Toast ToastDupKO { get; set; }

    /// <summary>
    /// Toast for a positive action
    /// </summary>
    private Toast ToastActionOK { get; set; }

    /// <summary>
    /// Toast for a negative action
    /// </summary>
    private Toast ToastActionKO { get; set; }

    /// <summary>
    /// Current Item
    /// </summary>
    public EmailElementi nItem { get; set; }

    /// <summary>
    /// Last attach ID showed
    /// </summary>
    public string LastAttachId { get; set; }

    /// <summary>
    /// Last dossier Id
    /// </summary>
    public string LastDossierId { get; set; }

    /// <summary>
    /// List of items
    /// </summary>
    public ObservableCollection<EmailElementi> nItems { get; set; } = new();

    /// <summary>
    /// Reference to the grid
    /// </summary>
    private SfGrid<EmailElementi> Grid { get; set; }

    /// <summary>
    /// Idnicates is undefined component has to be showed or not
    /// </summary>
    private bool IsShowUndefined { get; set; } = false;

    /// <summary>
    /// Name of the component to show
    /// </summary>
    private string ComponentName { get; set; } = "";

    /// <summary>
    /// List of custom columns of the items
    /// </summary>
    private List<Colonna> Cols { get; set; } = new List<Colonna>();

    /// <summary>
    /// List of all available actions
    /// </summary>
    private List<TipiElementi> Actions = new();

    /// <summary>
    /// Current selected action
    /// </summary>
    private string ActionSelected { get; set; }

    /// <summary>
    /// Spinner that will be shown wile document loading
    /// </summary>
    private bool IsSpinnerVisible { get; set; }

    /// <summary>
    /// Text box for seaching
    /// </summary>
    private SfTextBox SearchText { get; set; }

    /// <summary>
    /// The key text type inside search box
    /// </summary>
    private string SearchKey { get; set; } = "";

    /// <summary>
    /// Dinamic component to load
    /// </summary>
    private Type DynamicContent { get; set; } = null;

    /// <summary>
    /// Attributes of the dynamic compponent
    /// </summary>
    private ObservableCollection<dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute> DynamicAttributes = new();

    /// <summary>
    /// Indicates id the dialog has to be showed
    /// </summary>
    private bool IsShowDialog { get; set; } = false;

    /// <summary>
    /// Fires when attach has been linked to item
    /// </summary>
    [Parameter]
    public EventCallback<(string, string)> OnLinkedToItem { get; set; }

    /// <summary>
    /// Fires when the work on this Dosssier with this email has been completed
    /// </summary>
    [Parameter]
    public EventCallback OnComplete { get; set; }

    /// <summary>
    /// Pre-selected Item
    /// </summary>
    [Parameter]
    public string nSelectedItem{  get;  set; }

    /// <summary>
    /// On initialize load all data
    /// </summary>
    protected override async void OnInitialized()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        Cols = _ele.GetColonne("vELEMENTO");
        Actions = GetActions();
        ActionSelected = Actions.Where(x => x.AggregaAElemento == false).FirstOrDefault()?.Codice; 
    }

    /// <summary>
    /// On parameter setted relof the grid if necessary
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        if (LastAttachId == nAttachID && LastDossierId == nDossierID) return;

        IsSpinnerVisible = true;
        Task.Run(() =>
        {
            nItems = new ObservableCollection<EmailElementi>(_MailService.ListaElementiEmail(nDossierID, nAttachID));
            LastDossierId = nDossierID;
            LastAttachId = nAttachID;
        }).ContinueWith(T => IsSpinnerVisible = false);
        IsSpinnerVisible = false;
    }

    /// <summary>
    /// On after render, select first custom action
    /// </summary>
    /// <param name="firstRender"></param>
    protected override void OnAfterRender(bool firstRender)
    {
        if (string.IsNullOrEmpty(ActionSelected))
            ActionSelected = ActionsCombo?.ActionsList?.FirstOrDefault()?.Item ?? "";
        if(firstRender)
            if(!string.IsNullOrEmpty(nSelectedItem))
            {
                int Index = nItems.ToList().FindIndex(d => d.Id == nSelectedItem);
                Grid?.SelectRowAsync((double)Index);
            }
        base.OnAfterRender(firstRender);
    }

    /// <summary>
    /// Refresh the grid
    /// </summary>
    public void Refresh()
    {
        LastAttachId = "-";
        OnParametersSet();
        Grid.Refresh();
    }



    /// <summary>
    /// On record select forward the selection
    /// </summary>
    /// <param name="args"></param>
    public async void OnRecordSelect(RowSelectEventArgs<EmailElementi> args)
    {
        OnSelectedItem.InvokeAsync(args.Data);
    }

    /// <summary>
    /// On toolbar click, do the requested operation
    /// </summary>
    /// <param name="args"></param>
    public async void OnToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        EmailElementi Elem = (await Grid.GetSelectedRecords()).FirstOrDefault();
        string z = _NavigationManager.Uri;
        if (Elem == null) return;
        nItem = Elem;

        switch (args.Item.Id)
        {
            case "Open":
                OnOpen(Elem);
                break;
            case "Add":
                ShowAddConfirm = true;
                break;
            case "Duplicate":
                ShowDuplicateConfirm = true;
                break;
            case "Delete":
                if (((int)nItem.Stato) > 1)
                    ShowAlertNoDelete = true;
                else
                    ShowDeleteConfirm = true;
                break;
            case "Print":
                if (((int)nItem.Stato) > 1)
                {
                    await _SessionStore.SetAsync("Referrer", $"/{ _NavigationManager.Uri.Replace(_NavigationManager.BaseUri, "")}/{nAttachID}");
                    string url = $"/Docs/Attachment/{nAttachID}/{"false"}/{"true"}";
                    await JSRuntime.InvokeAsync<object>("open", url, "_blank");
                }
                break;
        }
    }

    /// <summary>
    /// Open the selected element
    /// </summary>
    /// <param name="Elem"></param>
    public async void OnOpen(EmailElementi Elem)
    {
        TipiElementi T = Actions.Where(x => x.Codice == Elem.TipoElemento).FirstOrDefault();
        if (T != null)
        {
            ComponentName = T.ViewAttributi;
            ///// TODO: TEMPORANEO SANGIACOMO
            if (!ComponentName.Contains("blz:/") && IsMSG())
                ComponentName = "blz:/Orders/MSG_RegisterOrder";
            ////  DA RIMUOVERE
            if (!ComponentName.StartsWith("blz:/"))
                IsShowUndefined = true;
        }
        string prev= $"{ _NavigationManager.Uri.Replace(_NavigationManager.BaseUri, "")}";
        if (!prev.EndsWith("Inbox"))
            prev = prev.Substring(0, prev.IndexOf("Inbox")+5);

        await _SessionStore.SetAsync("Referrer", $"/{prev}/{nSourceFolder}/{nAttachID}");
        string Url = $"{ComponentName.Replace("blz:/", "")}/{Elem.Id}";
        _NavigationManager.NavigateTo(Url);
    }



    /// <summary>
    /// Add current Attach to item
    /// </summary>
    public async void AddToItem()
    {
        BPMDocsProcessInfo Info = _MailService.GetProcessInfo(TipiOggetto.ELEMENTO, AzioneOggetto.MODIFICA);
        int fl = await _MailService.AttachToItem(nAttachID, nDossierID, nItem.IdElemento.ToString(), null, nCurrentDocument, nAttachments.ToList(), User, Info, null);
        ShowAddConfirm = false;

        if (fl==0)
            ToastAddOK.Show();
        else ToastAddKO.Show();

        Refresh();
    }

    /// <summary>
    /// Duplicate current Item
    /// </summary>
    public async void Duplicate()
    {
        var f = await _MailService.DuplicaElementoAsync(nAttachID, nDossierID, nItem.IdElemento.ToString(), nItem.TipoElemento, nCostumerCode, _MailService._soggetti.GetSoggetto(nCostumerCode)?.Nome ?? "", null, true, nItem.DscElemento, User);
        if (f != null)
            ToastDupOK.Show();
        else ToastDupKO.Show();

        ShowDuplicateConfirm = false;
        OnOpen(new EmailElementi() { IdElemento = f.Id, TipoElemento = f.Tipo });
        //Refresh();
        //StateHasChanged();

    }

    /// <summary>
    /// Delete selected item
    /// </summary>
    public async void Delete()
    {
        RisultatoAzione RA = _MailService.CancellaElemento(nItem.IdElemento.ToString(), (short)0, User);

        if (RA.Successo)
            ToastDelOK.Show();
        else ToastDelKO.Show();

        ShowDeleteConfirm = false;
        Refresh();
    }

    /// <summary>
    /// Close dialogs
    /// </summary>
    public async void CloseDialog()
    {
        ShowAddConfirm = false;
        ShowDuplicateConfirm = false;
        ShowDeleteConfirm = false;
        ShowDossierConfirm = false;
    }

    /////// TODO: TEMPORANEO SANGIACOMO
    private bool IsMSG() => AppDomain.CurrentDomain.GetAssemblies().ToList().Any(Q => Q.GetName().Name.Contains("SanGiacomo"));
    ////  DA RIMUOVERE

    /// <summary>
    /// Open the customized page for the specific element type
    /// </summary>
    public async void Register()
    {
        ShowDossierConfirm=false;
        IsSpinnerVisible=true;
        Task.Run(async ()=>
        {
            Stopwatch sw=Stopwatch.StartNew();
            TipiElementi T = Actions.Where(x => x.Codice == ActionSelected).FirstOrDefault();

            _Logger.LogDebug($"AttachItemsTable.Register: linq incremental  {sw.ElapsedMilliseconds} ms");

            //1)aggiungo al fascicolo
            Elementi e = await _MailService.CreateItemDossier(nAttachID, nDossierID, T.Categoria, T.Codice, nCostumerCode, _MailService._soggetti.GetSoggetto(nCostumerCode)?.Nome ?? "",nAttachments.ToList(), nItem?.DscElemento, User, nCurrentDocument);
            if (e == null)
                ToastActionKO.Show();
            else
                ToastActionOK.Show();

            _Logger.LogDebug($"AttachItemsTable.Register: CreateItemDossier incremental  {sw.ElapsedMilliseconds} ms");
            Stopwatch sw1 = Stopwatch.StartNew();
            //2)Apro la pagina di protocollazione indicata
            string AttachId = _MailService._elmMan.GetAllegatiElemento(e.Id).FirstOrDefault(x => x.Tipo == "FILE")?.Id.ToString()??nAttachID;
            _Logger.LogDebug($"AttachItemsTable.Register: GetAllegatiElemento  incremental {sw.ElapsedMilliseconds} ms");

            string prev = $"{ _NavigationManager.Uri.Replace(_NavigationManager.BaseUri, "")}";
            if (!prev.EndsWith("Inbox"))
                prev = prev.Substring(0, prev.IndexOf("Inbox") + 5);
            await _SessionStore.SetAsync("Referrer", $"/{prev}/{nSourceFolder}/{nAttachID}");

            _Logger.LogDebug($"AttachItemsTable.Register: Created Dossier in {sw.ElapsedMilliseconds} ms");

            string Url = $"{ComponentName.Replace("blz:/", "")}/{e.Id}";
            _NavigationManager.NavigateTo(Url);
            IsSpinnerVisible=false;
        });


    }

    /// <summary>
    /// Load the List of alla available actions
    /// </summary>
    /// <returns></returns>
    public List<TipiElementi> GetActions()
    {
        if (nRecordServer == TipiRecordServer.CartellaMail)
        {

            List<string> ListaRuoli = _MailService.getRuoli(User.Claims, "");
            List<TipiElementi> ListaTipiElementi = _MailService._elmMan.GetAllTipiElementi(ListaRuoli);
            List<EmailServer> ListaServer = _MailService._serMan.GetServersEmailinRoles(ListaRuoli, nRecordServer);

            if (ListaServer != null && ListaServer.Count > 0)
            {

                var ListaRuoliServ = _MailService.getRuoli(ListaRuoli, ListaServer);
                return _MailService._elmMan.GetAllTipiElementi(ListaRuoliServ).Where(z => z.AggregaAElemento == false).ToList();
            }
            else
            {
                return ListaTipiElementi.Where(z => z.AggregaAElemento == false).ToList();
            }
        }
        else
        {
            List<string> ListaRuoli = _ZipService.GetRuoliTipoAll(User.Claims, (nDocumentType == TipiDocumentiFile.ZIP) ? "ZIP" : "REQ");
            List<EmailServer> ListaServer = _ZipService._serMan.GetServersEmailinRoles(ListaRuoli, TipiRecordServer.CartellaFile);

            if (ListaServer != null && ListaServer.Count > 0)
            {

                var ListaRuoliServ = _ZipService.getRuoli(ListaRuoli, ListaServer[0].Nome);
                return _ZipService._elmMan.GetAllTipiElementi(ListaRuoliServ).Where(z => z.AggregaAElemento == false).ToList();
            }
            else
            {
                return _ZipService._elmMan.GetAllTipiElementi(ListaRuoli).Where(z => z.AggregaAElemento == false).ToList();
            }
        }

    }

    /// <summary>
    /// Add the search icon to the text box
    /// </summary>
    public void OnSearchCreated()
    {
        this.SearchText.AddIcon("append", "e-icons e-search");
    }

    /// <summary>
    /// Apply the search
    /// </summary>
    public void OnSearch()
    {
        Grid.SearchAsync(SearchKey);
    }

    /// <summary>
    /// Display the Undefined component, using dynmic loading
    /// </summary>
    /// <param name="nComponent">Name of the component</param>
    public void UndefinedComponent(string nComponent)
    {
        try
        {
            IsShowDialog = true;
            DynamicAttributes.Clear();
            string component = "dblu.Portale.Plugin.Docs.Pages.Custom.UndefinedComponentPopUp";
            DynamicContent = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetTypes().FirstOrDefault(y => y.FullName == component) != null)?.GetType(component);


            DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
            {
                Name = "nComponentName",
                Position = 1,
                Value = nComponent
            });

            DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
            {
                Name = "IsShowDialog",
                Position = 1,
                Value = RuntimeHelpers.TypeCheck<bool>(IsShowDialog)
            });

            DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
            {
                Name = "IsShowDialogChanged",
                Position = 2,
                Value = RuntimeHelpers.TypeCheck<EventCallback<bool>>(
                EventCallback.Factory.Create<bool>(this,
                    RuntimeHelpers.CreateInferredEventCallback(this, __value => IsShowDialog = __value, IsShowDialog)))
            });
        }
        catch (Exception ex)
        {
            _Logger.LogError($"AttachCostumerSearch.UndefinedComponent: Unexpected error {ex}");
        }
    }

    /// <summary>
    /// Open the component for linking the email to an element
    /// </summary>
    public async void OnLink()
    {
        try
        {
            string component = _SubjectService.UrlServizioRicercaElementi(_NavigationManager.Uri);
            DynamicAttributes.Clear();

            IsShowDialog = true;

            DynamicContent = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetTypes().FirstOrDefault(y => y.FullName == component) != null)?.GetType(component);

            if (!component.StartsWith("dblu.Portale") || DynamicContent == null)
            {
                UndefinedComponent(component);
                return;
            }


            DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
            {
                Name = "nAttachID",
                Position = 1,
                Value = nAttachID
            });

            DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
            {
                Name = "nCostumerCode",
                Position = 2,
                Value = nCostumerCode
            });

            DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
            {
                Name = "IsShowDialog",
                Position = 3,
                Value = RuntimeHelpers.TypeCheck<bool>(IsShowDialog)
            });

            DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
            {
                Name = "IsShowDialogChanged",
                Position = 4,
                Value = RuntimeHelpers.TypeCheck<EventCallback<bool>>(
                EventCallback.Factory.Create<bool>(this,
                    RuntimeHelpers.CreateInferredEventCallback(this, __value => IsShowDialog = __value, IsShowDialog)))
            });

            DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
            {
                Name = "OnLinkedToItem",
                Position = 5,
                Value = EventCallback.Factory.Create<(string, string)>(this, OnLinkedToItem)
            });

            DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
            {
                Name = "nAttachments",
                Position = 6,
                Value = nAttachments ?? new()
            });

            DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
            {
                Name = "nCurrentDocument",
                Position = 7,
                Value = nCurrentDocument
            });
        }
        catch (Exception ex)
        {
            _Logger.LogError($"AttachItemsTable.OnLink: Unexpected error {ex}");
        }
    }

    /// <summary>
    /// On double click open the Dossier
    /// </summary>
    /// <param name="args"></param>
    public void OnDoubleClick(RecordDoubleClickEventArgs<EmailElementi> args)
    {
        OnOpen(args.RowData);
    }

    /// <summary>
    /// On request to link item: check the view and show the confimation
    /// </summary>
    /// <param name="T"></param>
    public async void OnLinkItem(TipiElementi T)
    {
        if (T != null)
        {
            ComponentName = T.ViewAttributi;
            ///// TODO: TEMPORANEO SANGIACOMO
            if (!ComponentName.Contains("blz:/") && IsMSG())
                ComponentName = "blz:/Orders/MSG_RegisterOrder";
            ////  DA RIMUOVERE
            if (!ComponentName.StartsWith("blz:/"))
                IsShowUndefined = true;
        }

        if (!IsShowUndefined)
        {
            ActionSelected = T.Codice;
            ShowDossierConfirm = true;
        }

    }
}
