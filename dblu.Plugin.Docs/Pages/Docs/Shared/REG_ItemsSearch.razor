@*
    Component for showing the name of the dossier e the complete button (if available)
*@

@using dblu.Docs.Models
@using dblu.Docs.Classi
@using System.IO
@using Microsoft.AspNetCore.Components.CompilerServices
@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject dblu.Docs.Interfacce.ISoggettiService _SubjectService
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject ILogger<REG_ItemsSearch> _Logger


<Toast @ref="ToastCompleteOK" nToastType="Toast.e_ToastType.OK" nTitle="Completa email" nContent="Email completata"></Toast>
<Toast @ref="ToastCompleteKO" nToastType="Toast.e_ToastType.Fail" nTitle="Completa email" nContent="Completamento non riuscito"></Toast>

<div class="row">
    <div class="col" style="display:flex">
        <SfTextBox Placeholder="Dossier" Readonly="true" Value="@(Dossier?.Descrizione ?? "")"></SfTextBox>

    </div>
</div>

@code {

    /// <summary>
    /// Customer code
    /// </summary>
    [Parameter]
    public string nCostumerCode { get; set; }

    /// <summary>
    /// Attachment ID
    /// </summary>
    [Parameter]
    public string nAttachID { get; set; }

    /// <summary>
    /// Dossier Id
    /// </summary>
    [Parameter]
    public string nDossierID { get; set; }

    /// <summary>
    /// Current PDF docuement
    /// </summary>
    [Parameter]
    public MemoryStream nCurrentDocument { get; set; }


    /// <summary>
    /// Fires when the email has been completed
    /// </summary>
    [Parameter]
    public EventCallback<string> OnAttachCompleted { get; set; }

    /// <summary>
    /// Type of the attachment wwe are processing 
    /// </summary>
    [Parameter]
    public TipiRecordServer nRecordServer { get; set; } = TipiRecordServer.CartellaMail;

    /// <summary>
    /// If we are processing document specify witch type 
    /// </summary>
    [Parameter]
    public TipiDocumentiFile nDocumentType { get; set; } = TipiDocumentiFile.ZIP;

    /// <summary>
    /// Indicates if displaying the complete button or not
    /// </summary>
    [Parameter]
    public bool nDisplayComplete { get; set; } = false;

    /// <summary>
    /// Current Dossier
    /// </summary>
    private Fascicoli Dossier { get; set; }

    /// <summary>
    /// Previous dossier ID
    /// </summary>
    private string LastDossierID { get; set; }

    /// <summary>
    /// Toast for a positive Complete action
    /// </summary>
    private Toast ToastCompleteOK { get; set; }

    /// <summary>
    /// Toast for a negative Complete action
    /// </summary>
    private Toast ToastCompleteKO { get; set; }

    /// <summary>
    /// Redraw the component only if necessary
    /// </summary>
    protected override async void OnParametersSet()
    {
        if (LastDossierID != nDossierID && !string.IsNullOrEmpty(nDossierID))
        {
            Dossier = _MailService._fasMan.Get(nDossierID);
            LastDossierID = nDossierID;
        }
    }


}
