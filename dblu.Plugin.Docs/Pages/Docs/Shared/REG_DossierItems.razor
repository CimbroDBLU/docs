@*
    Component for managing Dossier of this mail attachment
*@

@using dblu.Portale.Plugin.Docs.ViewModels
@using dblu.Portale.Plugin.Docs.Services
@using dblu.Docs.Models
@using System.IO
@using dblu.Docs.Classi
@using Microsoft.AspNetCore.Components.CompilerServices
@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject dblu.Docs.Interfacce.ISoggettiService _SubjectService
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject ILogger<REG_DossierItems> _Logger

<REG_ItemsTable nRecordServer="@nRecordServer" nSelectedItem="@nSelectedItem" nDocumentType="@nDocumentType" @ref="@Table" nAttachID="@nAttachID" nSourceFolder="@nSourceFolder" nDossierID="@nDossierID" nAttachments="@nAttachments" nCurrentDocument="@nCurrentDocument" nCostumerCode="@nCostumerCode" OnSelectedItem="OnSelectedItemZ" OnLinkedToItem="OnLink" OnComplete="Complete" OnAttachCompleted="OnAttachCompleted" ></REG_ItemsTable>
<Toast @ref="ToastCompleteOK" nToastType="Toast.e_ToastType.OK" nTitle="Completa email" nContent="Email completata"></Toast>
<Toast @ref="ToastCompleteKO" nToastType="Toast.e_ToastType.Fail" nTitle="Completa email" nContent="Completamento non riuscito"></Toast>

@code {

    /// <summary>
    /// Attach ID
    /// </summary>
    [Parameter]
    public string nAttachID { get; set; }

    /// <summary>
    /// Costumer Code
    /// </summary>
    [Parameter]
    public string nCostumerCode { get; set; }

    /// <summary>
    /// Dossier ID
    /// </summary>
    [Parameter]
    public string nDossierID { get; set; }

    /// <summary>
    /// Type of the attachment wwe are processing
    /// </summary>
    [Parameter]
    public TipiRecordServer nRecordServer { get; set; } = TipiRecordServer.CartellaMail;

    /// <summary>
    /// If we are processing document specify witch type
    /// </summary>
    [Parameter]
    public TipiDocumentiFile nDocumentType { get; set; } = TipiDocumentiFile.ZIP;

    /// <summary>
    /// List of original attachments
    /// </summary>
    [Parameter]
    public ObservableCollection<OriginalAttachments> nAttachments { get; set; }

    /// <summary>
    /// Current PDF document in edit
    /// </summary>
    [Parameter]
    public MemoryStream nCurrentDocument { get; set; }

    /// <summary>
    /// Fire when the email attach has been completed
    /// </summary>
    [Parameter]
    public EventCallback<string> OnAttachCompleted { get; set; }

    /// <summary>
    /// Fires when a Dossier has been selected
    /// </summary>
    [Parameter]
    public EventCallback<string> OnSelectedItem { get; set; }

    /// <summary>
    /// Fires when attach has been linked to item
    /// </summary>
    [Parameter]
    public EventCallback<(string, string)> OnLinkedToItem { get; set; }

    /// <summary>
    /// Fires when the Dossier has be changed
    /// </summary>
    [Parameter]
    public EventCallback<Fascicoli> OnRefresh { get; set; }

    /// <summary>
    /// Pre-selected Item
    /// </summary>
    [Parameter]
    public string nSelectedItem{  get;  set; }

    /// <summary>
    /// Current Suorce folder for selected attach
    /// </summary>
    [Parameter]
    public string nSourceFolder { get; set; }

    /// <summary>
    /// Toast for a positive Complete action
    /// </summary>
    private Toast ToastCompleteOK { get; set; }

    /// <summary>
    /// Toast for a negative Complete action
    /// </summary>
    private Toast ToastCompleteKO { get; set; }

    /// <summary>
    /// Indicates to display or not the complete button
    /// </summary>
    public bool DisplayComplete { get; set; } = false;

    /// <summary>
    /// Reference to the items table
    /// </summary>
    private REG_ItemsTable Table { get; set; }

    /// <summary>
    /// Get current dossier
    /// </summary>
    public Fascicoli CurrentDossier => Dossier;

    /// <summary>
    /// Current Dossier
    /// </summary>
    private Fascicoli Dossier { get; set; }

    /// <summary>
    /// Previous dossier ID
    /// </summary>
    private string LastDossierID { get; set; }

    /// <summary>
    /// Redraw the component only if necessary
    /// </summary>
    protected override Task OnParametersSetAsync()
    {
        Task.Run(() =>
        {
            if (LastDossierID != nDossierID && !string.IsNullOrEmpty(nDossierID))
            {
                Dossier = _MailService._fasMan.Get(nDossierID);
                LastDossierID = nDossierID;

                InvokeAsync(() => { OnRefresh.InvokeAsync(Dossier); });
            }
            else if (string.IsNullOrEmpty(nDossierID))
            {
                Dossier = null;
                if (LastDossierID != nDossierID)
                {
                    InvokeAsync(() => { OnRefresh.InvokeAsync(null); });
                    LastDossierID = nDossierID;
                }
            }
        });

        return base.OnParametersSetAsync();
    }


    /// <summary>
    /// Refresh the items table
    /// </summary>
    public void Refresh()
    {
        Table.Refresh();
    }

    /// <summary>
    /// Complete the current email attach
    /// </summary>
    public async Task<bool> Complete()
    {
        try
        {
            Stopwatch sw = Stopwatch.StartNew();
            var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
            var User = authState.User;

            var all = _MailService._allMan.Get(nAttachID);
            if (all != null)
            {
                all.Stato = StatoAllegato.Chiuso;
                _MailService._allMan.Salva(all, false);

                _MailService._logMan.PostLog(Guid.Parse(nAttachID), TipiOggetto.ALLEGATO, TipoOperazione.Chiuso, User.Identity.Name, $"Allegato chiuso");
                ToastCompleteOK.Show();
                OnAttachCompleted.InvokeAsync(nAttachID);
                _Logger.LogInformation($"REG_DossierItems.Complete: Attach {nAttachID} has been completed in {sw.ElapsedMilliseconds} ms");
                return true;
            }
            ToastCompleteKO.Show();
        }
        catch (Exception ex)
        {
            _Logger.LogError($"REG_DossierItems.Complete: Complete fails, {ex}");
            ToastCompleteKO.Show();
        }
        return false;
    }



    /// <summary>
    /// On selection of Item, decide if complete butto has to be displayed
    /// </summary>
    /// <param name="e"></param>
    public void OnSelectedItemZ(EmailElementi e)
    {
        this.OnSelectedItem.InvokeAsync(e?.Id);
    }

    /// <summary>
    /// Forward the link event
    /// </summary>
    /// <param name="data"></param>
    public void OnLink((string Dossier, string Item) data)
    {
        OnLinkedToItem.InvokeAsync(data);
    }
}
