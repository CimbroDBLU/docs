@*
    Component for showing a table with all attachments present in an email
*@

@using dblu.Docs.Classi
@using dblu.Portale.Plugin.Docs.Services
@using dblu.Docs.Models
@using Newtonsoft.Json 
@inject IJSRuntime JSRuntime

<style>
    .Underline {
        background-color: #ff8f00;
        font-weight: bold;
    }

    .smallb {
        width: 50px;
    }
</style>

<SfGrid ID="Grid" @ref="grid" EnablePersistence="false" SelectedRowIndex="0" DataSource="@nAttachments" AllowTextWrap="true" AllowPaging="true">
    <GridEditSettings AllowAdding="false" AllowEditing="true" AllowDeleting="false" Mode="EditMode.Batch"></GridEditSettings>
    <GridPageSettings PageSize="4"></GridPageSettings>
    <GridEditSettings AllowEditing="true" Mode="EditMode.Batch" AllowEditOnDblClick="true"></GridEditSettings>
    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both"></GridSelectionSettings>
    <GridEvents OnCellEdit="OnCellEdit" QueryCellInfo="CustomizeCell" CellSelected="CellSelectHandler" TValue="OriginalAttachments"></GridEvents>
    <GridColumns>
        <GridColumn DisplayAsCheckBox="true" AllowEditing="true" HeaderText="" Field=@nameof(OriginalAttachments.IsSelected) Width="50">
            <EditTemplate>
                @{
                    var Att = (context as OriginalAttachments);
                    <SfCheckBox TChecked="bool"   @bind-Checked=@Att.IsSelected >
                    </SfCheckBox>

                }
            </EditTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(OriginalAttachments.Id) IsPrimaryKey="true" Visible="false"></GridColumn>
        <GridColumn Field=@nameof(OriginalAttachments.Name) AllowEditing="false" HeaderText="Allegato"></GridColumn>
        <GridColumn Width="80px" Field=@nameof(OriginalAttachments.IsIncluded) AllowEditing="false" DisplayAsCheckBox="true" HeaderText="Incluso"></GridColumn>
        <GridColumn Field=@nameof(OriginalAttachments.Warning) AllowEditing="false" HeaderText="Warning"></GridColumn>
        <GridColumn HeaderTextAlign=TextAlign.Left AllowEditing="false" HeaderText="" Width="60">
            <Template>
                @{
                    var Att = (context as OriginalAttachments);
                    <SfButton CssClass="smallb" OnClick="() => { Download(nAttachID, Att.Name); }" HtmlAttributes="@(new Dictionary<string, object>() { { "title", "Download" } })" IconCss="e_fa fas fa-download"></SfButton>
                }
            </Template>
        </GridColumn>
        <GridColumn HeaderTextAlign=TextAlign.Left HeaderText="" Width="60">
            <Template>
                @{
                    var Att2 = (context as OriginalAttachments);
                    <SfButton CssClass="smallb" OnClick="() => { Preview(nAttachID, Att2.Name); }" HtmlAttributes="@(new Dictionary<string, object>() { { "title", "Anteprima" } })" IconCss="e_fa fas fa-image"></SfButton>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code 
{
    /// <summary>
    /// REference to the grid itself
    /// </summary>
    public static SfGrid<OriginalAttachments> grid { get; set; }

    /// <summary>
    /// List of the attachment to show
    /// </summary>
    [Parameter]
    public ObservableCollection<OriginalAttachments> nAttachments { get; set; }

    /// <summary>
    /// Mail Attachment source of these Attachments
    /// </summary>
    [Parameter]
    public string nAttachID { get; set; }

    /// <summary>
    /// Type of the attachment wwe are processing
    /// </summary>
    [Parameter]
    public TipiRecordServer nRecordServer { get; set; } = TipiRecordServer.CartellaMail;

    /// <summary>
    /// Apply a different style if an attach has some feature that cannot coverted in pdf
    /// </summary>
    /// <param name="args"></param>
    public void CustomizeCell(QueryCellInfoEventArgs<OriginalAttachments> args)
    {
        if (args.Column.Field == "Warning" && !string.IsNullOrEmpty(args.Data.Warning))
            args.Cell.AddClass(new string[] { "Underline" });
    }

    /// <summary>
    /// Show the preview of the attach in another window
    /// </summary>
    /// <param name="AttachID">Attachment ID</param>
    /// <param name="FileName">Name of the attachment</param>
    public async void Preview(string AttachID, string FileName)
    {
        try
        {
            string Controller = "MailView";
            if (nRecordServer == TipiRecordServer.CartellaFile)
                Controller = "ZipView";
            JSRuntime.InvokeAsync<string>("open", $"/{Controller}/OpenFile?IdAllegato={AttachID}&NomeFile={FileName}", "_blank");
        }
        catch (Exception) { }
    }

    /// <summary>
    /// Start the download of the attachment
    /// </summary>
    /// <param name="AttachID">Attachment ID</param>
    /// <param name="FileName">Name of the attachment</param>
    public async void Download(string AttachID, string FileName)
    {
        try
        {
            string Controller = "MailView";
            if (nRecordServer == TipiRecordServer.CartellaFile)
                Controller = "ZipView";
            JSRuntime.InvokeVoidAsync("BlazorSetHREF", $@"/{Controller}/ApriFile?IdAllegato={AttachID}&NomeFile={FileName}");
        }
        catch (Exception) { }
    }

    /// <summary>
    /// On cell selected launch the edit (if it is 0)
    /// </summary>
    /// <param name="args"></param>
    public async void CellSelectHandler(CellSelectEventArgs<OriginalAttachments> args)
    {
        if (args.CellIndex == 0)
            grid.EditCell(args.RowIndex, "IsSelected");
    }

    /// <summary>
    /// On cell edit, enable /disable the value and refresh the grid 
    /// </summary>
    /// <param name="args"></param>
    public void OnCellEdit(CellEditArgs<OriginalAttachments> args)
    {
        if (args.ColumnName == "IsSelected")
        {
            if (nAttachments.FirstOrDefault(x => x.Id == args.Data.Id).IsSelected)
                nAttachments.FirstOrDefault(x => x.Id == args.Data.Id).IsSelected = false;
            else
                nAttachments.FirstOrDefault(x => x.Id == args.Data.Id).IsSelected = true;
            args.Cancel = true;
            grid.CloseEdit();
            grid.Refresh();
        }
    }

}
