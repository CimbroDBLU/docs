@*
    Component for showing an attached document
*@

@using Microsoft.AspNetCore.Hosting
@using Syncfusion.Blazor.PdfViewerServer
@using Syncfusion.Blazor.PdfViewer
@using System.Threading
@using dblu.Docs.Classi
@using dblu.Portale.Plugin.Docs.Classes
@using dblu.Portale.Plugin.Docs.Services
@using System.IO


@inject dblu.Portale.Plugin.Docs.Services.AllegatiService _AttachmentsService
@inject dblu.Docs.Classi.DocumentTransformationService _DocumentService
@inject ILogger<DocViewer> _Logger
@inject IJSRuntime JSRuntime
@inject IHostingEnvironment _environment

@implements IAsyncDisposable

<style>

    .fullscreen {
        z-index: 3333;
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        height: 100vh;
        width: 100vw;
    }

    .fill {
        justify-content: center;
        align-items: center;
        width: auto;
        height: auto;
    }

    .mailsized {
           width:100%;
           height: @($"{nHeight-70}px");
    }

    .mailunsized {
        width: 100%;
        height: 90vh;
    }

    .imgsized {
        max-width: 100%;
        max-height: @($"{nHeight-70}px");
        object-fit: cover;
        margin: auto;
        display: block;
    }

    .imgunsized {
        max-width: 100%;
        max-height: 100%;
        object-fit: cover;
        margin: auto;display: block;
    }

    .sized {
        width: auto;
        height: @($"{nHeight}")px;
    }

</style>

<div @onkeydown="@OnKeyDown" class="@((IsFullscreen)?"fullscreen":"sized") ">

    @if (Doc is null)
    {
        <div class="mt-2 mb-2" style=" text-align: center; ">@*<h3>Loading ... </h3>*@</div>

    }
    else if (Doc.DocType == e_DocType.PDF)
    {

        <SfToolbar>
            <ToolbarItems>
                <ToolbarItem PrefixIcon=@((IsFullscreen)?"e-exit-full-screen e-icons":"e-full-screen e-icons") TooltipText="Fullscreen" OnClick="Fullscreen"></ToolbarItem>
                @if (nAllowEdit)
                {
                    <ToolbarItem PrefixIcon="e-undo e-icons" TooltipText="Ruota a sx" OnClick="() => OnRotate(true)"></ToolbarItem>
                    <ToolbarItem PrefixIcon="e-redo e-icons" TooltipText="Ruota a dx" OnClick="() => OnRotate(false)"></ToolbarItem>
                    <ToolbarItem PrefixIcon="e-changes-reject e-icons"  TooltipText="Rimuovi pagina" OnClick="OnRemovePage"></ToolbarItem>
                }
                @if (nAllowNote || nAllowEdit)
                {
                    <ToolbarItem PrefixIcon="e-refresh e-icons" TooltipText="Ricarica" OnClick="@(async ()=>{LoadDocument(); ApplyDoc(); Viewer?.SetAnnotationModeAsync(AnnotationType.None);Viewer?.Refresh();})"></ToolbarItem>
                        <ToolbarItem PrefixIcon="e-save e-icons" TooltipText="Salva" OnClick="OnSave"></ToolbarItem>
                    <ToolbarItem Text="@Doc?.Description" TooltipText="Documento generato" Align=ItemAlign.Right></ToolbarItem>                    
                }
            </ToolbarItems>
        </SfToolbar>

        <SfPdfViewerServer EnableErrorDialog="false" Height="@sHeight" LineSettings="@LineSettings" ArrowSettings="@ArrowSettings" RectangleSettings="@RectangleSettings" CircleSettings="@CircleSettings" PolygonSettings="@PolygonSettings" InkAnnotationSettings="@InkSettings" FreeTextSettings="@FreeTextSettings" DownloadFileName="@DownloadFileName" @ref="@Viewer" ToolbarSettings="@ToolbarSettings">
                <PdfViewerEvents Created="OnPDFViewerCreated" DocumentLoadFailed="OnDocumentLoadFailed"  DocumentLoaded="OnDocumentLoaded"></PdfViewerEvents>
        </SfPdfViewerServer>        
    }
    else if (Doc.DocType == e_DocType.IMAGE)
    {
        <SfCard HtmlAttributes="@(new Dictionary<string, object>() { { "style", "height:100%;display:flex;justify-content:flex-start;" } })">
            <CardContent>
                <SfToolbar>
                    <ToolbarItems>
                        <ToolbarItem PrefixIcon=@((IsFullscreen)?"e-exit-full-screen e-icons":"e-full-screen e-icons") TooltipText="Fullscreen" OnClick="() => Fullscreen()"></ToolbarItem>
                    </ToolbarItems>
                </SfToolbar>
                <div class="mt-2 mb-2">
                    <img class="@((IsFullscreen)?"imgunsized":"imgsized")" src="data:image;base64,@(Convert.ToBase64String(Doc.Payload.ToArray()))">
                </div>
            </CardContent>
        </SfCard>
    }
    else if (Doc.DocType == e_DocType.EMAIL)
    {
        <SfCard HtmlAttributes="@(new Dictionary<string, object>() { { "style", "height:100%;display:flex;justify-content:flex-start;" } })">
            <CardContent>
                <SfToolbar>
                    <ToolbarItems>
                        <ToolbarItem PrefixIcon=@((IsFullscreen)?"e-exit-full-screen e-icons":"e-full-screen e-icons") TooltipText="Fullscreen" OnClick="() => Fullscreen()"></ToolbarItem>
                    </ToolbarItems>
                </SfToolbar>
                @if (!string.IsNullOrEmpty(Doc.AsEmail().Item1))
                {
                    <SfTextBox CssClass="@((IsFullscreen)?"mt-2 mb-2 mailunsized":"mt-2 mb-2 mailsized")"  Multiline="true" Value="@Doc.AsEmail().Item2"></SfTextBox>
                }
                else
                {
                    <iframe class="mt-2 mb-2 @((IsFullscreen)?"mailunsized":"mailsized")" srcdoc="@Doc.AsEmail().Item1"></iframe>
                }
            </CardContent>
        </SfCard>
    }
    else if (Doc.DocType == e_DocType.UNDEFINED)
    {
        <SfCard HtmlAttributes="@(new Dictionary<string, object>() { { "style", "height:100%;display:flex;justify-content:flex-start;" } })">
            <CardContent>
                <SfToolbar>
                    <ToolbarItems>
                        <ToolbarItem PrefixIcon=@((IsFullscreen)?"e-exit-full-screen e-icons":"e-full-screen e-icons") TooltipText="Fullscreen" OnClick="() => Fullscreen()"></ToolbarItem>
                    </ToolbarItems>
                </SfToolbar>
                <div class="mt-2 mb-2" style=" text-align: center; "><h3>Preview non supportata per il documento @Doc.FileName</h3></div>
                <img class="@((IsFullscreen)?"imgunsized":"imgsized")" style="margin: auto;display: block;" src="./img/unknown.png">

            </CardContent>
        </SfCard>
    }
</div>

<SfSpinner @bind-Visible="IsSpinnerVisible">
</SfSpinner>

@code {


    /// <summary>
    /// Type of Attachment to work with
    /// </summary>
    [Parameter]
    public e_SourceType nSourceType { get; set; } = e_SourceType.Attachment;

    /// <summary>
    /// Identifier for the content (Ususally Attachment ID)
    /// </summary>
    [Parameter]
    public string nDocIdentifier { get; set; }

    /// <summary>
    /// Indicate if the document can be edit(if edit is supported)
    /// </summary>
    [Parameter]
    public bool nAllowEdit { get; set; } = true;

    /// <summary>
    /// Indicate if the document support adding notes
    /// </summary>
    [Parameter]
    public bool nAllowNote { get; set; } = true;

    /// <summary>
    /// Height of the component
    /// </summary>
    [Parameter]
    public int nHeight { get; set; } = 550;

    /// <summary>
    /// Event that will be fired once the document has been loaded
    /// </summary>
    [Parameter]
    public EventCallback<List<OriginalAttachments>> OnDocumentTransformed { get; set; }

    /// <summary>
    /// PDF viewer object
    /// </summary>
    public SfPdfViewerServer Viewer;

    /// <summary>
    /// Object that work with documents
    /// </summary>
    private DocumentManager DocManager { get; set; }

    /// <summary>
    /// Current Loaded document
    /// </summary>
    public Document Doc { get; set; }

    /// <summary>
    /// Name of the file that need to be downloaded
    /// </summary>
    private string DownloadFileName { get; set; }

    /// <summary>
    /// Spinner that will be shown wile document loading
    /// </summary>
    private bool IsSpinnerVisible { get; set; }

    private string sHeight
    { 
        get 
        { 
            if(!IsFullscreen)
                return $"{nHeight - 42}px";
            return "96vh";
        }         
    }

    /// <summary>
    /// FreeTextSettings
    /// </summary>
    PdfViewerFreeTextSettings FreeTextSettings = new PdfViewerFreeTextSettings {  FontColor="#b71c1c" , DefaultText="Scrivi qui!",FontSize=16,BorderThickness=3, FontFamily="Courier", FontStyle= FontStyle.Bold};

    /// <summary>
    /// InkSettings
    /// </summary>
    PdfViewerInkAnnotationSettings InkSettings = new PdfViewerInkAnnotationSettings { Thickness=3, StrokeColor="#b71c1c" };

    /// <summary>
    /// Line Settings
    /// </summary>
    PdfViewerLineSettings LineSettings = new PdfViewerLineSettings {   FillColor="#b71c1c",Thickness=3, StrokeColor="#b71c1c"};

    /// <summary>
    /// Arrows Settigns
    /// </summary>
    PdfViewerArrowSettings ArrowSettings = new PdfViewerArrowSettings {   LineHeadStartStyle= LineHeadStyle.Arrow, LineHeadEndStyle= LineHeadStyle.None, FillColor="#b71c1c", Thickness=3 ,StrokeColor="#b71c1c"};

    /// <summary>
    /// Rectangle Settings
    /// </summary>
    PdfViewerRectangleSettings RectangleSettings = new PdfViewerRectangleSettings { StrokeColor="#b71c1c",Thickness=3 };

    /// <summary>
    /// Circle Settings
    /// </summary>
    PdfViewerCircleSettings CircleSettings = new PdfViewerCircleSettings {  StrokeColor = "#b71c1c",Thickness=3 };

    /// <summary>
    /// Poligon Settings
    /// </summary>
    PdfViewerPolygonSettings PolygonSettings = new PdfViewerPolygonSettings {StrokeColor="#b71c1c",Thickness=3 };

    /// <summary>
    /// Default configuration of the
    /// </summary>
    private PdfViewerToolbarSettings ToolbarSettings
    {
        get
        {        
            if (nAllowNote)
                return new PdfViewerToolbarSettings()
                { 

                    ShowTooltip = true,
                    AnnotationToolbarItems=new List<AnnotationToolbarItem>()
                                           {
                                            AnnotationToolbarItem.HighlightTool,
                                            AnnotationToolbarItem.UnderlineTool,
                                            AnnotationToolbarItem.StrikethroughTool,
                                            AnnotationToolbarItem.ColorEditTool,
                                            AnnotationToolbarItem.StrokeColorEditTool,
                                            AnnotationToolbarItem.ThicknessEditTool,
                                            AnnotationToolbarItem.OpacityEditTool,
                                            AnnotationToolbarItem.AnnotationDeleteTool,
                                            AnnotationToolbarItem.FreeTextAnnotationTool,
                                            AnnotationToolbarItem.FontAlignAnnotationTool,
                                            AnnotationToolbarItem.FontFamilyAnnotationTool,
                                            AnnotationToolbarItem.FontSizeAnnotationTool,
                                            AnnotationToolbarItem.FontStylesAnnotationTool,
                                            AnnotationToolbarItem.FontColorAnnotationTool,
                                            AnnotationToolbarItem.ShapeTool,                                            
                                            AnnotationToolbarItem.CommentPanelTool,
                                            AnnotationToolbarItem.InkAnnotationTool,
                                            //AnnotationToolbarItem.CalibrateTool,
                                            //AnnotationToolbarItem.HandWrittenSignatureTool,
                                            },                    
                    ToolbarItems = new List<Syncfusion.Blazor.PdfViewer.ToolbarItem>()
                    {
                            Syncfusion.Blazor.PdfViewer.ToolbarItem.PageNavigationTool,
                            Syncfusion.Blazor.PdfViewer.ToolbarItem.MagnificationTool,
                            Syncfusion.Blazor.PdfViewer.ToolbarItem.SelectionTool,
                            Syncfusion.Blazor.PdfViewer.ToolbarItem.PanTool,
                            Syncfusion.Blazor.PdfViewer.ToolbarItem.UndoRedoTool,
                            Syncfusion.Blazor.PdfViewer.ToolbarItem.CommentTool,
                            Syncfusion.Blazor.PdfViewer.ToolbarItem.AnnotationEditTool,
                            Syncfusion.Blazor.PdfViewer.ToolbarItem.SearchOption,
                            Syncfusion.Blazor.PdfViewer.ToolbarItem.PrintOption,
                            Syncfusion.Blazor.PdfViewer.ToolbarItem.DownloadOption
                     }
                };

            return new PdfViewerToolbarSettings()
            {
                ShowTooltip = true,
                ToolbarItems = new List<Syncfusion.Blazor.PdfViewer.ToolbarItem>()
                 {
                              Syncfusion.Blazor.PdfViewer.ToolbarItem.PageNavigationTool,
                              Syncfusion.Blazor.PdfViewer.ToolbarItem.MagnificationTool,
                              Syncfusion.Blazor.PdfViewer.ToolbarItem.SelectionTool,
                              Syncfusion.Blazor.PdfViewer.ToolbarItem.PanTool,
                              Syncfusion.Blazor.PdfViewer.ToolbarItem.SearchOption,
                              Syncfusion.Blazor.PdfViewer.ToolbarItem.PrintOption,
                              Syncfusion.Blazor.PdfViewer.ToolbarItem.DownloadOption
                            }
            };
        }
    }


    /// <summary>
    /// On init preset the PDF viewer
    /// </summary>
    /// <returns></returns>
    protected override  Task OnInitializedAsync()
    {
        DocManager = new DocumentManager(_AttachmentsService, _DocumentService, _Logger,_environment.WebRootPath);
        Doc = new Document("", new MemoryStream(),e_DocType.PDF);
        return base.OnInitializedAsync();
    }

    /// <summary>
    /// On Set parameter, reload the control
    /// </summary>
    protected override Task OnParametersSetAsync()
    { 
        //Non e' il caso di aggiornare.
        if (DocManager != null && DocManager.DocIdentifier == nDocIdentifier && DocManager.SourceType == nSourceType)
            return base.OnParametersSetAsync();

        IsSpinnerVisible = true;
        Doc = new Document("", new MemoryStream(),e_DocType.PDF);        
        IsSpinnerVisible = false;

        Task.Run(() =>
        {
            lock (this)
            {
                LoadDocument();
            }
            IsSpinnerVisible = false;
            InvokeAsync(() => ApplyDoc());
        });
        return base.OnParametersSetAsync();
    }


    /// <summary>
    /// Copy the pdf on the pdf viewer
    /// </summary>
    private void ApplyDoc()
    {

        if (Viewer != null && Doc != null && Doc.Payload != null && Doc.Payload.Length != 0)
        {
            lock (this)
            {
                DownloadFileName = "";
                string base64String = Convert.ToBase64String(Doc.Payload.ToArray());
                Viewer.LoadAsync("data:application/DocManager;base64," + base64String, null);
            }
        }

        if (Viewer != null && Doc != null && Doc.Payload != null && Doc.Payload.Length == 0)
            Viewer.UnloadAsync();

    }


    /// <summary>
    /// Open the Document, and once done , redraw
    /// </summary>
    private async void LoadDocument()
    {
        Doc = await DocManager.Load(nSourceType, nDocIdentifier);
        InvokeAsync(() =>  StateHasChanged());
    }

    /// <summary>
    /// On load failed
    /// </summary>
    private void OnDocumentLoadFailed()
    {
    }

    /// <summary>
    /// On document loaded , set the Download file name according
    /// </summary>
    private void OnDocumentLoaded()
    {
        DownloadFileName = Doc.FileName;
        if(!DownloadFileName.ToLower().EndsWith(".pdf"))
        DownloadFileName = Doc.FileName+".pdf";
        OnDocumentTransformed.InvokeAsync(Doc.SourceAttachments);
    }

    /// <summary>
    /// Once the pdf viewer control is created, it can be load the document (reset it , if document was ready before the component)
    /// </summary>
    private  void OnPDFViewerCreated()
    {
        _Logger.LogDebug("DocViewer.OnPDFViewerCreated: PDF Viewer created");
        ApplyDoc();
    }

    /// <summary>
    /// Save the changes into the document
    /// </summary>
    private async Task OnSave()
    {
        IsSpinnerVisible = true;
        await Viewer.SetAnnotationModeAsync(AnnotationType.None);

        Doc = await DocManager.Save(new MemoryStream(await Viewer.GetDocument()));
        ApplyDoc();

        IsSpinnerVisible = false;
    }

    /// <summary>
    /// Remove selected page (Only PDF)
    /// </summary>
    private async void OnRemovePage()
    {
        await Viewer.SetAnnotationModeAsync(AnnotationType.None);

        MemoryStream IN = null;
        IN = new MemoryStream(await Viewer.GetDocument());
        Doc = await DocManager.RemovePage(Viewer.CurrentPageNumber, IN);

        ApplyDoc();

    }

    /// <summary>
    /// Indicate if we are in full screen
    /// </summary>
    private bool IsFullscreen { get; set; } = false;

    /// <summary>
    /// Set the control in full screen
    /// </summary>
    private async  void Fullscreen()
    {
        IsFullscreen = !IsFullscreen;
        if (IsFullscreen)
        {

            var module = await Module;
            await module.InvokeVoidAsync("disable_scroll");          
            ApplyDoc(); Viewer?.SetAnnotationModeAsync(AnnotationType.None);
            Viewer?.Refresh();
        }
        else
        {
            var module = await Module;
            await module.InvokeVoidAsync("enable_scroll");
            
            ApplyDoc(); Viewer?.SetAnnotationModeAsync(AnnotationType.None);
            Viewer?.Refresh();
        }

    }

    /// <summary>
    /// We toggle fullscreen on key press
    /// </summary>
    /// <param name="e"></param>
    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape" && IsFullscreen)
            Fullscreen();

        if (e.Key == "F" && e.ShiftKey && !IsFullscreen)
            Fullscreen();
    }

    /// <summary>
    /// Javascript Runtime Module
    /// </summary>
    private Task<IJSObjectReference> _module;

    /// <summary>
    /// Javascript Runtime Module
    /// </summary>
    private Task<IJSObjectReference> Module => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Scripts/docviewer.js").AsTask();

    /// <summary>
    /// Dispose the javascript module
    /// </summary>
    /// <returns></returns>
    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            var module = await _module;
            module.DisposeAsync();
        }
    }

    /// <summary>
    /// Rotate the page
    /// </summary>
    /// <param name="Left">True if rotation is in left, otherwise right</param>
    private async Task OnRotate(bool Left)
    {
        await Viewer.SetAnnotationModeAsync(AnnotationType.None);
        MemoryStream IN = new MemoryStream(await Viewer.GetDocument());
        if (Left)
            Doc = await DocManager.RotateLeft(Viewer.CurrentPageNumber, IN);
        else
            Doc = await DocManager.RotateRight(Viewer.CurrentPageNumber, IN);

        ApplyDoc();
    }

}
