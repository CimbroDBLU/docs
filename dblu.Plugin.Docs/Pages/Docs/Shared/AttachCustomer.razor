@*
    Component for managing the costumer part of the Attachment
*@
@using System.IO
@using dblu.Portale.Plugin.Docs.Services
@using dblu.Docs.Interfacce

<div class="row">
    <div class="col">
        <AttachCustomerSearch nCostumerCode="@nCostumerCode" OnLinkedToCostumer="OnLinkCostumer" nReadOnly="@nReadOnly" OnLinkedToItem="OnLink" nAttachID="@nAttachID" nAttachments="@nAttachments" nCurrentDocument="@nCurrentDocument"></AttachCustomerSearch>
    </div>
</div>
@if (!nReadOnly)
{
    <div class="row mt-2">
        <div class="col">
            <AttachOpenItemsTable nCustomerCode="@nCostumerCode"></AttachOpenItemsTable>
        </div>
    </div>
}


@code {

    /// <summary>
    /// Costumer code
    /// </summary>
    [Parameter]
    public string nCostumerCode { get; set; }

    /// <summary>
    /// Attachment ID
    /// </summary>
    [Parameter]
    public string nAttachID { get; set; }

    /// <summary>
    /// List of the original attachment coming from the email
    /// </summary>
    [Parameter]
    public ObservableCollection<OriginalAttachments> nAttachments { get; set; }

    /// <summary>
    /// Currend PDF document in edit
    /// </summary>
    [Parameter]
    public MemoryStream nCurrentDocument { get; set; }

    /// <summary>
    /// Fires when attach has been linked to item
    /// </summary>
    [Parameter]
    public EventCallback<(string, string)> OnLinkedToItem { get; set; }

    /// <summary>
    /// Indicates if is possible to change user/order
    /// </summary>
    [Parameter]
    public bool nReadOnly { get; set; } = false;

    /// <summary>
    /// Fires when a costumer has been selected
    /// </summary>
    [Parameter]
    public EventCallback<ISoggetti> OnLinkedToCostumer { get; set; }

    /// <summary>
    /// Forward the link event
    /// </summary>
    /// <param name="data"></param>
    public async void OnLink((string Dossier, string Item) data)
    {
        await OnLinkedToItem.InvokeAsync(data);
    }

    /// <summary>
    /// Forward the link event
    /// </summary>
    /// <param name="data"></param>
    public async void OnLinkCostumer(ISoggetti Costumer)
    {
        await OnLinkedToCostumer.InvokeAsync(Costumer);
    }
}
