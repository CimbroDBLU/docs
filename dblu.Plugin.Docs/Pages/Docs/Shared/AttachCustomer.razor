@*
    Component for managing the costumer part of the Attachment
*@
@using System.IO
@using dblu.Portale.Plugin.Docs.Services
@using dblu.Portale.Plugin.Docs.Pages.Mail.Shared
@using dblu.Docs.Interfacce
@inject dblu.Docs.Interfacce.ISoggettiService _SubjectService
@inject ILogger<AttachCustomer> _Logger
<div>
@if (ShowCostumerSel)
{
    <div class="row">
        <div class="col">
            <MailCostumerSelectionPopUp @ref="@CustomerSelector" nCostumers="@nCostumers" OnExitPressed="@(()=>OnSelectedCostumer())" OnClose="@(()=>OnSelectedCostumer())" OnSelectPressed="@(()=> OnSelectedCostumer(true))"></MailCostumerSelectionPopUp>
        </div>
    </div>
}
else
{            
    <div class="row">
        <div class="col">
            <SfSpinner @ref="Spin">
            </SfSpinner>
            <AttachCustomerSearch nCostumerCode="@nCostumerCode" OnLinkedToCostumer="OnLinkCostumer" nReadOnly="@nReadOnly" nAttachID="@nAttachID" ></AttachCustomerSearch>
        </div>
    </div>
    @if (!nReadOnly)
    {
        <div class="row mt-2">
            <div class="col">
                <AttachOpenItemsTable nCustomerCode="@nCostumerCode" OnOpenItems="OnOpenItems"></AttachOpenItemsTable>
            </div>
        </div>
    }
}

</div>

@code {

    /// <summary>
    /// Costumer code
    /// </summary>
    [Parameter]
    public string nCostumerCode { get; set; }

    /// <summary>
    /// Indicates if is possible to change user/order
    /// </summary>
    [Parameter]
    public bool nReadOnly { get; set; } = false;

    /// <summary>
    /// Fires when a costumer has been selected
    /// </summary>
    [Parameter]
    public EventCallback<ISoggetti> OnLinkedToCostumer { get; set; }

    /// <summary>
    /// Fires the number on open items loded regarding this costumer
    /// </summary>
    [Parameter]
    public EventCallback<int> OnOpenItems { get; set; }

    /// <summary>
    /// Attachment ID
    /// </summary>
    [Parameter]
    public string nAttachID { get; set; }


    private ObservableCollection<ISoggetti> nCostumers { get; set; }

    private bool  ShowCostumerSel { get; set; } = false;

    [Parameter]
    public string Sender { get; set; }

    /// <summary>
    /// Dialog for selecting the costumer from email
    /// </summary>
    private MailCostumerSelectionPopUp CustomerSelector { get; set; }

    private SfSpinner Spin{ get; set; }

    public string PrevMittente { get; set; } = "";


    protected async override Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(nCostumerCode))
        {
            if (Sender != PrevMittente)
            {
                if(Spin!=null)
                    await Spin.ShowAsync();
                InvokeAsync(() =>
                {
                   
                    List<ISoggetti> Costumers = _SubjectService.GetSoggettiByMail(Sender);
                    _Logger.LogDebug($"Inbox[MAIL].OnSelectAttach: {Costumers.Count} costumers retrived for {Sender}");
                    if (Costumers.Count > 1)
                    {
                        ShowCostumerSel = true;
                        nCostumers = new ObservableCollection<ISoggetti>(Costumers);
                    }
                    else
                    {
                        OnLinkCostumer(Costumers?.FirstOrDefault());
                        ShowCostumerSel = false;
                    }
                    PrevMittente = Sender;
                })
                .ContinueWith(T=> {if(Spin!=null) Spin.HideAsync();});

            }
        }
        else
        { ShowCostumerSel = false; PrevMittente = Sender; }
    }

    /// <summary>
    /// Forward the link event
    /// </summary>
    /// <param name="data"></param>
    public async void OnLinkCostumer(ISoggetti Costumer)
    {
        await OnLinkedToCostumer.InvokeAsync(Costumer);
    }
    /// <summary>
    /// On closing dialog, change the visible value and  evnetually link the customer
    /// </summary>
    /// <param name="Save">True id the customer must be linked to</param>
    public async void OnSelectedCostumer(bool Save = false)
    {
        ShowCostumerSel = false;
        if (Save && CustomerSelector.SelectedCostumer != null)
            OnLinkCostumer(CustomerSelector.SelectedCostumer);

    }
}
