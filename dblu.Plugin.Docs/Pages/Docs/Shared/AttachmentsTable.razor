@*
    Component for showing a list of attachments
*@

@using dblu.Docs.Classi
@using dblu.Docs.Models
@inject dblu.Portale.Plugin.Docs.Services.AllegatiService _ele
@inject ILogger<AttachmentsTable> _Logger

<style>

    .smallb {
        width: 50px;
    }

    .smallicon_mail {
        width: 50px;
        background: #4dd0e1;
    }

    .smallicon_zip {
        width: 50px;
        background: #9ccc65;
    }

   .smallicon_pdf {
        width: 50px;
        background: #ffca28;
    }
   .smallicon_img {
        width: 50px;
        background: #ce93d8;
    }

   .smallicon_doc {
        width: 50px;
        background: #bcaaa4;
    }

</style>


<SfGrid @ref="@Grid" ID="@($"Attachments_{nID}")"  EnablePersistence="@(nID != "unset")"  AllowSorting="true"  DataSource="@ShowedAttachments" AllowTextWrap="true" AllowPaging="true" Toolbar="@Tool">
    <GridEditSettings AllowAdding="false"  AllowEditing="@nEnableEdit" AllowDeleting="false" Mode="EditMode.Normal"></GridEditSettings>
    <GridPageSettings PageSizes="true" PageSize="nPageSize"></GridPageSettings>
    <GridEvents TValue="viewAllegati" OnActionComplete="OnActionCompleted" RowSelected="OnRecordSelect" OnToolbarClick="OnToolbarClick" OnRecordDoubleClick="OnDoubleClick"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(viewAllegati.IdAllegato) IsPrimaryKey="true" Visible="false"></GridColumn>
          <GridColumn HeaderTextAlign=TextAlign.Left HeaderText="Tipo" Width="80">
                <Template>
                    @{
                    var Attach = (context as viewAllegati);
                    if (Attach.Tipo == "FILE")
                    {
                        if(Attach.NomeFile.ToLower().EndsWith("pdf"))
                        {
                            <SfButton CssClass="smallicon_pdf"  HtmlAttributes="@(new Dictionary<string, object>() { { "title", "Documento pdf" } })" IconCss="e_fa far fa-file-pdf"></SfButton>
                        }
                        else if(Attach.NomeFile.ToLower().EndsWith("jpg") || Attach.NomeFile.ToLower().EndsWith("png") || Attach.NomeFile.ToLower().EndsWith("jpeg"))
                        {
                            <SfButton CssClass="smallicon_img"  HtmlAttributes="@(new Dictionary<string, object>() { { "title", "Immagine" } })" IconCss="e_fa far fa-image"></SfButton>
                        }
                        else
                            {
                            <SfButton CssClass="smallicon_doc"  HtmlAttributes="@(new Dictionary<string, object>() { { "title", "File" } })" IconCss="e_fa far fa-file"></SfButton>
                            }
                    }
                    else if (Attach.Tipo == "EMAIL")
                    {
                        <SfButton CssClass="smallicon_mail"  HtmlAttributes="@(new Dictionary<string, object>() { { "title", "Email" } })" IconCss="e_fa fas fa-envelope"></SfButton>
                    }
                    else if (Attach.Tipo == "ZIP")
                    {
                        <SfButton CssClass="smallicon_zip"  HtmlAttributes="@(new Dictionary<string, object>() { { "title", "File Zip" } })" IconCss="e_fa fas fa-file-archive"></SfButton>
                    }
                }
                </Template>
            </GridColumn>
        <GridColumn Width="250" Field=@nameof(viewAllegati.Descrizione) HeaderText="Descrizione" AllowEditing="true" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Width="250" Field=@nameof(viewAllegati.NomeFile) HeaderText="File" AllowEditing="false"  AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo1) HeaderText="@Cols[0].Des" Visible="@Cols[0].Visible"   AllowEditing="true" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo2) HeaderText="@Cols[1].Des" Visible="@Cols[1].Visible"   AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo3) HeaderText="@Cols[2].Des" Visible="@Cols[2].Visible"   AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo4) HeaderText="@Cols[3].Des" Visible="@Cols[3].Visible"   AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo5) HeaderText="@Cols[4].Des" Visible="@Cols[4].Visible"   AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo6) HeaderText="@Cols[5].Des" Visible="@Cols[5].Visible"   AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo7) HeaderText="@Cols[6].Des" Visible="@Cols[6].Visible"   AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo8) HeaderText="@Cols[7].Des" Visible="@Cols[7].Visible"   AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo9) HeaderText="@Cols[8].Des" Visible="@Cols[8].Visible"  AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo10) HeaderText="@Cols[9].Des" Visible="@Cols[8].Visible"  AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>

        @if (nEnableDownload)
        {
            <GridColumn HeaderTextAlign=TextAlign.Left HeaderText="" Width="60">
                <Template>
                    @{
                        var Attach = (context as viewAllegati);
                        <SfButton CssClass="smallb" OnClick="() => OnDownload(Attach)" HtmlAttributes="@(new Dictionary<string, object>() { { "title", "Download" } })" IconCss="e_fa fas fa-download"></SfButton>
                    }
                </Template>
            </GridColumn>
        }

        @if (nEnableOpen)
        {
            <GridColumn HeaderTextAlign=TextAlign.Left HeaderText="" Width="60">
                <Template>
                    @{
                         var Attach = (context as viewAllegati);
                        <SfButton CssClass="smallb" OnClick="() => OnOpen(Attach)" HtmlAttributes="@(new Dictionary<string, object>() { { "title", "Apri" } })" IconCss="e_fa fa-folder-open"></SfButton>
                    }
                </Template>
            </GridColumn>
        }
    </GridColumns>
</SfGrid>

<UploadFilesDialog nTitle="Aggiungi allegati" nText="Allegati:" nShowDialog="@ShowDialog" OnUploadPressed="OnUpload" OnClose="OnCloseDialog" OnExitPressed="OnCloseDialog"></UploadFilesDialog>

<QuestionDialog nShowDialog="ShowConfirm" nText="Confermi la cancellazione dell'allegato selezionato?" nTitle="Conferma" OnNoPressed="OnCloseDialogConfirm" OnClose="OnCloseDialogConfirm" OnExitPressed="OnCloseDialogConfirm" OnYesPressed="DeleteAttach"></QuestionDialog>

@code
{

    /// <summary>
    /// Id of the component
    /// </summary>
    [Parameter]
    public string nID { get; set; } = "unset";

    /// <summary>
    /// Indicates if is to enable download must be activated
    /// </summary>
    [Parameter]
    public bool nEnableDownload { get; set; } = true;

    /// <summary>
    /// Indicates if is to enable open has to be activated
    /// </summary>
    [Parameter]
    public bool nEnableOpen { get; set; } = true;

    /// <summary>
    /// Indicates if is to enable the adding of an attachment
    /// </summary>
    [Parameter]
    public bool nEnableAdd { get; set; } = true;

    /// <summary>
    /// Indicates if is to enable the edit of an attachment
    /// </summary>
    [Parameter]
    public bool nEnableEdit { get; set; } = true;

    /// <summary>
    /// Indicates  if is to enable the remove of an attachment
    /// </summary>
    [Parameter]
    public bool nEnableRemove { get; set; } = false;

    /// <summary>
    /// Page size
    /// </summary>
    [Parameter]
    public int nPageSize { get; set; } = 5;

    /// <summary>
    /// Item  that contains the attachs
    /// </summary>
    [Parameter]
    public Elementi nItem { get; set; }

    /// <summary>
    /// Attachments (all)
    /// </summary>
    private List<viewAllegati> Attachments { get; set; } = new();

    /// <summary>
    /// Attachments current showed
    /// </summary>
    private List<viewAllegati> ShowedAttachments { get; set; } = new();

    /// <summary>
    /// Fires when open an attachment
    /// </summary>
    [Parameter]
    public EventCallback<viewAllegati> OnOpenAttachment { get; set; }

    /// <summary>
    /// Fires when an attach is selected
    /// </summary>
    [Parameter]
    public EventCallback<viewAllegati> OnSelectAttachment { get; set; }

    [Parameter]
    public EventCallback<viewAllegati> OnEditAttachment { get; set; }

    /// <summary>
    /// Fire on download attach
    /// </summary>
    [Parameter]
    public EventCallback<viewAllegati> OnDownloadAttachment { get; set; }

    /// <summary>
    /// Fires on remove attach
    /// </summary>
    [Parameter]
    public EventCallback<viewAllegati> OnRemoveAttachment { get; set; }

    /// <summary>
    /// Fire when add an attach is requested
    /// </summary>
    [Parameter]
    public EventCallback<List<dblu.Portale.Core.UI.UploadFilesDialog.UploadedFile>> OnAddRequested { get; set; }

    /// <summary>
    /// Show all attachments  (also eml/zip normally hidden)
    /// </summary>
    [Parameter]
    public  bool nShowAll { get; set; } = false;

    /// <summary>
    /// Reference to the GRID
    /// </summary>
    private SfGrid<viewAllegati> Grid;

    /// <summary>
    /// Indicates if the uploading dialog has to be showed
    /// </summary>
    private bool ShowDialog { get; set; } = false;

    /// <summary>
    /// List of custom columns of the attachment
    /// </summary>
    private List<Colonna> Cols { get; set; } = new List<Colonna>();

    /// <summary>
    /// Show confirm dialog
    /// </summary>
    private bool ShowConfirm { get; set; } = false;

    /// <summary>
    /// Render fragment for drawing a button into a toogle butto into bar
    /// </summary>
    private RenderFragment Button =>  
    @<div style="display:flex;"><label class="mr-2">Mostra tutti</label><SfSwitch TChecked="Boolean" Checked="@nShowAll" CheckedChanged="ToogleChanged" ></SfSwitch></div>
    ;

    /// <summary>
    /// Old selected item
    /// </summary>
    private Elementi OldItem { get; set; } = null;

    /// <summary>
    /// Show all ort partial elements
    /// </summary>
    public void ToogleChanged()
    {
        nShowAll = !nShowAll;
        if (nShowAll)
            ShowedAttachments = Attachments.OrderByDescending(x=>x.DataC).ToList();
        else 
            ShowedAttachments = Attachments.Where(x => x.Tipo == "FILE").OrderByDescending(x=>x.DataC).ToList();
    }

    /// <summary>
    /// List of the buttons on toolbar of the grid of attributes
    /// </summary>
    private List<Object> Tool
    {
        get
        {
            List<Object> t = new();
            if (nEnableAdd) t.Add(new ToolbarItem() {  Id = "New",  Text = "Nuovo", TooltipText = "Nuovo", PrefixIcon = "e-add" });
            if (nEnableEdit)
            {
                t.Add("Edit");
                t.Add("Cancel");
                t.Add("Update");
            }
            if (nEnableRemove) t.Add(new ToolbarItem() { Id = "Delete", Text = "Elimina", TooltipText = "Elimina", PrefixIcon = "e-delete" });
            t.Add(new ToolbarItem()
                {
                    Template = Button,
                    Id = "button1",
                    TooltipText = "",
                    Align = ItemAlign.Right,
                    Type = ItemType.Button,
                    CssClass = ""
                });
            return t;
        }
    }

    /// <summary>
    /// Send the Edit event when a attach has been changed
    /// </summary>
    /// <param name="args"></param>
    public void OnActionCompleted(ActionEventArgs<viewAllegati> args)
    {
        if(args.RequestType==Syncfusion.Blazor.Grids.Action.Save)
            OnEditAttachment.InvokeAsync(args.Data);
    }

    /// <summary>
    /// Reloadign the attachments of the ite,m
    /// </summary>
    public void Refresh()
    {
        if (nItem != null)
        {
            Stopwatch SW = Stopwatch.StartNew();
            Attachments = _ele.GetvAllegatiElemento(nItem.Id);
            if (nShowAll)
                ShowedAttachments = Attachments.OrderByDescending(x=>x.DataC).ToList();
            else 
                ShowedAttachments = Attachments.Where(x => x.Tipo == "FILE").OrderByDescending(x=>x.DataC).ToList();



            _Logger.LogInformation($"AttachmentsTable.Refresh: Loaded {Attachments.Count} attachs in {SW.ElapsedMilliseconds} ms");
        }
        else
        {
            Attachments = new();
            ShowedAttachments = new();

        }
        OldItem = nItem;
    }

    /// <summary>
    /// Select everitime the fist pdf found
    /// </summary>
    /// <param name="FirstRender"></param>
    protected override void OnAfterRender(bool FirstRender)
   {
       if(FirstRender)
       {
            var Sel=ShowedAttachments.OrderByDescending(x=>x.DataC).FirstOrDefault(x => x.Tipo == "FILE" && x.NomeFile.ToLower().EndsWith("pdf"));
            if (Sel != null)
                Grid?.SelectRowAsync((double)ShowedAttachments.IndexOf(Sel));
       }
   }

    /// <summary>
    /// On Init loard the grid
    /// </summary>
    protected override void OnInitialized()
    {
        Cols = _ele.GetColonne("vALLEGATO");
        Refresh();
    }

    /// <summary>
    /// On Init component, get custom columns
    /// </summary>
    protected override void OnParametersSet()
    {
        if (OldItem != nItem)
        Refresh();
    }

    /// <summary>
    /// On Open forward the event
    /// </summary>
    /// <param name="Attach"></param>
    private async void OnOpen(viewAllegati Attach)
    {
        OnOpenAttachment.InvokeAsync(Attach);
    }

    /// <summary>
    /// On double clik forward the open, (if available)
    /// </summary>
    /// <param name="args"></param>
    public void OnDoubleClick(RecordDoubleClickEventArgs<viewAllegati> args)
    {
        if (nEnableOpen)
            OnOpenAttachment.InvokeAsync(args.RowData);
    }

    /// <summary>
    /// On record select forward the selection
    /// </summary>
    /// <param name="args"></param>
    public void OnRecordSelect(RowSelectEventArgs<viewAllegati> args)
    {
         OnSelectAttachment.InvokeAsync(args.Data);
    }

    /// <summary>
    /// On Download forward the event
    /// </summary>
    /// <param name="ID"></param>
    public void OnDownload(viewAllegati A)
    {
        OnDownloadAttachment.InvokeAsync(A);
    }

    /// <summary>
    /// On toolbar click manage the events
    /// </summary>
    /// <param name="args"></param>
    public async void OnToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "New")
        {
            ShowDialog = true;
        }
        if (args.Item.Id == "Delete")
        {
            viewAllegati A = (await Grid.GetSelectedRecords()).FirstOrDefault();
            if (A != null)
                ShowConfirm = true;
        }
    }

    /// <summary>
    /// Chiude il dialogo di upload
    /// </summary>
    public void OnCloseDialog()
    { ShowDialog = false; }

    /// <summary>
    /// Delete selected items
    /// </summary>
    private async void DeleteAttach()
    {
        ShowConfirm = false;
        viewAllegati A = (await Grid.GetSelectedRecords()).FirstOrDefault();
        if (A != null)
            await OnRemoveAttachment.InvokeAsync(A);
    }

    /// <summary>
    /// Close the confirmation dialog
    /// </summary>
    public void OnCloseDialogConfirm()
    {
        ShowConfirm = false;
    }

    /// <summary>
    /// On upload requested forward the event
    /// </summary>
    /// <param name="files"></param>
    public void OnUpload(List<dblu.Portale.Core.UI.UploadFilesDialog.UploadedFile> files)
    {
        OnAddRequested.InvokeAsync(files);
        ShowDialog = false;
    }
}