@*
    Component for showing a list of attachments
*@

@using dblu.Docs.Classi
@using dblu.Docs.Models
@inject dblu.Portale.Plugin.Docs.Services.AllegatiService _ele

<style>

    .smallb {
        width: 50px;
    }
</style>


<SfGrid @ref="@Grid" ID="@($"Attachments_{nID}")" EnablePersistence="@(nID != "unset")" SelectedRowIndex="0" DataSource="@nAttachments" AllowTextWrap="true" AllowPaging="true" Toolbar="@Tool">
    <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="EditMode.Batch"></GridEditSettings>
    <GridPageSettings PageSize="nPageSize"></GridPageSettings>
    <GridEvents TValue="viewAllegati" RowSelected="OnRecordSelect" OnToolbarClick="OnToolbarClick" OnRecordDoubleClick="OnDoubleClick"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(viewAllegati.IdAllegato) IsPrimaryKey="true" Visible="false"></GridColumn>
        <GridColumn Width="150" Field=@nameof(viewAllegati.Descrizione) HeaderText="Descrizione" AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Width="150" Field=@nameof(viewAllegati.NomeFile) HeaderText="File" AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo1) HeaderText="@Cols[0].Des" Visible="@Cols[0].Visible" AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo2) HeaderText="@Cols[1].Des" Visible="@Cols[1].Visible" AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo3) HeaderText="@Cols[2].Des" Visible="@Cols[2].Visible" AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo4) HeaderText="@Cols[3].Des" Visible="@Cols[3].Visible" AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo5) HeaderText="@Cols[4].Des" Visible="@Cols[4].Visible" AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo6) HeaderText="@Cols[5].Des" Visible="@Cols[5].Visible" AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo7) HeaderText="@Cols[6].Des" Visible="@Cols[6].Visible" AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo8) HeaderText="@Cols[7].Des" Visible="@Cols[7].Visible" AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo9) HeaderText="@Cols[8].Des" Visible="@Cols[8].Visible" AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>
        <GridColumn Field=@nameof(viewAllegati.Campo10) HeaderText="@Cols[9].Des" Visible="@Cols[8].Visible" AllowEditing="false" AllowSorting="true" AllowFiltering="false" AllowSearching="false"></GridColumn>

        @if (nEnableDownload)
        {
            <GridColumn HeaderTextAlign=TextAlign.Left HeaderText="" Width="60">
                <Template>
                    @{
                        var IDd = (context as viewAllegati).IdAllegato;
                        <SfButton CssClass="smallb" OnClick="() => OnDownload(IDd)" HtmlAttributes="@(new Dictionary<string, object>() { { "title", "Download" } })" IconCss="e_fa fas fa-download"></SfButton>
                    }
                </Template>
            </GridColumn>
        }

        @if (nEnableOpen)
        {
            <GridColumn HeaderTextAlign=TextAlign.Left HeaderText="" Width="60">
                <Template>
                    @{
                        var ID = (context as viewAllegati).IdAllegato;
                        <SfButton CssClass="smallb" OnClick="() => OnOpen(ID)" HtmlAttributes="@(new Dictionary<string, object>() { { "title", "Apri" } })" IconCss="e_fa fa-folder-open"></SfButton>
                    }
                </Template>
            </GridColumn>
        }
    </GridColumns>
</SfGrid>

<UploadFilesDialog nTitle="Aggiungi allegati" nText="Allegati:" nShowDialog="@ShowDialog" OnUploadPressed="OnUpload" OnClose="OnCloseDialog" OnExitPressed="OnCloseDialog"></UploadFilesDialog>

<QuestionDialog nShowDialog="ShowConfirm" nText="Confermi la cancellazione dell'allegato selezionato?" nTitle="Conferma" OnNoPressed="OnCloseDialogConfirm" OnClose="OnCloseDialogConfirm" OnExitPressed="OnCloseDialogConfirm" OnYesPressed="DeleteAttach"></QuestionDialog>

@code
{

    /// <summary>
    /// Id of the component
    /// </summary>
    [Parameter]
    public string nID { get; set; } = "unset";

    /// <summary>
    /// Indicates if is to enable download must be activated
    /// </summary>
    [Parameter]
    public bool nEnableDownload { get; set; } = true;

    /// <summary>
    /// Indicates if is to enable open has to be activated
    /// </summary>
    [Parameter]
    public bool nEnableOpen { get; set; } = true;

    /// <summary>
    /// Indicates if is to enable the adding of an attachment
    /// </summary>
    [Parameter]
    public bool nEnableAdd { get; set; } = true;

    /// <summary>
    /// Indicates  if is to enable the remove of an attachment
    /// </summary>
    [Parameter]
    public bool nEnableRemove { get; set; } = false;

    /// <summary>
    /// Page size
    /// </summary>
    [Parameter]
    public int nPageSize { get; set; } = 4;

    /// <summary>
    /// Attachments list
    /// </summary>
    [Parameter]
    public ObservableCollection<viewAllegati> nAttachments { get; set; } = new();

    /// <summary>
    /// Fires when open an attachment
    /// </summary>
    [Parameter]
    public EventCallback<Guid> OnOpenAttachment { get; set; }

    /// <summary>
    /// Fires when an attach is selected
    /// </summary>
    [Parameter]
    public EventCallback<Guid> OnSelectAttachment { get; set; }

    /// <summary>
    /// Fire on download attach
    /// </summary>
    [Parameter]
    public EventCallback<Guid> OnDownloadAttachment { get; set; }

    /// <summary>
    /// Fires on remove attach
    /// </summary>
    [Parameter]
    public EventCallback<Guid> OnRemoveAttachment { get; set; }

    /// <summary>
    /// Fire when add an attach is requested
    /// </summary>
    [Parameter]
    public EventCallback<List<dblu.Portale.Core.UI.UploadFilesDialog.UploadedFile>> OnAddRequested { get; set; }

    /// <summary>
    /// Reference to the GRID
    /// </summary>
    private SfGrid<viewAllegati> Grid;

    /// <summary>
    /// Indicates if the uploading dialog has to be showed
    /// </summary>
    private bool ShowDialog { get; set; } = false;

    /// <summary>
    /// List of custom columns of the attachment
    /// </summary>
    private List<Colonna> Cols { get; set; } = new List<Colonna>();

    /// <summary>
    /// Show confirm dialog
    /// </summary>
    private bool ShowConfirm { get; set; } = false;

    /// <summary>
    /// List of the buttons on toolbar of the grid of attributes
    /// </summary>
    private List<Object> Tool
    {
        get
        {
            List<Object> t = new();
            if (nEnableAdd) t.Add(new ItemModel() { Id = "New", Text = "Nuovo", TooltipText = "Nuovo", PrefixIcon = "e-add" });
            if (nEnableRemove) t.Add(new ItemModel() { Id = "Delete", Text = "Elimina", TooltipText = "Elimina", PrefixIcon = "e-delete" });
            return t;
        }
    }


    /// <summary>
    /// On Init component, get custom columns
    /// </summary>
    protected override async void OnInitialized()
    {
        Cols = _ele.GetColonne("vALLEGATO");
    }

    /// <summary>
    /// On Open forward the event
    /// </summary>
    /// <param name="ID"></param>
    private async void OnOpen(Guid ID)
    {
        await OnOpenAttachment.InvokeAsync(ID);
    }

    /// <summary>
    /// On double clik forward the open, (if available)
    /// </summary>
    /// <param name="args"></param>
    public async void OnDoubleClick(RecordDoubleClickEventArgs<viewAllegati> args)
    {
        if (nEnableOpen)
            await OnOpenAttachment.InvokeAsync(args.RowData.IdAllegato);
    }

    /// <summary>
    /// On record select forward the selection
    /// </summary>
    /// <param name="args"></param>
    public async void OnRecordSelect(RowSelectEventArgs<viewAllegati> args)
    {
        await OnSelectAttachment.InvokeAsync(args.Data.IdAllegato);
    }

    /// <summary>
    /// On Download forward the event
    /// </summary>
    /// <param name="ID"></param>
    public async void OnDownload(Guid ID)
    {
        await OnDownloadAttachment.InvokeAsync(ID);
    }

    /// <summary>
    /// On toolbar click manage the events
    /// </summary>
    /// <param name="args"></param>
    public async void OnToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "New")
        {
            ShowDialog = true;
        }
        if (args.Item.Id == "Delete")
        {
            viewAllegati A = (await Grid.GetSelectedRecords()).FirstOrDefault();
            if (A != null)
                ShowConfirm = true;
        }
    }

    /// <summary>
    /// Chiude il dialogo di upload
    /// </summary>
    public async void OnCloseDialog()
    { ShowDialog = false; }

    /// <summary>
    /// Delete selected items
    /// </summary>
    private async void DeleteAttach()
    {
        ShowConfirm = false;
        viewAllegati A = (await Grid.GetSelectedRecords()).FirstOrDefault();
        if (A != null)
            await OnRemoveAttachment.InvokeAsync(A.IdAllegato);
    }

    /// <summary>
    /// Close the confirmation dialog
    /// </summary>
    public async void OnCloseDialogConfirm()
    {
        ShowConfirm = false;
    }

    /// <summary>
    /// On upload requested forward the event
    /// </summary>
    /// <param name="files"></param>
    public async void OnUpload(List<dblu.Portale.Core.UI.UploadFilesDialog.UploadedFile> files)
    {
        OnAddRequested.InvokeAsync(files);
        ShowDialog = false;
    }
}