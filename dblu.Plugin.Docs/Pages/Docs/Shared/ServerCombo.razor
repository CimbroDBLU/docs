@*
    Component for showing a dropdown list of available mailboxes/ server folders
*@

@using dblu.Docs.Models
@using dblu.Docs.Classi
@using dblu.Portale.Plugin.Docs.Services
@using dblu.Portale.Core.Infrastructure.Identity.Classes
@using dblu.Portale.Core.Infrastructure.Identity.Services
@using Microsoft.AspNetCore.Http
@using System.Security.Claims

@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject dblu.Portale.Plugin.Docs.Services.ZipService _ZipService
@inject IHttpContextAccessor _HttpContextAccessor


<div class="row">
    <div class="col-3" style="align-self: center;font-weight:600;">
        @nLabel
    </div>
    <div class="col-9">
        <SfDropDownList Enabled=@nEnabled Value="@(nServer?.Nome??"")" TValue="string" AllowFiltering="true" TItem="TranslationServer" DataSource="@TranslationServers">
                <DropDownListFieldSettings Text="Description" Value="Code"></DropDownListFieldSettings>            
            <DropDownListEvents TValue="string" TItem="TranslationServer" OnValueSelect="OnValueChange"></DropDownListEvents>
        </SfDropDownList>
    </div>
</div>

@code {

    private class TranslationServer
    {
        public string Code { get; set; }

        public string Description { get; set; }
    }

    /// <summary>
    /// Label for namimbng the dropdown
    /// </summary>
    [Parameter]
    public string nLabel { get; set; } = "Casella di posta :";

    /// <summary>
    /// Selected email server
    /// </summary>
    [Parameter]
    public EmailServer nServer { get; set; }

    /// <summary>
    /// Event for the 2 way binding of nServer
    /// </summary>
    [Parameter]
    public EventCallback<EmailServer> nServerChanged { get; set; }

    /// <summary>
    /// Show all input server/folder (not limited to user profiles)
    /// </summary>
    [Parameter]
    public bool nShowAll { get; set; } = false;

    /// <summary>
    /// List of servers that need to be excluded (used for making the move function)
    /// </summary>
    [Parameter]
    public List<string> nExcludedServers { get; set; }

    /// <summary>
    /// Type of the attachment wwe are processing 
    /// </summary>
    [Parameter]
    public TipiRecordServer nRecordServer { get; set; } = TipiRecordServer.CartellaMail;

    /// <summary>
    /// If we are processing document specify witch type 
    /// </summary>
    [Parameter]
    public TipiDocumentiFile nDocumentType { get; set; } = TipiDocumentiFile.ZIP;

    /// <summary>
    /// Folder to select, if nServer is not setting anything
    /// </summary>
    [Parameter]
    public string nPresel { get; set; }

    /// <summary>
    /// List of available services
    /// </summary>
    private ObservableCollection<TranslationServer> TranslationServers { get; set; }

    /// <summary>
    /// Enabled
    /// </summary>
    [Parameter]
    public bool nEnabled { get; set; } = true;

    /// <summary>
    /// List of availale servers
    /// </summary>
    private List<EmailServer> Servers { get; set; }


    /// <summary>
    /// On Init component
    /// </summary>
    protected override async void OnParametersSet()
    {
        if (_HttpContextAccessor.HttpContext is null) return;

        List<string> Roles = new();
        if (nRecordServer == TipiRecordServer.CartellaMail)
        {
            if (nShowAll)
                Servers = _MailService._serMan.GetServerEmailInIngresso().OrderBy(y => y.Posizione).ToList();
            else
            {
                Roles = _MailService.getRuoli(_HttpContextAccessor.HttpContext.User.Claims, "");
                Servers = _MailService._serMan.GetServersEmailinRoles(Roles, nRecordServer).OrderBy(y => y.Posizione).ToList();
            }
        }
        else
        {

            string s = "ZIP";
            if (nDocumentType == TipiDocumentiFile.REQ)
                s = "REQ";
            if (nShowAll)
                Servers = _MailService._serMan.GetCartelleInIngresso().OrderBy(y => y.Posizione).ToList();
            else
            {
                Roles = _ZipService.GetRuoliTipoAll(_HttpContextAccessor.HttpContext.User.Claims, s);
                Servers = _ZipService._serMan.GetServersEmailinRoles(Roles, nRecordServer).OrderBy(y => y.Posizione).ToList();
            }
        }

        if (nExcludedServers != null)
            Servers = Servers.Where(x => (nExcludedServers.FirstOrDefault(c => c == x.Nome)) == null).ToList();

        TranslationServers = new ObservableCollection<TranslationServer>(Servers.Select(x => new TranslationServer() { Code = x.Nome, Description =(string.IsNullOrEmpty(x.Descrizione?.Trim()??""))?x.Nome:x.Descrizione  }));
        if (Servers.Count > 0 && (nServer is null || !Servers.Select(x=>x.Nome).Contains(nServer.Nome)))
        {
            if (!string.IsNullOrEmpty(nPresel))
                nServer = Servers.FirstOrDefault(c => c.Nome==nPresel);
            if (nServer == null)
                nServer = Servers[0];
            await nServerChanged.InvokeAsync(nServer);
        }
    }

    /// <summary>
    /// Notifies the change of the server
    /// </summary>
    /// <param name="args"></param>
    private  async void OnValueChange(Syncfusion.Blazor.DropDowns.SelectEventArgs<TranslationServer> args)
    {
        var tServer = args.ItemData as TranslationServer;
        await nServerChanged.InvokeAsync(Servers.FirstOrDefault(x=>x.Nome==tServer.Code));
    }
}
