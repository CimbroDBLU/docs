@*
    Component for showing a dropdown list of available mailboxes/ server folders
*@

@using dblu.Docs.Models
@using dblu.Docs.Classi
@using dblu.Portale.Plugin.Docs.Services
@using dblu.Portale.Core.Infrastructure.Identity.Classes
@using dblu.Portale.Core.Infrastructure.Identity.Services
@using Microsoft.AspNetCore.Http
@using System.Security.Claims

@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject dblu.Portale.Plugin.Docs.Services.ZipService _ZipService
@inject IHttpContextAccessor _HttpContextAccessor


<div class="row">
    <div class="col-3" style="align-self: center;font-weight:600;color:black;">
        @nLabel
    </div>
    <div class="col-9">
        <SfDropDownList Value="@(nServer?.Nome??"")" TValue="string" AllowFiltering="true" TItem="EmailServer" DataSource="@Servers">
            @if (nRecordServer == TipiRecordServer.CartellaMail)
            {
                <DropDownListFieldSettings Text="Nome" Value="Nome"></DropDownListFieldSettings>
            }
            else
            {
                <DropDownListFieldSettings Text="Nome" Value="Nome"></DropDownListFieldSettings>
            }
            <DropDownListEvents TValue="string" TItem="EmailServer" OnValueSelect="OnValueChange"></DropDownListEvents>
        </SfDropDownList>
    </div>
</div>

@code {


    /// <summary>
    /// Label for namimbng the dropdown
    /// </summary>
    [Parameter]
    public string nLabel { get; set; } = "Casella di posta :";

    /// <summary>
    /// Selected email server
    /// </summary>
    [Parameter]
    public EmailServer nServer { get; set; }

    /// <summary>
    /// Event for the 2 way binding of nServer
    /// </summary>
    [Parameter]
    public EventCallback<EmailServer> nServerChanged { get; set; }

    /// <summary>
    /// List of servers that need to be excluded (used for making the move function)
    /// </summary>
    [Parameter]
    public List<string> nExcludedServers { get; set; }

    /// <summary>
    /// Type of the attachment wwe are processing 
    /// </summary>
    [Parameter]
    public TipiRecordServer nRecordServer { get; set; } = TipiRecordServer.CartellaMail;

    /// <summary>
    /// If we are processing document specify witch type 
    /// </summary>
    [Parameter]
    public TipiDocumentiFile nDocumentType { get; set; } = TipiDocumentiFile.ZIP;

    /// <summary>
    /// List of available services
    /// </summary>
    private ObservableCollection<EmailServer> Servers { get; set; }

    /// <summary>
    /// On Init component
    /// </summary>
    protected override async void OnParametersSet()
    {

        List<string> Roles = new();
        if (nRecordServer == TipiRecordServer.CartellaMail)
        {
            Roles = _MailService.getRuoli(_HttpContextAccessor.HttpContext.User.Claims, "");
            Servers = new ObservableCollection<EmailServer>(_MailService._serMan.GetServersEmailinRoles(Roles, nRecordServer));
        }
        else
        {
            string s = "ZIP";
            if (nDocumentType == TipiDocumentiFile.REQ)
                s = "REQ";
            Roles = _ZipService.GetRuoliTipoAll(_HttpContextAccessor.HttpContext.User.Claims, s);
            Servers = new ObservableCollection<EmailServer>(_ZipService._serMan.GetServersEmailinRoles(Roles, nRecordServer));
        }

        if (nExcludedServers != null)
            Servers = new ObservableCollection<EmailServer>(Servers.Where(x => (nExcludedServers.FirstOrDefault(c => c == x.Nome)) == null));
        if (Servers.Count > 0 && (nServer is null || !Servers.Select(x=>x.Nome).Contains(nServer.Nome)))
        {
            nServer = Servers[0];
            await nServerChanged.InvokeAsync(nServer);
        }
    }

    /// <summary>
    /// Notifies the change of the server
    /// </summary>
    /// <param name="args"></param>
    public async void OnValueChange(Syncfusion.Blazor.DropDowns.SelectEventArgs<EmailServer> args)
    {
        nServer = args.ItemData as EmailServer;
        await nServerChanged.InvokeAsync(nServer);
    }
}
