@*
    Component for showing a combo with candidate users
*@
@using dblu.Portale.Core.Infrastructure.Identity.Classes
@using dblu.Portale.Core.Infrastructure.Identity.Services
@inject IApplicationUsersManager _ApplicationUsersManager

<SfMultiSelect CssClass=@CssClass  Placeholder="Utenti Candidati" @bind-Value="@nUsers" DataSource="@UserList">
    <MultiSelectFieldSettings Value="Code" Text="Desc"></MultiSelectFieldSettings>
</SfMultiSelect>

@code {

    /// <summary>
    /// Selecteds Users
    /// </summary>
    private string[] _nUsers = new string[] { };

    /// <summary>
    /// Selected Users
    /// </summary>
    [Parameter]
    public string[] nUsers
    {
        get => _nUsers;
        set
        {
            if (_nUsers == value) return;
            _nUsers = value;
            nUsersChanged.InvokeAsync(value);
        }
    }
    /// <summary>
    /// CSS class that must be inherit from internal component
    /// </summary>
    [Parameter]
    public string CssClass{get;set;}

    /// <summary>
    /// Event for having two way binding
    /// </summary>
    [Parameter]
    public EventCallback<string[]> nUsersChanged { get; set; }


    /// <summary>
    /// List of all available users
    /// </summary>
    public List<UserTranslation> UserList { get; set; } = new();

    /// <summary>
    /// Filter Users for a role, if specified
    /// </summary>
    [Parameter]
    public string nRoleFilter { get; set; }

    /// <summary>
    /// Class for relate UserIds and Description to show
    /// </summary>
    public class UserTranslation
    {
        /// <summary>
        /// UserID
        /// </summary>
        public string Code { get; set; }
        /// <summary>
        /// User description
        /// </summary>
        public string Desc { get; set; }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="nCode">UserID</param>
        /// <param name="nDesc"> User description</param>
        public UserTranslation(string nCode, string nDesc)
        {
            Code = nCode;
            Desc = nDesc;
        }
    }

    /// <summary>
    /// On Init component
    /// </summary>
    protected override void OnInitialized()
    {
        if(string.IsNullOrEmpty(nRoleFilter))
            foreach (ApplicationUser AU in _ApplicationUsersManager.GetUsers())
                UserList.Add(new(AU.UserId, AU.ToSignPlusID));
       else 
           foreach (ApplicationUser AU in _ApplicationUsersManager.GetUsersWithRole(nRoleFilter))
                UserList.Add(new(AU.UserId, AU.ToSignPlusID));

    }
}
