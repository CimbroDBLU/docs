@*
    Component for managing the costumer part of the Attachment
*@
@using System.IO
@using dblu.Portale.Plugin.Docs.Services
@using dblu.Portale.Plugin.Docs.Pages.Mail.Shared
@using dblu.Docs.Interfacce
@using static dblu.Portale.Plugin.Docs.Pages.Docs.Shared.REG_CustomerSearch
@inject dblu.Docs.Interfacce.ISoggettiService _SubjectService
@inject ILogger<REG_Customer> _Logger

<div>
<SfSpinner @bind-Visible="IsLoading">
</SfSpinner>
@if (ShowCostumerSelection)
{
    <div class="row">
        <div class="col">
            <MailCostumerSelectionPopUp @ref="@CustomerSelector" nCostumers="@nCostumers" OnExitPressed="@(()=>OnSelectedCostumer())" OnClose="@(()=>OnSelectedCostumer())" OnSelectPressed="@(()=> OnSelectedCostumer(true))"></MailCostumerSelectionPopUp>
        </div>
    </div>
}
else
{            
    <div class="row">
        <div class="col">       
            <REG_CustomerSearch nCostumerCode="@nCostumerCode" nCostumerName="@nCostumerName" OnLinkedToCostumer="OnLinkedToCostumer" nReadOnly="@nReadOnly" nAttachID="@nAttachID" ></REG_CustomerSearch>
        </div>
    </div>
    @if (!nReadOnly)
    {
        <div class="row mt-2">
            <div class="col">
                <REG_OpenItemsTable nCustomerCode="@nCostumerCode" OnOpenItems="OnOpenItems"></REG_OpenItemsTable>
            </div>
        </div>
    }
}

</div>

@code {

    /// <summary>
    /// Costumer code
    /// </summary>
    [Parameter]
    public string nCostumerCode { get; set; }

    /// <summary>
    /// Costumer Name
    /// </summary>
    [Parameter]
    public string nCostumerName { get; set; }

    /// <summary>
    /// Indicates if is possible to change user/order
    /// </summary>
    [Parameter]
    public bool nReadOnly { get; set; } = false;

    /// <summary>
    /// Fires when a costumer has been selected
    /// </summary>
    [Parameter]
    public EventCallback<REG_CustomerSearch.CustomerData> OnLinkedToCostumer { get; set; }

    /// <summary>
    /// Fires the number on open items loded regarding this costumer
    /// </summary>
    [Parameter]
    public EventCallback<int> OnOpenItems { get; set; }

    /// <summary>
    /// Attachment ID
    /// </summary>
    [Parameter]
    public string nAttachID { get; set; }

    /// <summary>
    /// Sender of the attachment
    /// </summary>
    [Parameter]
    public string Sender { get; set; }

    /// <summary>
    /// Indicates that the panel is loading
    /// </summary>
    private bool IsLoading { get; set; } = false;

    /// <summary>
    /// List of available costumers
    /// </summary>
    private ObservableCollection<ISoggetti> nCostumers { get; set; } = new();

    /// <summary>
    /// Indicates if costumer selection must be showed
    /// </summary>
    private bool  ShowCostumerSelection { get; set; } = false;

    /// <summary>
    /// Dialog for selecting the costumer from email
    /// </summary>
    private MailCostumerSelectionPopUp CustomerSelector { get; set; }

    /// <summary>
    /// Previously set sender of the attachment
    /// </summary>
    public string PrevSender { get; set; } = "";


    /// <summary>
    /// On Parameters set , verify if we have an available costumer, or a suitable sender for identifing it.
    /// </summary>
    /// <returns></returns>
    protected override Task OnParametersSetAsync()
    {
        try 
        {
            if (string.IsNullOrEmpty(nCostumerCode))
            {
                if (Sender != PrevSender)
                {
                    PrevSender = Sender;
                    string OldID = nAttachID;
                    Task.Run(() =>
                    {
                        try
                        {
                            IsLoading = true;
                            Stopwatch sw = Stopwatch.StartNew();
                            List<ISoggetti> Costumers = _SubjectService.GetSoggettiByMail(Sender);
                            _Logger.LogDebug($"REG_Costumer.OnParametersSetAsync: Read {Costumers.Count} costumers in {sw.ElapsedMilliseconds} ms");
                            if (Costumers.Count > 1)
                            {
                                ShowCostumerSelection = true;
                                nCostumers = new ObservableCollection<ISoggetti>(Costumers);
                            }
                            else
                            {
                                InvokeAsync(() =>
                                {
                                    OnLinkedToCostumer.InvokeAsync(new CustomerData() { Customer = Costumers?.FirstOrDefault(), AttachId = OldID });
                                });
                                ShowCostumerSelection = false;
                            }
                        }
                        catch (Exception ex)
                        {
                            _Logger.LogError($"REG_Costumer.OnParametersSetAsync(1): Unexpected error {ex}");
                        }

                        InvokeAsync(() => { IsLoading = false; StateHasChanged(); });
                    });
                }
            }
            else
            { ShowCostumerSelection = false; PrevSender = Sender; }
        }
        catch (Exception ex)
        {
          _Logger.LogError($"REG_Costumer.OnParametersSetAsync: Unexpected error {ex}");  
        }
        return base.OnParametersSetAsync();
    }



    /// <summary>
    /// On closing, change the visible value and  evnetually link the customer
    /// </summary>
    /// <param name="Save">True id the customer must be linked to</param>
    public async void OnSelectedCostumer(bool Save = false)
    {
        ShowCostumerSelection = false;
        if (Save && CustomerSelector.SelectedCostumer != null)
            OnLinkedToCostumer.InvokeAsync(new CustomerData(){ Customer=CustomerSelector.SelectedCostumer, AttachId=nAttachID });

    }
}
