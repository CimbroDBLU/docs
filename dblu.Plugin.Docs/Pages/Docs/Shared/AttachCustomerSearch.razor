@*
    Component for seaching costumer/element  and associate it to the attachment
*@
@using dblu.Docs.Interfacce
@using dblu.Portale.Plugin.Docs.ViewModels
@using Microsoft.AspNetCore.Components.CompilerServices
@using dblu.Portale.Plugin.Docs.Services
@using System.IO
@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject dblu.Docs.Interfacce.ISoggettiService _SubjectService
@inject NavigationManager _NavigatorManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject ILogger<AttachCustomerSearch> _Logger

    <div>
            <div class="row">
                <SfSpinner @bind-Visible="IsSpinnerVisible">
                </SfSpinner>

                <div class="col-2">
                    <SfTextBox Placeholder="Codice Cliente" @onchange="Search" @bind-Value="@nCostumerCode"></SfTextBox>
                </div>

                @if (!nReadOnly)
                {
                    <div class="col-8" >
                        <SfTextBox Readonly="true" Placeholder="Cliente" Value="@Description"></SfTextBox>
                    </div>

                    <div class="col-2" style="display: inline-flex; justify-content: flex-end;">
                        <SfButton CssClass="e-primary" Content="Cerca" OnClick="OnSearch"></SfButton>                        
                    </div>
                }
                else
                {
                    <div class="col-10">
                        <SfTextBox Readonly="true" Placeholder="Cliente" Value="@Description"></SfTextBox>
                    </div>
                }
        </div>
     </div>
        @if (IsShowDialog)
        {
            <DynamicComponent nType="@DynamicContent" nAttributes="@DynamicAttributes"></DynamicComponent>
        }

        @code {


            /// <summary>
            /// Costumer code
            /// </summary>
            [Parameter]
            public string nCostumerCode { get; set; }

            /// <summary>
            /// Attachment ID
            /// </summary>
            [Parameter]
            public string nAttachID { get; set; }

            /// <summary>
            /// List of the original attachment coming from the email
            /// </summary>
            [Parameter]
            public ObservableCollection<OriginalAttachments> nAttachments { get; set; }

            /// <summary>
            /// Currend PDF document in edit
            /// </summary>
            [Parameter]
            public MemoryStream nCurrentDocument { get; set; }

            /// <summary>
            /// Fires when a costumer has been selected
            /// </summary>
            [Parameter]
            public EventCallback<ISoggetti> OnLinkedToCostumer { get; set; }

            /// <summary>
            /// Indicates if is possible to change user/order
            /// </summary>
            [Parameter]
            public bool nReadOnly { get; set; } = false;

            /// <summary>
            /// Indicates if spinner must be visible
            /// </summary>
            private bool IsSpinnerVisible { get; set; } = false;

            /// <summary>
            /// Last selected costumer
            /// </summary>
            public string LastCostumerCode { get; set; }

            /// <summary>
            /// Description of the costumer
            /// </summary>
            public string Description { get; set; }

            /// <summary>
            /// Indicates id the dialog has to be showed
            /// </summary>
            private bool IsShowDialog { get; set; } = false;

            /// <summary>
            /// Dinamic component to load
            /// </summary>
            private Type DynamicContent { get; set; } = null;

            /// <summary>
            /// Attributes of the dynamic compponent
            /// </summary>
            private ObservableCollection<dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute> DynamicAttributes = new();

            /// <summary>
            /// Current Selected costumer
            /// </summary>
            public ISoggetti CurrentCostumer { get; set; } = null;

            /// <summary>
            /// On  changing user, refresh the component
            /// </summary>
            /// <param name="args"></param>
            public async void OnSelectedCustomer(ISoggetti args)
            {
                if (args is null) return;

                nCostumerCode = args.Codice;
                OnParametersSet();
                await OnLinkedToCostumer.InvokeAsync(args);
            }

            /// <summary>
            /// Search a new costumer from typed caption
            /// </summary>
            /// <returns></returns>
            public async Task Search()
            {
                IsSpinnerVisible = true;

                await Task.Run(() =>
                {
                    Stopwatch SW = Stopwatch.StartNew();
                    OnParametersSet();
                    _Logger.LogInformation($"AttachCostumerSearch.Search: Retreived Costumer from code {nCostumerCode} in {SW.ElapsedMilliseconds} ms");
                });
                IsSpinnerVisible = false;

                await OnLinkedToCostumer.InvokeAsync(CurrentCostumer);
            }


            /// <summary>
            /// Refresh the component , if necessary
            /// </summary>
            protected override async void OnParametersSet()
            {
                if (LastCostumerCode != nCostumerCode && !string.IsNullOrEmpty(nCostumerCode))
                {
                    CurrentCostumer = _MailService._soggetti.GetSoggetto(nCostumerCode);
                    Description = CurrentCostumer?.Nome ?? "";
                }
                else if (string.IsNullOrEmpty(nCostumerCode))
                {
                    CurrentCostumer = null;
                    Description = "";
                }
                LastCostumerCode = nCostumerCode;
            }



            /// <summary>
            /// Display the Undefined component, using dynmic loading
            /// </summary>
            /// <param name="nComponent">Name of the component</param>
            public void UndefinedComponent(string nComponent)
            {
                try
                {
                    IsShowDialog = true;
                    DynamicAttributes.Clear();
                    string component = "dblu.Portale.Plugin.Docs.Pages.Custom.UndefinedComponentPopUp";
                    DynamicContent = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetTypes().FirstOrDefault(y => y.FullName == component) != null)?.GetType(component);


                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "nComponentName",
                        Position = 1,
                        Value = nComponent
                    });

                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "IsShowDialog",
                        Position = 1,
                        Value = RuntimeHelpers.TypeCheck<bool>(IsShowDialog)
                    });

                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "IsShowDialogChanged",
                        Position = 2,
                        Value = RuntimeHelpers.TypeCheck<EventCallback<bool>>(
                        EventCallback.Factory.Create<bool>(this,
                            RuntimeHelpers.CreateInferredEventCallback(this, __value => IsShowDialog = __value, IsShowDialog)))
                    });
                }
                catch (Exception ex)
                {
                    _Logger.LogError($"AttachCostumerSearch.UndefinedComponent: Unexpected error {ex}");
                }
            }

            /// <summary>
            /// Display the custome component for customer link
            /// </summary>
            public async void OnSearch()
            {
                try
                {
                    string component = _SubjectService.UrlServizio();
                    DynamicAttributes.Clear();

                    IsShowDialog = true;

                    DynamicContent = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetTypes().FirstOrDefault(y => y.FullName == component) != null)?.GetType(component);

                    if (!component.StartsWith("dblu.Portale") || DynamicContent == null)
                    {
                        UndefinedComponent(component);
                        return;
                    }

                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "nAttachID",
                        Position = 1,
                        Value = nAttachID
                    });

                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "nCostumerCode",
                        Position = 2,
                        Value = nCostumerCode
                    });

                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "IsShowDialog",
                        Position = 3,
                        Value = RuntimeHelpers.TypeCheck<bool>(IsShowDialog)
                    });

                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "IsShowDialogChanged",
                        Position = 4,
                        Value = RuntimeHelpers.TypeCheck<EventCallback<bool>>(
                        EventCallback.Factory.Create<bool>(this,
                            RuntimeHelpers.CreateInferredEventCallback(this, __value => IsShowDialog = __value, IsShowDialog)))
                    });

                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "OnSelectedCustomer",
                        Position = 5,
                        Value = EventCallback.Factory.Create<ISoggetti>(this, OnSelectedCustomer)
                    });
                }
                catch (Exception ex)
                {
                    _Logger.LogError($"AttachCostumerSearch.OnSearch: Unexpected error {ex}");
                }
            }

        }
