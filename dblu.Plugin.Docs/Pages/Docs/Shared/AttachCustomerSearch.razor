@*
    Component for seaching costumer/element  and associate it to the attachment
*@
@using dblu.Docs.Interfacce
@using dblu.Portale.Plugin.Docs.ViewModels
@using Microsoft.AspNetCore.Components.CompilerServices
@using dblu.Portale.Plugin.Docs.Services
@using System.IO
@inject dblu.Portale.Plugin.Docs.Services.MailService _MailService
@inject dblu.Docs.Interfacce.ISoggettiService _SubjectService
@inject NavigationManager _NavigatorManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject ILogger<AttachCustomerSearch> _Logger

    <div>
            <div class="row">
                <SfSpinner @bind-Visible="IsSpinnerVisible">
                </SfSpinner>

                <div class="col-2">
                    <SfTextBox Readonly="@nReadOnly" Placeholder="Codice Cliente" @onchange="Search" @bind-Value="@nCostumerCode"></SfTextBox>
                </div>

                @if (!nReadOnly)
                {
                    <div class="col-8" >
                        <SfTextBox Readonly="true" Placeholder="Cliente" Value="@Description"></SfTextBox>
                    </div>

                    <div class="col-2" style="display: inline-flex; justify-content: flex-end;">
                        <SfButton CssClass="e-primary" Content="Cerca" OnClick="OnSearch"></SfButton>                        
                    </div>
                }
                else
                {
                    <div class="col-10">
                        <SfTextBox Readonly="true" Placeholder="Cliente" Value="@Description"></SfTextBox>
                    </div>
                }
        </div>
     </div>
        @if (IsShowDialog)
        {
            <DynamicComponent nType="@DynamicContent" nAttributes="@DynamicAttributes"></DynamicComponent>
        }

@code {


    /// <summary>
    /// Costumer code
    /// </summary>
    [Parameter]
    public string nCostumerCode { get; set; }

    /// <summary>
    /// Attachment ID
    /// </summary>
    [Parameter]
    public string nAttachID { get; set; }

    /// <summary>
    /// Fires when a costumer has been selected
    /// </summary>
    [Parameter]
    public EventCallback<ISoggetti> OnLinkedToCostumer { get; set; }

    /// <summary>
    /// Indicates if is possible to change user/order
    /// </summary>
    [Parameter]
    public bool nReadOnly { get; set; } = false;

    /// <summary>
    /// Indicates if spinner must be visible
    /// </summary>
    private bool IsSpinnerVisible { get; set; } = false;

    /// <summary>
    /// Last selected costumer
    /// </summary>
    public string LastCostumerCode { get; set; } = "-1";

    /// <summary>
    /// Description of the costumer
    /// </summary>
    public string Description { get; set; }

    /// <summary>
    /// Indicates id the dialog has to be showed
    /// </summary>
    private bool IsShowDialog { get; set; } = false;

    /// <summary>
    /// Dinamic component to load
    /// </summary>
    private Type DynamicContent { get; set; } = null;

    /// <summary>
    /// Attributes of the dynamic compponent
    /// </summary>
    private ObservableCollection<dblu.Portale.Core.UI.DynamicComponent.ComponentAttribute> DynamicAttributes = new();

    /// <summary>
    /// Current Selected costumer
    /// </summary>
    public ISoggetti CurrentCostumer { get; set; } = null;


    /// <summary>
    /// On  changing user, refresh the component
    /// </summary>
    /// <param name="args"></param>
    public async void OnSelectedCustomer(ISoggetti args)
    {
        if (args is null) return;

        nCostumerCode = args.Codice;
        bool ToSend=await LoadCostumer();
        if (ToSend)
            await OnLinkedToCostumer.InvokeAsync(args);
    }

    /// <summary>
    /// Search a new costumer from typed caption
    /// </summary>
    /// <returns></returns>
    public async Task Search()
    {
        IsSpinnerVisible = true;          
        bool ToSend=await LoadCostumer();                
        IsSpinnerVisible = false;
        if (ToSend)
            await OnLinkedToCostumer.InvokeAsync(CurrentCostumer);
    }


    /// <summary>
    /// Load the customer selected and set description on text
    /// </summary>
    /// <returns></returns>
    private async Task<bool> LoadCostumer()
    {

        if (LastCostumerCode != nCostumerCode && !string.IsNullOrEmpty(nCostumerCode))
        {
            Stopwatch SW = Stopwatch.StartNew();
            CurrentCostumer = _MailService._soggetti.GetSoggetto(nCostumerCode);
            _Logger.LogInformation($"AttachCostumerSearch.LoadCostumer: Retreived Costumer from code {nCostumerCode} in {SW.ElapsedMilliseconds} ms");
            Description = CurrentCostumer?.Nome ?? "";
            LastCostumerCode = nCostumerCode;
            return true;

        }
        else if (string.IsNullOrEmpty(nCostumerCode))
        {
            CurrentCostumer = null;
            Description = "";
            if (!string.IsNullOrEmpty(LastCostumerCode))
            {
                LastCostumerCode = nCostumerCode;
                return true;
            }

        }
        LastCostumerCode = nCostumerCode;
        return false;
    }

    /// <summary>
    /// Once component loaded seqarch for the costumet and aventually sent to parent the costumer identified
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override  Task OnAfterRenderAsync(bool firstRender)
    {
      //  _Logger.LogDebug("AFTER RENDER");
    bool ToSend =  LoadCostumer().Result;
    nCostumerCode = CurrentCostumer?.Codice ?? "";
    if (ToSend)
    OnLinkedToCostumer.InvokeAsync(CurrentCostumer);
    return base.OnAfterRenderAsync(firstRender);
    }

            /// <summary>
            /// Display the Undefined component, using dynmic loading
            /// </summary>
            /// <param name="nComponent">Name of the component</param>
            public void UndefinedComponent(string nComponent)
            {
                try
                {
                    IsShowDialog = true;
                    DynamicAttributes.Clear();
                    string component = "dblu.Portale.Plugin.Docs.Pages.Custom.UndefinedComponentPopUp";
                    DynamicContent = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetTypes().FirstOrDefault(y => y.FullName == component) != null)?.GetType(component);


                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "nComponentName",
                        Position = 1,
                        Value = nComponent
                    });

                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "IsShowDialog",
                        Position = 1,
                        Value = RuntimeHelpers.TypeCheck<bool>(IsShowDialog)
                    });

                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "IsShowDialogChanged",
                        Position = 2,
                        Value = RuntimeHelpers.TypeCheck<EventCallback<bool>>(
                        EventCallback.Factory.Create<bool>(this,
                            RuntimeHelpers.CreateInferredEventCallback(this, __value => IsShowDialog = __value, IsShowDialog)))
                    });
                }
                catch (Exception ex)
                {
                    _Logger.LogError($"AttachCostumerSearch.UndefinedComponent: Unexpected error {ex}");
                }
            }

            /// <summary>
            /// Display the custome component for customer link
            /// </summary>
            public async void OnSearch()
            {
                try
                {
                    string component = _SubjectService.UrlServizio(_NavigatorManager.Uri);
                    DynamicAttributes.Clear();

                    IsShowDialog = true;

                    DynamicContent = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetTypes().FirstOrDefault(y => y.FullName == component) != null)?.GetType(component);

                    if (!component.StartsWith("dblu.Portale") || DynamicContent == null)
                    {
                        UndefinedComponent(component);
                        return;
                    }

                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "nAttachID",
                        Position = 1,
                        Value = nAttachID??""
                    });

                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "nCostumerCode",
                        Position = 2,
                        Value = nCostumerCode??""
                    });

                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "IsShowDialog",
                        Position = 3,
                        Value = RuntimeHelpers.TypeCheck<bool>(IsShowDialog)
                    });

                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "IsShowDialogChanged",
                        Position = 4,
                        Value = RuntimeHelpers.TypeCheck<EventCallback<bool>>(
                        EventCallback.Factory.Create<bool>(this,
                            RuntimeHelpers.CreateInferredEventCallback(this, __value => IsShowDialog = __value, IsShowDialog)))
                    });

                    DynamicAttributes.Add(new DynamicComponent.ComponentAttribute()
                    {
                        Name = "OnSelectedCustomer",
                        Position = 5,
                        Value = EventCallback.Factory.Create<ISoggetti>(this, OnSelectedCustomer)
                    });
                }
                catch (Exception ex)
                {
                    _Logger.LogError($"AttachCostumerSearch.OnSearch: Unexpected error {ex}");
                }
            }

        }
