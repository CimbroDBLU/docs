@*
    Component for showing a list of Servers, and performing CRUD operations
*@

@page "/Docs/Servers"
@using dblu.Docs.Models
@using dblu.Docs.Classi
@using dblu.Portale.Plugin.Docs.Services
@using dblu.Portale.Core.Infrastructure.Identity.Classes
@inject ILogger<Servers> _Logger
@inject dbluDocsContext _DbContext
@inject ServerMailService  _ServiceMailServer
@inject NavigationManager  _NavigationManager

<style>
    .e-up:before {
        content: '\e840';
    }

    .e-down:before {
        content: '\e83f';
    }

    .e-apply:before {
        content: '\e737';
    }
</style>

<PageTitle nTitle="Lista Servers" />

<section class="content">
    <SfSpinner @bind-Visible="IsSpinnerVisible">
    </SfSpinner>


        <SfCard >
            <CardHeader Title="Lista Servers" />
            <CardContent EnableSeperator="true">

                <SfGrid @ref="@Grid" ID="ServersGrid" EnablePersistence="false" DataSource="@nServers" SelectedRowIndex="0" AllowPaging="false" AllowSorting="true" >
                    <SfToolbar >
                        <ToolbarItems>
                            <ToolbarItem OnClick="OnNew" Text="Nuovo" Id="New" TooltipText="Nuovo" PrefixIcon="e-add"></ToolbarItem>
                            <ToolbarItem OnClick="OnEdit" Text="Edit" Id="Modifica" TooltipText="Modifica" PrefixIcon="e-edit"></ToolbarItem>
                            <ToolbarItem OnClick="OnDelete" Text="Delete" Id="Elimina" TooltipText="Elimina" PrefixIcon="e-delete"></ToolbarItem>
                            <ToolbarItem Type="ItemType.Input" Align="ItemAlign.Right">
                                <Template>
                                    <SfDropDownList TValue="TipiRecordServer" TItem="TranslationServerType" @bind-Value="CurrentType" DataSource=@Types Width="200">
                                        <DropDownListFieldSettings Text="Desc" Value="Code"> </DropDownListFieldSettings>
                                        <DropDownListEvents TValue="TipiRecordServer" TItem="TranslationServerType" ValueChange="@OnChangeValue"></DropDownListEvents>
                                    </SfDropDownList>
                                </Template>
                            </ToolbarItem>
                            <ToolbarItem OnClick="OnUp" Text="Sù" Id="Up" TooltipText="Sposta in sù" PrefixIcon="e-up"></ToolbarItem>
                            <ToolbarItem OnClick="OnDown" Text="Giù" Id="Down" TooltipText="Sposta in giù" PrefixIcon="e-down"></ToolbarItem>
                            <ToolbarItem OnClick="OnApply" Text="Applica posizione" Id="Apply" TooltipText="Applica posizionamento corrente" PrefixIcon="e-apply"></ToolbarItem>
                        </ToolbarItems>
                    </SfToolbar>
                            <GridEvents OnActionBegin="OnActionBegin" OnActionComplete="OnActionEnd" OnRecordDoubleClick="OnDoubleClick"  TValue="EmailServer"></GridEvents>
                            <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="EditMode.Dialog"></GridEditSettings>
                            <GridPageSettings PageSize="20"></GridPageSettings>
                            <GridColumns>
                                <GridColumn AllowEditing="false" AllowSorting="true" Field=@nameof(EmailServer.Nome) HeaderText="Codice"></GridColumn>
                                <GridColumn AllowEditing="false" AllowSorting="true" Field=@nameof(EmailServer.Descrizione) HeaderText="Descrizione"></GridColumn>
                                <GridColumn AllowEditing="false" AllowSorting="true" Field=@nameof(EmailServer.Email) HeaderText="Email"></GridColumn>
                                <GridColumn AllowEditing="false" AllowSorting="true" Field=@nameof(EmailServer.Posizione) HeaderText="Posizione"></GridColumn>
                                <GridColumn AllowEditing="false" AllowSorting="true" Field=@nameof(EmailServer.Cartella) HeaderText="Cartella"></GridColumn>
                                <GridColumn AllowEditing="false" AllowSorting="true" Field=@nameof(EmailServer.CartellaArchivio) HeaderText="Cartella Archivio"></GridColumn>
                                <GridColumn AllowEditing="false" AllowSorting="true" Field=@nameof(EmailServer.NomeServerInUscita) HeaderText="Nome Uscita"></GridColumn>
                                <GridColumn Visible="false" AllowEditing="false" AllowSorting="true" Field=@nameof(EmailServer.TipoRecord) HeaderText="Tipo"></GridColumn>
                            </GridColumns>
                </SfGrid>
            </CardContent>
        </SfCard>


    <QuestionDialog nTitle="Conferma"
                    nText="Rimuovo il record selezionato?"
                    OnExitPressed="OnCloseDialog"
                    OnNoPressed="OnCloseDialog"
                    OnYesPressed="OnDeleteConfirmed"
                    OnClose="OnCloseDialog"
                    nShowDialog="@ShowConfirm">
    </QuestionDialog>

</section>

@code
{
    /// <summary>
    /// Private class for storing a translation between the type of server and a human readable description
    /// </summary>
    private class TranslationServerType
    {
        /// <summary>
        /// Type of server
        /// </summary>
        public TipiRecordServer Code { get; set; }

        /// <summary>
        /// Description of the server
        /// </summary>
        public string Desc { get; set; }
    }

    /// <summary>
    /// Indicates if spinner has to be visible
    /// </summary>
    private bool IsSpinnerVisible { get; set; } = false;

    /// <summary>
    /// Manager (service) class for accessign to the Serves table
    /// </summary>

    private ServerEmailManager ServersManager { get; set; }

    /// <summary>
    /// List of Users that we are managing
    /// </summary>
    public ObservableCollection<EmailServer> nServers { get; set; } = new();

    /// <summary>
    /// Grid users serf object
    /// </summary>
    private SfGrid<EmailServer> Grid;

    /// <summary>
    /// Identifies current selected lines (for keeping it during row movements)
    /// </summary>
    private int CurrSel { get; set; }=0;

    /// <summary>
    /// Show/Hide the dialog for deleting users
    /// </summary>
    private bool ShowConfirm { get; set; } = false;

    /// <summary>
    /// List of types of server
    /// </summary>
    private List<TranslationServerType> Types = new();

    /// <summary>
    /// Current selected type
    /// </summary>
    private TipiRecordServer CurrentType { get; set; } = TipiRecordServer.CartellaMail;

    /// <summary>
    /// On Init component
    /// </summary>
    protected override void OnInitialized()
    {
        Types.Add(new TranslationServerType() { Code = TipiRecordServer.CartellaMail, Desc = "Caselle di posta" });
        Types.Add(new TranslationServerType() { Code = TipiRecordServer.CartellaFile, Desc = "Cartelle" });
        Types.Add(new TranslationServerType() { Code = TipiRecordServer.CartellaAltreMail, Desc = "Altre caselle di posta" });
    }

    /// <summary>
    /// On parameter set, refresh the grif
    /// </summary>
    protected override void OnParametersSet()
    {
        Refresh();
    }

    /// <summary>
    /// On double click edit the selected user
    /// </summary>
    /// <param name="args"></param>
    public async void OnDoubleClick(RecordDoubleClickEventArgs<EmailServer> args)
    {
        _NavigationManager.NavigateTo($"/Docs/EditServer/{args.RowData.Nome.ToString()}");
    }

    /// <summary>
    /// Muove up current selected row
    /// </summary>
    public async void OnUp()
    {      
        int i=(int)(await Grid.GetSelectedRowIndexes()).FirstOrDefault();
        if (i > 0)
        {
            nServers.Move(i, i - 1);
            CurrSel = i - 1;
        }
    }

    /// <summary>
    /// Apply the current order into db
    /// </summary>
    public async void OnApply()
    {
        int Position = 0;
        foreach (EmailServer srv in nServers)
        {
            srv.Posizione = Position++;
            ServersManager.SalvaServerEmail(srv);
        }
        Refresh();
    }

    /// <summary>
    /// Move down current selected wor
    /// </summary>
    public async void OnDown()
    {
        int i = (int)(await Grid.GetSelectedRowIndexes()).FirstOrDefault();
        if (i < nServers.Count - 1)
        {
            nServers.Move(i, i + 1);
            CurrSel = i + 1;
        }

    }

    /// <summary>
    /// Create a new server
    /// </summary>
    private void OnNew()
    {
        _NavigationManager.NavigateTo("/Docs/EditServer");
    }

    /// <summary>
    /// Ask configmation for deleting current selected server
    /// </summary>
    private void OnDelete()
    {
        ShowConfirm = true;
    }

    /// <summary>
    /// Open in edit a server
    /// </summary>
    private async void OnEdit()
    {
        List<EmailServer> SelectedServers = await Grid.GetSelectedRecords();

        if (SelectedServers.Count == 0) return;
        foreach (EmailServer U in SelectedServers)
        {
            _NavigationManager.NavigateTo($"/Docs/EditServer/{U.Nome.ToString()}");
            break;
        }
    }

    /// <summary>
    /// Reload info from DB
    /// </summary>
    public void Refresh()
    {
        IsSpinnerVisible = true;
        ServersManager = new ServerEmailManager(_DbContext.Connessione, _Logger);
        nServers = new ObservableCollection<EmailServer>(ServersManager.GetAllServersEmail().Where(x => x.TipoRecord == CurrentType).OrderBy(x => x.Posizione));
        IsSpinnerVisible = false;

    }

    /// <summary>
    /// When user change type, reload the grid
    /// </summary>
    /// <param name="args"></param>
    private void OnChangeValue(Syncfusion.Blazor.DropDowns.ChangeEventArgs<TipiRecordServer, TranslationServerType> args)
    {
        Refresh();
    }


    /// <summary>
    /// When the grid do something, show the spinner
    /// </summary>
    private async void OnActionBegin()
    {
        IsSpinnerVisible = true;
    }

    /// <summary>
    /// When the grid stop doing something, hide the spinner
    /// </summary>
    private async void OnActionEnd()
    {
        IsSpinnerVisible = false;
        await Grid.SelectRow(CurrSel, true);
    }

    /// <summary>
    /// On Deletion confirmed, remove the data
    /// </summary>
    public async void OnDeleteConfirmed()
    {
        ShowConfirm = false;
        IsSpinnerVisible = true;
        Stopwatch SW = new Stopwatch(); SW.Start();
        try
        {
            List<EmailServer> SelectedServers = await Grid.GetSelectedRecords();
            if (SelectedServers.Count == 0) return;
            foreach (EmailServer U in SelectedServers)
            {

                List<Role> RL = _ServiceMailServer.GetAllRolesForServer(U.Nome).ToList();
                foreach (Role R in RL)
                    _ServiceMailServer.RemoveFromRole(R.RoleId, U.Nome);
                ServersManager.CancellaServerEmail(U);

                nServers.Remove(nServers.ToList().FirstOrDefault(x => x.Nome == U.Nome));
                _Logger.LogInformation($"Servers.OnDeleteConfirmed: Removed Server {U.Nome} in {SW.ElapsedMilliseconds} ms");
                SW.Reset();
            }
        } catch (Exception ex)
        {
            _Logger.LogError($"Servers.OnDeleteConfirmed: Unable to delete server! Unexpected error => {ex} ");
        }
        finally
        {
            IsSpinnerVisible = false;
        }
    }

    /// <summary>
    /// Close the dialog without deletion
    /// </summary>
    public async void OnCloseDialog()
    {
        ShowConfirm = false;
    }
}


