@page "/Components"
@using dblu.Portale.Plugin.Docs.Models;
@inject dblu.Portale.Plugin.Docs.Services.PdfEditService  pdfsvc
@inherits ComponentBase

<style>
    .e-redo:before {
        content: '\e778';
    }

    .e-undo:before {
        content: '\e752';
    }
</style>
<h3>Pdf editor</h3>

<SfToolbar>
    <ToolbarItems>
        <ToolbarItem PrefixIcon="e-icons e-redo" Text="+90°" TooltipText="Ruota +90°" OnClick="RuotaDx"></ToolbarItem>
        <ToolbarItem PrefixIcon="e-icons e-undo" Text="-90°" TooltipText="Ruota -90°"></ToolbarItem>
        <ToolbarItem Text="Copy"></ToolbarItem>
        <ToolbarItem Text="Paste"></ToolbarItem>
        <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
        <ToolbarItem Text="Bold"></ToolbarItem>
        <ToolbarItem Text="Unde rline"></ToolbarItem>
        <ToolbarItem Text="Italic"></ToolbarItem>
        <ToolbarItem Text="Color-Picker"></ToolbarItem>
    </ToolbarItems>
</SfToolbar>

<div>
    @*  <div style="width:100%">
            <button @onclick="RuotaSx">Ruota -90 </button>
            <button @onclick="RuotaDx">Ruota 90</button>
            <button @onclick="CancellaPagina">Cancella</button>

            <button style="align-self:end" @onclick="Salva">Salva</button>
        </div>*@
</div>
<SfPdfViewerServer @ref="pdfViewer" Width="100%" Locale="it" DocumentPath="@DocumentPath"
                   EnableNavigation="true" EnableAnnotation="true" EnableTextSelection="true">
    <PdfViewerEvents DocumentLoaded="@DocumentLoaded"></PdfViewerEvents>
</SfPdfViewerServer>

@code {

    [Parameter]
    public string DocumentID { get; set; } = "2865659e-a5d9-46dd-b809-e6e074398f55";

    private string DocumentPath { get; set; } = ""; //"wwwroot/_tmp/b0a6c447-183b-4352-9179-12dfdc1fae57.pdf";
    private string AnnotationPath { get; set; } = "";
    SfPdfViewerServer pdfViewer;
    private object PageData;

    private void LoadPdf()
    {

        DocumentPath = $"wwwroot/_tmp/{DocumentID}.pdf";
        AnnotationPath = $"wwwroot/_tmp/{DocumentID}.json";

    }

    //protected void Toggle()
    //{
    //    if (Name == "Jon")
    //    {
    //        //Name = "Susan";
    //        DocumentPath = "wwwroot/_tmp/ddb03822-9636-4b51-9009-ffa2342fdf55.pdf";
    //    }
    //    else
    //    {
    //        Name = "Jon";
    //        DocumentPath = "wwwroot/_tmp/b0a6c447-183b-4352-9179-12dfdc1fae57.pdf";
    //    }
    //}

    protected async Task RuotaSx(ClickEventArgs args)
    {

        PdfEditAction az = new PdfEditAction();

        az.FilePdf = DocumentPath;
        az.Azione = Azioni.RuotaPagina270;
        az.Pagina = pdfViewer.CurrentPageNumber - 1;

        if (pdfsvc.Modifica(az))
        {
            await pdfViewer.Load(DocumentPath, null);
            await pdfViewer.GoToFirstPage();
            await pdfViewer.GoToPage(az.Pagina + 1);
        }

    }

    protected async Task RuotaDx(ClickEventArgs args)
    {

        PdfEditAction az = new PdfEditAction();
        az.FilePdf = DocumentPath;
        az.Azione = Azioni.RuotaPagina90;
        az.Pagina = pdfViewer.CurrentPageNumber - 1;
        if (pdfsvc.Modifica(az))
        {
            await pdfViewer.Load(DocumentPath, null);
            await pdfViewer.GoToFirstPage();
            await pdfViewer.GoToPage(az.Pagina + 1);
        }
    }

    protected async Task CancellaPagina()
    {

        PdfEditAction az = new PdfEditAction();
        az.FilePdf = DocumentPath;
        az.Azione = Azioni.CancellaPagina;
        az.Pagina = pdfViewer.CurrentPageNumber - 1;
        if (pdfsvc.Modifica(az))
        {
            await pdfViewer.Load(DocumentPath, null);
            await pdfViewer.GoToFirstPage();
        }
    }


    private void DocumentLoaded(LoadEventArgs args)
    {
        PageData = args.PageData;
        //pdfViewer.OpenThumbnailPane();
        if (System.IO.File.Exists(AnnotationPath))
        {
            dynamic note = "";
            string jnote = System.IO.File.ReadAllText(AnnotationPath);
            pdfViewer.ImportAnnotations(Newtonsoft.Json.JsonConvert.DeserializeObject(jnote));
            //pdfViewer.ImportAnnotations(AnnotationPath);
            //pdfViewer.ImportAnnotations(jnote);
        }


    }

    protected override void OnInitialized()
    {
        // LoadPdf();
    }

    protected override void OnParametersSet()
    {

        LoadPdf();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // LoadPdf();

        }
    }

    protected async Task Salva()
    {

        dynamic note = await pdfViewer.ExportAnnotationsAsObject();
        string jnote = Newtonsoft.Json.JsonConvert.SerializeObject(note);
        System.IO.File.WriteAllText(AnnotationPath, jnote);

    }


}

