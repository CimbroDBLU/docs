@model dblu.Portale.Plugin.Docs.ViewModels.EditorElementoViewModel
@inject dblu.Portale.Plugin.Docs.Services.AllegatiService _doc
@using Kendo.Mvc.UI
@using dblu.Portale.Plugin.Docs.ViewModels
@using Syncfusion.EJ2
@using dblu.Docs.Classi
@addTagHelper *, Kendo.Mvc

@addTagHelper "*, Syncfusion.EJ2"

@{
    ViewBag.Title = "Elemento";
    var tipoelemento = _doc.GetTipoElemento(Model.Oggetto.Tipo);

    List<dblu.Docs.Models.Allegati> Allegati = _doc._elmMan.GetAllegatiElemento(Model.Oggetto.Id);
    List<dblu.Docs.Models.Colonna> ColsAl = _doc.GetColonne("vALLEGATO");


    bool isEdit = Model.IsEdit();
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.2.2/pdf.js"></script>
<script>
    window.pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.2.2/pdf.worker.js';
</script>
<script src="~/Scripts/dblupdf.js"></script>

<script>

    var PdfCorrente = {
        TipoAllegato: "FILE",
        IdAllegato: "",
        IdElemento: "",
        FilePdf: "",
        Pagina: 0,
        AggiungiFilePdf: "",
        NuovaPosizione: 0,
        iAzione: 0,
        IdAllegatoAElemento: "",
        Descrizione: "",
        FileAllegati: null
    }

    $(document).ready(function () {

        //$("#pdfviewer_comment").remove();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.stickyNotesSettings.author = '@User.Identity.Name';
        pdfViewer.strikethroughSettings.author = '@User.Identity.Name';
        pdfViewer.underlineSettings.author = '@User.Identity.Name';
        pdfViewer.highlightSettings.author = '@User.Identity.Name';
        pdfViewer.annotationSettings.author = '@User.Identity.Name';
        pdfViewer.annotationSettings.color = '#ff0000';
        pdfViewer.freeTextSettings.author = '@User.Identity.Name';
        pdfViewer.freeTextSettings.fontColor = '#ff0000';
        pdfViewer.freeTextSettings.fontSize = '20';
        pdfViewer.arrowSettings.author = '@User.Identity.Name';
        pdfViewer.enableAnnotationToolbar = true;

    });

     function importAnnotations() {
        var IdAllegato = $("#IdAllegato").val();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.importAnnotation(JSON.stringify(PdfCorrente));
    }

    function annotationAdd(e) {
       // alert("The signature is added to the PDF document successfully");
    }

    function saveAnnotations() {

        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.exportAnnotation();
    }

    function documentLoaded(args) {
        //alert("The document" + args.fileName + "is ready to view");
       // importAnnotations()
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        try {
            pdfViewer.navigation.goToFirstPage();
            if (PdfCorrente.Pagina > 1) {
                pdfViewer.navigation.goToPage(PdfCorrente.Pagina);
            }
        }
        catch (err) {

    }
        pdfViewer.importAnnotation(JSON.stringify(PdfCorrente));
    }

    function CaricaPdf(pdfViewer, nome ){

        var flLoad=false;
        if ((PdfCorrente.iAzione == docsAzioniPdf.Salva
            && pdfViewer.annotationCollection != undefined
            && pdfViewer.annotationCollection.length > 0)) {

            pdfViewer.exportAnnotation(JSON.stringify(PdfCorrente));
                }
                else {
                pdfViewer.load(JSON.stringify(PdfCorrente))
                pdfViewer.downloadFileName = nome;
                }
        }

    function exportSuccess(args) {

        if (PdfCorrente.iAzione == docsAzioniPdf.Salva) {

            var pdfEditorViewer = document.getElementById('pdfviewer').ej2_instances[0];
            pdfEditorViewer.load(JSON.stringify(PdfCorrente));
            pdfEditorViewer.downloadFileName = PdfCorrente.IdAllegato + ".pdf";

        }
    }

    function tbpdf_click(e) {

        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];

        PdfCorrente.IdAllegato = $("#IdAllegato").val();
        PdfCorrente.Pagina = pdfViewer.currentPageNumber;
        //alert(e.id);
        var nome = $("#NomeAllegato").val();

        if (e.id == "tbruotadx") {
            PdfCorrente.iAzione = docsAzioniPdf.RuotaPagina90;
        } else if (e.id == "tbruotasx") {
            PdfCorrente.iAzione = docsAzioniPdf.RuotaPagina270;
        } else if (e.id == "tbcanc") {
            PdfCorrente.iAzione = docsAzioniPdf.CancellaPagina;
        } else if (e.id == "tbrefresh") {
            PdfCorrente.iAzione = docsAzioniPdf.Ricarica;
        } else if (e.id == "tbsalva") {
            PdfCorrente.iAzione = docsAzioniPdf.Salva;
        } else {

            PdfCorrente.iAzione = docsAzioniPdf.Carica;
        }

        if (e.id == "tbespandi") {

            var pdfWindow = $("#wPdfEditor").data("kendoWindow");
            pdfWindow.refresh({
                url: '@Url.Action("Editor", "PdfEditor")',
                type: "Post",
                data: { pdf: JSON.stringify(PdfCorrente) }
            });
            pdfWindow.open().maximize();;

        } else {
        CaricaPdf(pdfViewer, nome);
        }
    }

    //Attachments_OnRowSelect = function (e) {

    function SubmitForm(frm, caller) {
        caller.preventDefault();

        var fdata = new FormData();

        //var file = $(frm).find('input:file[name="files"]')[0].files[0];
        var file = $("#files")[0].files[0];
        fdata.append("files", file);
        fdata.append("idelemento", '@Model.Oggetto.Id');
        fdata.append("idfascicolo", '@Model.Oggetto.IdFascicolo');
        fdata.append("descrizione", '@Model.Oggetto.Descrizione');
        fdata.append("rev", @Model.Oggetto.Revisione);
        $.ajax(
            {
                type: "POST",
                data: fdata,
                url: "@(Url.Action("AddAllegato", "Fascicolo"))",
                processData: false,
                contentType: false,
                success: function (data) {
                   $("#GridAllegati").data("kendoGrid").dataSource.read();  

                },
                error: function (data) {
                    alert(data);
                }
            });
    }


     function Allegati_OnRowSelect(arg) {
        var dataItem = this.dataItem(this.select());
        if (dataItem != null) {

            var IdAllegato = dataItem.IdAllegato;
            $("#IdAllegato").val(IdAllegato);
            var nome = dataItem.NomeFile.toLowerCase();
            $("#NomeAllegato").val(nome);
            var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];

            PdfCorrente.IdAllegato = $("#IdAllegato").val();
            PdfCorrente.IdElemento = "";
            PdfCorrente.iAzione = 0;

            CaricaPdf(pdfViewer, nome);

            //var IdAllegato = dataItem.Id;
            //$("#IdAllegato").val(IdAllegato);
            //var nome = dataItem.NomeFile.toLowerCase();
            //var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
            //if (nome.indexOf(".pdf") > 0) {
            //    pdfViewer.load(IdAllegato);
            //    pdfViewer.downloadFileName = nome;
            //}
            //else {
            //    pdfViewer.load('');
            //}

          }

    
    }

      function ScaricaAllegato(e) {
        e.preventDefault();
        var data = this.dataItem($(e.currentTarget).closest("tr"));
        var nomefile = data.NomeFile;
        var idAllegato = $("#IdAllegato").val()
        var obj = {
            IdAllegato: idAllegato,
            NomeFile: nomefile
        }
        $.ajax( {
            url: '@Url.Action("DownloadFile", "MailView")',
            method: 'GET',
            xhrFields: {
                responseType: 'blob'
            },
            data: obj,
            success: function (data) {
                var a = document.createElement('a');
                var url = window.URL.createObjectURL(data);
                a.href = url;
                a.download = nomefile;
                document.body.append(a);
                a.click();
                a.remove();
                window.URL.revokeObjectURL(url);
                }
        });
    }

    function wPdfEditorClose(e) {

        if (MustReloadPdf) {

            PdfCorrente.iAzione = docsAzioniPdf.Ricarica;
            var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
            pdfViewer.load(JSON.stringify(PdfCorrente));
            pdfViewer.downloadFileName = PdfCorrente.IdAllegato + ".pdf";
        }

    }

</script>


        <style>

            html body #pdfviewer {
                width: 100% !important;
            }

            .k-state-selected {
                color: black;
            }

        </style>


        <section class="content-header" style="padding: 10px">
            <h1>
            </h1>
            <ol class="breadcrumb">
                <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
                <li class="active">Elemento</li>
            </ol>
        </section>

        <br>
@*
        @if (Model.IsInsideTask)
        {
            <form method="post">
                <button style="margin-left:30px" formaction='@Model.UrlRefer'
                        formmethod="post" class="btn btn-app">
                    <i class="fa fa-backward"></i> Indietro
                </button>

            </form>
        }
        else
        {
            <form action="@Model.UrlRefer" method="get">
                <button style="margin-left:30px" type="submit" class="btn btn-app">
                    <i class="fa fa-backward"></i> Indietro
                </button>
            </form>

        }
*@

        <script>
            $('#return').click(function (evt) {

                window.history.back();
            });
        </script>


        <section class="content">
            <div class="container-fluid">


                <div class="row">
            <div class="box box-default collapsed-box">
                        <div class="box-header">
                            <i class="ion ion-clipboard"></i>
                            <h3 class="box-title">Dati Elemento</h3>
                            <div class="box-tools pull-right">
                                <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-plus"></i>
                                </button>
                            </div>
                        </div>

                        <!-- /.card-header -->
                        <div class="box-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <form class='form-horizontal'>
                                        <div class='card-body'>
                                            <div class='form-group row'>
                                                <label for='' class='col-sm-2 col-form-label'>ID Elemento</label>
                                                <div class='col-sm-10'>
                                                    <input type='text' class='form-control' id='' placeholder='' value='@Model.Oggetto.Id' disabled>
                                                </div>
                                            </div>
                                            <div class='form-group row'>
                                                <label for='' class='col-sm-2 col-form-label'>Creato il</label>
                                                <div class='col-sm-10'>
                                                    <input type='datetime' class='form-control' id='' placeholder='' value='@Model.Oggetto.DataC' disabled>
                                                </div>

                                            </div>
                                            <div class='form-group row'>
                                                <label for='' class='col-sm-2 col-form-label'>Utente Creazione</label>
                                                <div class='col-sm-10'>
                                                    <input type='text' class='form-control' id='' placeholder='Nome' value='@Model.Oggetto.UtenteC' disabled>
                                                </div>
                                            </div>

                                        </div>
                                    </form>

                                </div>
                                <div class="col-md-6">
                                    <div class='form-group row'>
                                        <label for='' class='col-sm-2 col-form-label'>Descrizione</label>
                                        <div class='col-sm-10'>
                                            <input type='text' class='form-control' id='' placeholder='' value='@Model.Oggetto.Descrizione' disabled>
                                        </div>

                                    </div>
                                    <div class='form-group row'>
                                        <label for='' class='col-sm-2 col-form-label'>Modificato il</label>
                                        <div class='col-sm-10'>
                                            <input type='datetime' class='form-control' id='' placeholder='' value='@Model.Oggetto.DataUM' disabled>
                                        </div>

                                    </div>
                                    <div class='form-group row'>
                                        <label for='' class='col-sm-2 col-form-label'>Utente Ultima Modifica</label>
                                        <div class='col-sm-10'>
                                            <input type='text' class='form-control' id='' placeholder='Nome' value='@Model.Oggetto.UtenteUM' disabled>
                                        </div>
                                    </div>
                                </div>
                                <!-- /.card -->
                                <!-- /.col (right) -->
                            </div>
                            <!-- /.row -->
                        </div>
                    </div>

                </div>


                <div class="row">
                    <div class="col-md-4">
                        <div class="box box-">
                            <div class="box-header">

                                <i class="ion ion-clipboard"></i>
                                <h3 class="box-title">Gestione Elemento</h3>
                                <div class="box-tools pull-right">
                                    <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                        <i class="fa fa-minus"></i>
                                    </button>
                                </div>
                            </div>

                            <div class="box-body">
                                <div class="form-group">
                                    @foreach (var attributo in Model.Oggetto.elencoAttributi.ToList().OrderBy(f => (f.Sequenza)))
                                    {


                                        @if (attributo.Visibilità != dblu.Docs.Classi.Visibilita_Attributi.HIDDEN)
                                        {
                                            <!--<div class="row">-->

                                            <div class='form-group row'>
                                                <div class='col-sm-4'>  @Html.Label($"lbl_{attributo.Nome}", attributo.Descrizione) </div>
                                                <div class='col-sm-8'>

                                                    @switch (attributo.Tipo)

                                                    {
                                                        case "System.DateTime":
                                                            bool xEditable = (attributo.Visibilità == Visibilita_Attributi.EDITABLE && isEdit == true) ? true : false;
                                                            @(Html.Kendo().DatePicker()
                                            .Name($"ctl_{attributo.Nome}")
                                             .Enable(xEditable)
                                        .Value(Model.Oggetto.elencoAttributi.GetDateTime(attributo.Nome))

                                                    )
                                                            break;
                                                        case "System.Boolean":
                                                            xEditable = (attributo.Visibilità == Visibilita_Attributi.EDITABLE && isEdit == true) ? true : false;
                                                            bool xx = attributo.Valore == null ? false : (bool)Model.Oggetto.elencoAttributi.GetBoolean(attributo.Nome);
                                                            @(Html.Kendo().Switch()
                                  .Name($"ctl_{attributo.Nome}")
                                   .Enabled(xEditable)
                                  .Messages(c => c.Checked("Si").Unchecked("No"))
                                  .Checked(xx)
                                                    )
                                                            break;
                                                        default:
                                                            xEditable = (attributo.Visibilità == Visibilita_Attributi.EDITABLE && isEdit == true) ? true : false;
                                                            @(Html.Kendo().TextBox()
                              .Name($"ctl_{attributo.Nome}")
                              .Enable(xEditable)
                        .Value(attributo.Valore == null ? "" : attributo.Valore.ToString())
                              .HtmlAttributes(new { style = "width: 100%" })

                                                    )
                                                            break;
                                                    }
                                                </div>

                                            </div>

                                            <!--</div>-->

                                        }






                                    }

                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="col-md-8">
                        <div class="box box-">
                            <div class="box-header">

                                <i class="ion ion-clipboard"></i>
                                <h3 class="box-title">Allegati</h3>
                                <div class="box-tools pull-right">
                                    <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                        <i class="fa fa-minus"></i>
                                    </button>
                                </div>
                            </div>


                            <div class="box-body">

                                <div class="form-group" style="margin-top:10px">
                                    @Html.Hidden("IdAllegato")
                            @Html.Hidden("NomeAllegato")
                                    <div class="col-md-12">
                                        @(Html.Kendo().Grid<dblu.Docs.Models.viewAllegati>()
                                    .Name("GridAllegati")
                                    .Editable(editable => editable.Mode(GridEditMode.InCell))
                                    .Columns(columns =>
                                    {
                                        columns.Bound(p => p.NomeFile).Title("Nome file").Width(100);
                                        columns.Bound(p => p.Descrizione).Title("Descrizione").Width(200);
                                        columns.Bound(p => p.Campo1).Title(ColsAl.ElementAt(0).Des).Visible(ColsAl.ElementAt(0).Visible).Width(100);
                                        columns.Bound(p => p.Campo2).Title(ColsAl.ElementAt(1).Des).Visible(ColsAl.ElementAt(1).Visible).Width(100);
                                        columns.Bound(p => p.Campo3).Title(ColsAl.ElementAt(2).Des).Visible(ColsAl.ElementAt(2).Visible).Width(100);
                                        columns.Bound(p => p.Campo4).Title(ColsAl.ElementAt(3).Des).Visible(ColsAl.ElementAt(3).Visible).Width(100);
                                        columns.Bound(p => p.Campo5).Title(ColsAl.ElementAt(4).Des).Visible(ColsAl.ElementAt(4).Visible).Width(100);
                                        columns.Bound(p => p.Campo6).Title(ColsAl.ElementAt(5).Des).Visible(ColsAl.ElementAt(5).Visible).Width(100);
                                        columns.Bound(p => p.Campo7).Title(ColsAl.ElementAt(6).Des).Visible(ColsAl.ElementAt(6).Visible).Width(100);
                                        columns.Bound(p => p.Campo8).Title(ColsAl.ElementAt(7).Des).Visible(ColsAl.ElementAt(7).Visible).Width(100);
                                        columns.Bound(p => p.Campo9).Title(ColsAl.ElementAt(8).Des).Visible(ColsAl.ElementAt(8).Visible).Width(100);
                                        columns.Bound(p => p.Campo10).Title(ColsAl.ElementAt(9).Des).Visible(ColsAl.ElementAt(9).Visible).Width(100);
                                        columns.Command(command =>
                                        {
                                            command.Custom("download").Text(" ").Click("ScaricaAllegato").IconClass("k-icon k-i-download");
                                        }).Width("10%");
                                    })
                                    .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .Batch(true)
                                        .ServerOperation(false)
                                        .AutoSync(true)
                                        .Model(model =>
                                        {
                                            model.Id(p => p.IdAllegato);
                                            model.Field(p => p.NomeFile).Editable(false);
                                        })
                                    .Read("GetvAllegatiElemento", "Fascicolo", new { elemento = Model.Oggetto.Id })
                                    //.Update("UpdateAllegati", "Fascicolo")
                                    )
                                .HtmlAttributes(new { style = "font-size:10" })
                                .Selectable()
                                .Events(events => events.Change("Allegati_OnRowSelect"))
                                )
                                        @*.Events(ev => ev.Change("xxonChange"))*@
                                    </div>
                                </div>
                                @if (isEdit)
                                {
                                    <div class="form-group" style="margin-top:10px">

                                        <div class="col-md-12" style="width:100%">
                                            @*<form class="col-md-12" method="post" action="/Fascicolo/AddNewsAllegato" enctype="multipart/form-data">*@
                                            <form class="col-md-12" method="post" action="/Fascicolo/AddAllegato" enctype="multipart/form-data">
                                                <div class="form-group">

                                                    @*<input type="hidden" name="idelemento" value="@Model.Oggetto.Id" />
                                                <input type="hidden" name="idfascicolo" value="@Model.Oggetto.IdFascicolo" />
                                                <input type="hidden" name="descrizione" value="@Model.Oggetto.Descrizione" />
                                                <input type="hidden" name="rev" value="@Model.Oggetto.Revisione" />*@
                                                    <input class="form-control-file col-md-8" name="files" id="files" type="file" aria-label="files" />
                                                    <p style="text-align: right">
                                                        <button type="submit" class="k-button k-primary  col-md-2" onclick="SubmitForm(this.parentElement, event)">Aggiungi</button>
                                                    </p>

                                                </div>
                                            </form>
                                            <br /><br />
                                        </div>
                                    </div>
                                }

                            </div>
                            <div class="form-group" style="margin-top:10px">
                                <div class="col-md-12" style="width:100%" id="anteprimapdf">
                            @(Html.Kendo().ToolBar()
                                .Name("pdfToolBar")
                                .Items(items =>
                                                        {
                                    items.Add().Type(CommandType.Button).Id("tbruotasx").Text("-90°").Icon("undo");
                                    items.Add().Type(CommandType.Button).Id("tbruotadx").Text("+90°").Icon("redo");
                                    items.Add().Type(CommandType.Button).Id("tbcanc").Text("Canc.").Icon("delete");
                                    items.Add().Type(CommandType.Separator);
                                    items.Add().Type(CommandType.Button).Id("tbrefresh").Text("Ricarica").Icon("refresh");
                                    items.Add().Type(CommandType.Separator);
                                    items.Add().Type(CommandType.Button).Id("tbsalva").Text("Salva").Icon("save");
                                    items.Add().Type(CommandType.Separator);
                                    items.Add().Type(CommandType.Button).Id("tbespandi").Text("Espandi").Icon("zoom-in");

                                                        })
                                .Events(e => e.Click("tbpdf_click"))
                                                    )

                            <ejs-pdfviewer id="pdfviewer" serviceUrl="/api/PdfEditor" documentPath=""
                                                   enablePrint="true"
                                                   documentLoad="documentLoaded"
                                                   annotationAdd="annotationAdd"
                                           exportSuccess="exportSuccess"
                                                   enableStampAnnotations="false"
                                                   locale="it-IT"
                                           downloadFileName="@string.Concat("",".pdf")" height="1000px">
                                    </ejs-pdfviewer>


                                </div>


                            </div>
                            @*
                        <div class="form-group row">
                            <form class="form-horizontal" role="form" method="post">
                                @if (fromTask)
                                {
                                    <button formaction="/Action/TaskView/Complete/@taskId" method="post" type="submit" class="btn margin btn-info pull-right">Completa</button>
                                }
                                <button class="btn btn-info margin pull-left" id="salvanote" onclick="saveAnnotations() ">Salva Annotazioni</button>
                            </form>
                        </div>
                            *@
                        </div>
                    </div>

                </div>
            </div>

            @*
        <div class="row">
            <div class="col-md-6">
                <div class="box box-primary">
                    <div class="box-header">
                        <i class="ion ion-clipboard"></i>
                        <h3 class="box-title">Gestione Elemento</h3>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <!-- /.card-header -->
                    <div class="box-body">





                        @await Html.PartialAsync("EditorAttributi", new EditorAttributiViewModel() { })
                    </div>
                    </div>
                    </div>
                    </div>

                    <row>
                        @(Html.Kendo().Grid<dblu.Docs.Models.Elementi>()
                 .Name("Grid")
                 .Columns(columns =>
                 {
                     //columns
                     //.ClientTemplate(
                     //    @"<div class='product-photo'
                     //            style='background-image: url(" + @Url.Content("~/shared/web/foods/#:data.ProductID#.jpg") + ");'></div><div class='product-name'>#: ProductName #</div>").Width(320);
                     columns.Bound(p => p.Tipo).Width(150);
                     columns.Bound(p => p.Descrizione).Width(150).MinScreenWidth(800);
                     //columns.Bound(p => p.Category.CategoryName).EditorTemplateName("ClientCategoryEditor").Width(180);
                     //columns.Bound(p => p.UnitsOnOrder).Width(150).MinScreenWidth(800);
                     //columns.Bound(p => p.Discontinued).Width(130);
                     columns.Command(command => command.Destroy()).Width(160);
                 })
                 //.ToolBar(toolbar =>
                 //{
                 //    toolbar.Create();
                 //    toolbar.Save();
                 //})
                 //.Editable(editable => editable.Mode(GridEditMode.InCell))
                 .Pageable()
                 .Navigatable()
                 .Sortable()
                 .Groupable()
                 .Filterable()
                 .Scrollable()
                 .DataSource(dataSource => dataSource
                     .Ajax()
                     .Batch(true)
                     .PageSize(20)
                     .ServerOperation(false)
                     .Events(events => events.Error("error_handler"))
                     .Model(model =>
                     {
                         model.Id(p => p.IdFascicolo);
                         //model.Field(p => p.ProductID).Editable(false);
                         //model.Field(p => p.Category).DefaultValue(
                         //    ViewData["defaultCategory"] as Kendo.Mvc.Examples.Models.CategoryViewModel);
                     })
                     .Create("Elemento_Create", "Elemento")
                     .Read("Elemento_Read", "Elemento")
                     .Update("Elemento_Update", "Elemento")
                     .Destroy("Elemento_Destroy", "Elemento")
                 )
                        )

                        <script type="text/javascript">
                            function error_handler(e) {
                                if (e.errors) {
                                    var message = "Errors:\n";
                                    $.each(e.errors, function (key, value) {
                                        if ('errors' in value) {
                                            $.each(value.errors, function () {
                                                message += this + "\n";
                                            });
                                        }
                                    });
                                    alert(message);
                                }
                            }
                        </script>


                        <style>
                            .product-photo {
                                display: inline-block;
                                width: 32px;
                                height: 32px;
                                border-radius: 50%;
                                background-size: 32px 35px;
                                background-position: center center;
                                vertical-align: middle;
                                line-height: 32px;
                                box-shadow: inset 0 0 1px #999, inset 0 0 10px rgba(0,0,0,.2);
                                margin-left: 5px;
                            }

                            .product-name {
                                display: inline-block;
                                vertical-align: middle;
                                line-height: 32px;
                                padding-left: 3px;
                            }
                        </style>
                    </row>
            </div>
            *@


        </section>

@(Html.Kendo().Window()
        .Name("wPdfEditor")
        .Size("auto")
        .Title("Editor")
        .Visible(false)
        .Actions(actions => actions.Refresh().Close())
        .Content("")
        .Scrollable(true)
        .Modal(true)
        .Events(e => e.Close("wPdfEditorClose"))
    )

        <ejs-scripts></ejs-scripts>