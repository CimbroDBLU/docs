@model dblu.Portale.Plugin.Docs.ViewModels.ZipProcessatiViewModel
@using dblu.Docs.Classi
@using dblu.Docs.Models
@inject dblu.Portale.Plugin.Docs.Services.ZipService _zipservice
@inject dblu.Docs.Interfacce.ISoggettiService  _sggservice
@using dblu.Portale.Core.UI

@using Kendo.Mvc.UI
@using dblu.Portale.Plugin.Docs.ViewModels
@using NToastNotify
@addTagHelper *, Kendo.Mvc

@{
    ViewData["Title"] = "Documenti processati";
    List<dblu.Docs.Models.TipiElementi> ListaTipiElementi;


    TipiAllegati TipoAll;
    if (!string.IsNullOrEmpty(Model.TipoAll))
    {
        TipoAll = _zipservice._allMan.GetTipoAllegato(Model.TipoAll);
    }
    else
    {
        TipoAll = _zipservice._allMan.GetTipoAllegato("ZIP");
    }

    List<string> ListaRuoliZip = null;
    List<string> ListaRuoli = new List<string>();

    if (!string.IsNullOrEmpty(Model.Ruolo))
    {
        ListaRuoli = new List<string>();
        ListaRuoli.Add(Model.Ruolo);

    }
    else
    {
        ListaRuoli = _zipservice.GetRuoliTipoAll(Context.User.Claims, TipoAll.Codice);
    }


    var ListaServer = _zipservice._serMan.GetServersEmailinRoles(ListaRuoli, TipiRecordServer.CartellaFile);

    //var ListaServerIngresso = _mailservice._serMan.GetServerEmailInIngresso();
    if (ListaServer != null && ListaServer.Count > 0)
    {
        //var ListaRuoliServ = _mailservice.getRuoli(Context.User.Claims, ListaServer.ElementAt(0).Nome);
        ListaRuoliZip = _zipservice.getRuoli(ListaRuoli, ListaServer.ElementAt(0).Nome);
        ListaTipiElementi = _zipservice._elmMan.GetAllTipiElementi(ListaRuoliZip);
    }
    else
    {
        ListaTipiElementi = _zipservice._elmMan.GetAllTipiElementi(ListaRuoli);
    }


    var Title = "Documenti processati";
}


@(await Html.RenderComponentAsync<PageTitle>(RenderMode.Server,  new { nTitle = Title}))


<style>

    #gridEmail td {
        font-size: 12px;
        padding-top: 0em;
        padding-bottom: 0em;
        height: 100%;
    }

    #emailAttachments td {
        font-size: 12px;
        padding-top: 0em;
        padding-bottom: 0em;
    }

    .my-icon-class-download:before {
        content: "\e132"; /* Adds a glyph using the Unicode character number */
    }

    body.waiting * {
        cursor: progress;
    }

    .my-icon-class-inoltra:before {
        content: "\e101"; /* Adds a glyph using the Unicode character number */
    }

    .my-icon-class-undo:before {
        content: "\e100"; /* Adds a glyph using the Unicode character number */
    }
</style>


<script src="~/Scripts/dblugrid.js"></script>
<script src="~/Scripts/zipprocessati.js"></script>

<script>

    UrlActions = {
        ZipView_InArrivoCaricaDettaglio: '@Url.Action("InArrivo_CaricaDettaglio", "ZipView")',
        ZipView_ApriFile: '@Url.Action("ApriFile", "ZipView")',
        ZipView_Processati_Riapri: '@Url.Action("Processati_Riapri", "ZipView")',
        ZipView_Processati_Cancella: '@Url.Action("Processati_Cancella", "ZipView")',
        ImagePreview: '@Url.Action("ImagePreview", "MailView")'
    };

    TipoAll = {
        Codice: "@TipoAll.Codice"
    }
    TipiOggetto = {
        ALLEGATO: '@TipiOggetto.ALLEGATO'
    }

</script>



<div class="e-card">
    <div class="e-card-header">
        <div class="e-card-header-caption">
            <div class="e-card-header-title">
                @Title
            </div>
        </div>
    </div>
    <div class="e-card-separator"></div>
    <div class="e-card-content">
        <section class="content">
            <div class="container-fluid mb-2">
                <div class="row" hidden="@(ListaServer.Count <= 1)">
                    <div class="col-5">
                        <label class="control-label col-4 mt-1" style="font-size:12px">Cartella:</label>
                        <div class="col-6">
                            @(Html.Kendo().ComboBox()
                    .Name("cmbCartelleZip")
                    .Placeholder("Seleziona cartella...")
                    .DataTextField("Nome")
                    .DataValueField("Cartella")
                    .BindTo(ListaServer)
                    .SelectedIndex(0)
                    .Suggest(true)
                    .HtmlAttributes(new { style = "width:100%;" })
                    .Events(e =>
                    {
                        e.Select("onSelectCartella");
                    })
                )
                        </div>
                    </div>
                    <div class="col-7"></div>
                </div>
            </div>


            <div class="row">
                <div class="col-5">
                    <div class="card card-outline card-secondary card-solid card-default">
                        @Html.Hidden("IdAllegato")
                        <div class="card-body">
                            <div class="k-grid m-0 p-0">
                                @(Html.Kendo().Grid<dblu.Docs.Models.Allegati>()
                        .Name("gridZip")
                        .Columns(columns =>
                        {
                            columns.Bound(p => p.Id).Title("Id").Width(0).Hidden();
                            columns.Bound(p => p.Chiave4).Title("Nome").Width(0).Hidden();
                            columns.Bound(p => p.Chiave1).Title(TipoAll.Attributi.DescrizioneChiave("Chiave1")).Width(300)
                                .ClientTemplate("<span> cliente #: Chiave3# </span> <br/>"
                                    + "<span><b> #: Chiave4# </b></span>"
                                    + "<span> #: Chiave1# </span><br/>");
                            columns.Bound(p => p.Descrizione).Title("Oggetto").Width(150);
                            columns.Bound(p => p.DataC).Title("Data").Width(100).Format("{0:dd/MM/yy HH:mm}");
                            columns.Bound(p => p.LastOp).Width(50).Title("Operaz.").ClientTemplate("#= xIconLastOp(data) #").Width(80);
                            columns.Command(command => command.Custom("History").Template("#= xIconLastOp(data) #").Click("viewZipHistory")).Width(100).Hidden();
                         })
                        .ToolBar(toolbar =>
                            {
                            toolbar.Custom().Text("Riapri").IconClass("k-icon my-icon-class-undo").HtmlAttributes(new { style = "width:75px", onclick = "RiapriZip()", id = "btnRiapri" });
                            toolbar.Custom().Text("Elimina").IconClass("k-icon k-i-delete").HtmlAttributes(new { style = "width:75px", onclick = "CancellaZip()", id = "btnCancella" });
                            toolbar.Search();
                        })
                        .Pageable()
                        .Sortable()
                        .Scrollable(s => s.Height("auto"))
                        .Filterable( )
                        .Selectable()
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(20)
                            .Batch(false)
                            .ServerOperation(true)
                            .AutoSync(true)
                            .Events(events => events.Error("error_handler"))
                            .Model(model =>
                            {
                                model.Id(p => p.Id);
                            })
                            .Sort(sort => sort.Add(p => p.DataC))
                            .Read(read => read.Action("Processati_Read", "ZipView").Data("getOrigine"))

                         )
                         .Events(events => events
                            .Change("gridZipOnChange")
                         )
                         .Resizable(resize => resize.Columns(true))
                         .HtmlAttributes(new { Height = "100%", style = "font-size:10" })
                         .Search(s => { s.Field(c => c.Descrizione); s.Field(c => c.Chiave1); s.Field(c => c.Chiave3); s.Field(c => c.Chiave4); })
                        )
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-7">
                    <div class="card card-outline card-secondary card-solid card-default">
                        <div class="card-header p-1">
                            <i class="mt-2 fas fa-user float-left"></i>
                            <div class="card-title mt-1 ml-2">
                                Cliente
                            </div>
                            <div class="card-tools pull-right">
                                <button type="button" class="btn btn-card-tool" data-card-widget="collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <form>
                                <div class="form-group">
                                    <label class="control-label col-4" style="font-size:12px ">Cliente</label>
                                    <div class="col-10">
                                        <div class="form-row">
                                            <div class="form-group col-2" style="display:flex">
                                                <input type="text" style="width:100%" id="CodiceSoggetto" placeholder="" disabled value="" />
                                            </div>
                                            <div class="form-group col-6" style="display:flex">
                                                <input type="text" style="width:100%" id="NomeSoggetto" placeholder="" disabled value="" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>

                    <div class="card card-outline card-secondary card-solid card-default">
                        <div class="card-body">
                            <div class="form-group">
                                <div class="form-row">
                                    <label class="control-label col-2 pl-0" style="font-size:12px">Descrizione</label>
                                    <div style="width:100%">
                                        <textarea class="form-control" id="TestoZip" name="TestoZip" rows="10" style="width:100%" readonly="readonly"></textarea>
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="control-label col-2 pl-0" style="font-size:12px">Allegati </label>
                                <div class="col-12 pl-0 pr-0" style="width:100%">
                                    @(Html.Kendo().Grid<EmailAttachments>()
                            .Name("zipAttachments")
                            .PersistSelection()
                            .Columns(columns =>{
                                columns.Bound(p => p.NomeFile).Title("Nome ").Width("90%");
                                columns.Command(command =>
                                    {
                                        command.Custom("download").Text(" ").Click("ScaricaFile").IconClass("k-icon my-icon-class-download");
                                    }).Width("10%");
                                columns.Command(command => command.Custom("anteprimaImg").Text(" ").Click("ApriAllegato").IconClass("k-icon k-i-file-image")).Width("10%");
                            })
                            .Events(events => events.DataBound("onDataBoundAttachments"))
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .Model(model => model.Id(p => p.Id))
                            )
                            .HtmlAttributes(new { style = "font-size:12" })
                            )

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>


<!-- Main content -->



@(Html.Kendo().Window()
    .Name("wHistory")
    .Size("auto")
    .Title("Operazioni:")
    .Visible(false)
    .Actions(actions => actions.Close())
    .Content(@<text>
        <div class="card-body">
            <div class="form-group col-11">
              @(Html.Kendo().Grid<LogDoc>()
                .Name("logs")
                .Columns(columns =>
                {
                    columns.Bound(p => p.Data).Title("Data").Width("50%").ClientTemplate("#= kendo.toString(Data, 'dd/MM/yyyy HH:mm') #");
                    columns.Bound(p => p.Operazione).Title("Operazione").Width("20%");
                    columns.Bound(p => p.Utente).Title("Utente").Width("20%");
                })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    //.Model(model => model.Id(p => p.ID))
                    .Read(read => read.Action("GetLogsItem", "Docs").Data("GetLogsItem"))

                    )
                    .HtmlAttributes(new { style = "font-size:12" })
                )
            </div>
        </div >
    </text>)
    .Width(600)
    .Height(180)
    .Modal(true)
)
@(Html.Kendo().Dialog()
        .Name("wElimina")
        .Title("Eliminazione")
        .Content("<p>Confermi l'eliminazione del file?<p>")
        .Width(400)
        .Modal(false)
    .Visible(false)
        .Actions(actions =>
        {
            actions.Add()
            .Text("Annulla")
            .Action("onAnnulla");
            actions.Add().Text("Elimina")
            .Primary(true)
            .Action("onElimina");
    })
    )