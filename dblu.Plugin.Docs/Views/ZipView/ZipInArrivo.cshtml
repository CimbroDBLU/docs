@model dblu.Portale.Plugin.Docs.ViewModels.ZipInArrivoViewModel

@using dblu.Portale.Plugin.Docs.ViewModels
@using dblu.Docs.Models
@using dblu.Docs.Classi
@using dblu.Portale.Core.Infrastructure.Interfaces
@using dblu.Portale.Core.Infrastructure.Identity.Classes
@inject dblu.Portale.Plugin.Docs.Services.ZipService _zipservice
@inject dblu.Docs.Interfacce.ISoggettiService  _sggservice
@inject dblu.Portale.Plugin.Docs.Services.AllegatiService _allservice
@inject dblu.Portale.Core.Infrastructure.Identity.Services.IUserManager _Man


@using Kendo.Mvc.UI
@using Syncfusion.EJ2
@addTagHelper *, Kendo.Mvc
@addTagHelper *, Syncfusion.EJ2

@{
    ViewData["Title"] = "Documenti da processare";

    List<dblu.Docs.Models.TipiElementi> ListaTipiElementi;
    //List<SelectListItem> ListaRuoliZip = _zipservice.GetRuoliZip(Context.User.Claims);

    //TipiAllegati TipoAll = _zipservice._allMan.GetTipoAllegato("ZIP");
    TipiAllegati TipoAll;
    if (!string.IsNullOrEmpty(Model.TipoAll))
    {
        TipoAll = _zipservice._allMan.GetTipoAllegato(Model.TipoAll);
    }
    else
    {
        TipoAll = _zipservice._allMan.GetTipoAllegato("ZIP");
    }

    List<string> ListaRuoliZip = null;
    List<string> ListaRuoli = new List<string>();

    if (!string.IsNullOrEmpty(Model.Ruolo))
    {
        ListaRuoli = new List<string>();
        ListaRuoli.Add(Model.Ruolo);

    }
    else
    {
        ListaRuoli = _zipservice.GetRuoliTipoAll(Context.User.Claims, TipoAll.Codice);
    }


    var ListaServer = _zipservice._serMan.GetServersEmailinRoles(ListaRuoli, TipiRecordServer.CartellaFile);

    //var ListaServerIngresso = _mailservice._serMan.GetServerEmailInIngresso();
    if (ListaServer != null && ListaServer.Count > 0)
    {
        //var ListaRuoliServ = _mailservice.getRuoli(Context.User.Claims, ListaServer.ElementAt(0).Nome);
        ListaRuoliZip = _zipservice.getRuoli(ListaRuoli, ListaServer.ElementAt(0).Nome);
        ListaTipiElementi = _zipservice._elmMan.GetAllTipiElementi(ListaRuoliZip);
    }
    else
    {
        ListaTipiElementi = _zipservice._elmMan.GetAllTipiElementi(ListaRuoli);
    }
    bool mostraSposta = ListaServer.Count > 1;

    string IsPrintedLocally = "true";
    string Printer = "";
    if (!string.IsNullOrEmpty(_Man.GetCurrentUser(Context).Properties["Printer"]))
    {
        IsPrintedLocally = "false";
        Printer = _Man.GetCurrentUser().Properties["Printer"];
    }

    List<dblu.Docs.Models.Colonna> ElCols = _allservice.GetColonne("vELEMENTO");
}

<style>

    #gridZip td {
        font-size: 12px;
        padding-top: 0em;
        padding-bottom: 0em;
        height: 100%;
    }

    #zipAttachments td {
        font-size: 12px;
        padding-top: 0em;
        padding-bottom: 0em;
    }

    #gridZipElementi td {
        font-size: 12px;
        padding-top: 0em;
        padding-bottom: 0em;
    }

    #gridSoggettoElementiAperti td {
        font-size: 12px;
        padding-top: 0em;
        padding-bottom: 0em;
    }

    html body #zippdfviewer {
        width: 100% !important;
    }

    .new-tab-opener {
        display: none;
    }

    .my-icon-class-inoltra:before {
        content: "\e101"; /* Adds a glyph using the Unicode character number */
    }

    .my-icon-class-sposta:before {
        content: "\e903"; /* Adds a glyph using the Unicode character number */
    }

    .my-icon-class-cancella:before {
        content: "\e10c"; /* Adds a glyph using the Unicode character number */
    }

    .my-icon-class-download:before {
        content: "\e132"; /* Adds a glyph using the Unicode character number */
    }

    body.waiting * {
        cursor: progress;
    }
</style>

<script src="~/Scripts/dblupdf.js"></script>
<script src="~/Scripts/dblugrid.js"></script>
<script src="~/Scripts/zipinarrivo.js"></script>

<script>
    $(document).ready(function () {

        var zippdfviewer = document.getElementById('zippdfviewer').ej2_instances[0];
        zippdfviewer.stickyNotesSettings.author = '@User.Identity.Name' //'@User.Identity.Name.Replace('.',' ')';
        zippdfviewer.strikethroughSettings.author = '@User.Identity.Name';
        zippdfviewer.underlineSettings.author = '@User.Identity.Name';
        zippdfviewer.highlightSettings.author = '@User.Identity.Name';
        zippdfviewer.annotationSettings.author = '@User.Identity.Name';
        zippdfviewer.freeTextSettings.author = '@User.Identity.Name';
        zippdfviewer.annotationSettings.color = '#ff0000';
        zippdfviewer.freeTextSettings.author = '@User.Identity.Name';
        zippdfviewer.freeTextSettings.fontColor = '#ff0000';
        zippdfviewer.freeTextSettings.fontSize = '20';
        zippdfviewer.arrowSettings.author = '@User.Identity.Name';
        zippdfviewer.enableAnnotationToolbar=true;

    });
</script>

<script>

    UrlActions = {
        ZipView_CaricaDettaglio: '@Url.Action("InArrivo_CaricaDettaglio", "ZipView")',
        ZipView_ZipFileCompleto: '@Url.Action("ZipFileCompleto", "ZipView")',
        ZipView_editDettaglioElemento: '@Url.Action("editDettaglioElemento", "ZipView")',
        ZipView_ApriFile: '@Url.Action("ApriFile", "ZipView")',
        ZipView_AllegaAElementoFascicolo: '@Url.Action("AllegaAElementoFascicolo", "ZipView")',
        ZipView_GetSoggetto: '@Url.Action("GetSoggetto", "ZipView")',
        ZipView_NotificaAssociazione: '@Url.Action("NotificaAssociazione", "ZipView")',
        ZipView_InArrivo_Cancella: '@Url.Action("InArrivo_Cancella", "ZipView")',
        ZipView_InArrivo_Sposta: '@Url.Action("InArrivo_Sposta", "ZipView")',
        ZipView_InArrivo_Stampato: '@Url.Action("InArrivo_Stampato", "ZipView")',

        ZipView_InArrivo_Stampa: '@Url.Action("InArrivo_Stampa", "ZipView")',

        ZipView_StampaRiepilogo:'@Url.Action("StampaRiepilogo","ZipView" )',
        ZipView_CancellaElemento:'@Url.Action("CancellaElemento", "ZipView" )',
        ZipView_CreaElementoFascicolo: '@Url.Action("CreaElementoFascicolo","ZipView")',

        sggservice_UrlServizio: '@_sggservice.UrlServizio()',
        sggservice_UrlServizioRicercaElementi: "@_sggservice.UrlServizioRicercaElementi()",
        Pdf_Editor: '@Url.Action("Editor", "PdfEditor")',
        PdfEditor_GetPdfEditAction: '@Url.Action("GetPdfEditAction", "PdfEditor")'
    };


    TipoAll = {
        Codice: '@TipoAll.Codice'
    };

    TipiOggetto = {
        ALLEGATO: '@TipiOggetto.ALLEGATO'
    };

    PdfCorrente.Printer = '@Printer';

    function MostraSposta(dataItem) {

        if (@mostraSposta)
            return true;
        else
            return false;
    }

</script>

<section class="content-header">
    <h1>
        Documenti in arrivo
    </h1>
    <ol class="breadcrumb">
        <li><a href="/Index"><i class="fa fa-dashboard"></i>Home</a></li>
        <li><a href="/ZipView/ZipInArrivo">Documenti in arrivo</a></li>
    </ol>
</section>

<!-- Main content -->
<section class="content">

    <div class="row" hidden="@(ListaServer.Count <= 1)">
        <div class="col-xs-5">
            <label class="control-label col-md-4" style="font-size:12px">Cartella:</label>
            <div class="col-md-6">
                @(Html.Kendo().ComboBox()
                    .Name("cmbCartelleZip")
                    .Placeholder("Seleziona cartella...")
                    .DataTextField("Nome")
                    .DataValueField("Cartella")
                    .BindTo(ListaServer)
                    .SelectedIndex(0)
                    .Suggest(true)
                    .HtmlAttributes(new { style = "width:100%;" })
                    .Events(e =>
                    {
                        e.Select("onSelectCartella");
                    })
                )
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-5">
            <div class="box box-solid box-default">
                @Html.Hidden("IdAllegato")

                <div class="box-body">
                    <div class="k-grid">
                        @(Html.Kendo().Grid<Allegati>()
                            .Name("gridZip")
                            .Columns(columns =>
                            {
                                columns.Bound(p => p.Id).Title("Id").Width(0).Hidden();
                                columns.Bound(p => p.Chiave4).Title("Nome").Width(0).Hidden();
                                columns.Bound(p => p.Chiave3).Title(TipoAll.Attributi.DescrizioneChiave("Chiave3")).Width(300)
                                .ClientTemplate("<span> cliente #: Chiave3# </span> <br/>"
                                    + "<span><b> #: Chiave4# </b></span>");
                                columns.Bound(p => p.Descrizione).Title("Descrizione").Width(150)
                                .ClientTemplate("<span> #: Descrizione# </span> <br/>"
                                    + "<span><b> rif. #: Chiave2# </b></span>");
                                columns.Bound(p => p.DataC).Title("Data").Width(100).Format("{0:dd/MM/yy HH:mm}");
                                columns.Bound(p => p.LastOp).Width(75).Title("Operaz.").ClientTemplate("#= xIconLastOp(data) #");
                                columns.Command(command => command.Custom("History").Template("#= xIconLastOp(data) #").Click("viewZipHistory").IconClass("k-icon ").HtmlAttributes(new { style = "width:30px " })).Hidden();
                            })
                             .ToolBar(toolbar =>
                             {
                                 toolbar.Custom().Text("Sposta").IconClass("k-icon my-icon-class-sposta").HtmlAttributes(new { style = "width:75px", onclick = "SpostaZip()" });
                                 toolbar.Custom().Text("Canc.").IconClass("k-icon my-icon-class-cancella").HtmlAttributes(new { style = "width:70px", onclick = "CancellaZip()" });
                                 toolbar.Search();
                             })
                        .Pageable()
                        .Sortable()
                        .Scrollable(s => s.Height("auto"))
                        .Filterable()
                        .Groupable(false)
                        .Selectable()
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(20)
                        .Batch(false)
                        .ServerOperation(true)
                        .AutoSync(true)
                        .Events(events => events.Error("error_handler"))
                        .Model(model =>
                        {
                            model.Id(p => p.Id);
                        })
                        .Read(read => read.Action("InArrivo_Read", "ZipView").Data("getOrigine"))
                        .Sort(sort => sort.Add("DataC").Ascending())
                        )
                        .Events(events => events
                        //.Remove("gridZipOnRemove")
                        .Change("gridZipOnChange")
                        )
                        .Resizable(resize => resize.Columns(true))
                        .HtmlAttributes(new { Height = "100%", style = "font-size:10" })
                        .Search(s => { s.Field(c => c.Descrizione); s.Field(c => c.Chiave1); s.Field(c => c.Chiave3); s.Field(c => c.Chiave4); })

                        )
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xs-7">
            <div class="box box-default">
                <div class="box-header">
                    <i class="ion ion-person"></i>
                    <h4 class="box-title">Cliente</h4>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="box-body">
                    <form>
                        <div class="row" id="divCliente">
                            <div class="form-group">
                                @*   <label class="control-label col-md-4" style="font-size:12px">Cliente</label> *@
                                <div class="col-md-12" style="width:80%;">
                                    <div class="form-row">
                                        <div class="form-group col-md-2">
                                            <input type="text" class="form-control" id="CodiceSoggetto" placeholder="" value="" onchange="CodiceSoggettoOnChange()" />
                                        </div>
                                        <div class="form-group col-md-6">
                                            <input type="text" class="form-control" id="NomeSoggetto" placeholder="" disabled value="" />
                                        </div>
                                        @(Html.Kendo().Button()
                                                .Name("CercaSoggetti")
                                                .HtmlAttributes(new { type = "button", @class = "k-primary" })
                                                .Content("Cerca")
                                                .Events(e => e.Click("CercaSoggettiOnClick"))
                                            )
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" id="divSoggettoElementiAperti" hidden>
                            <div class="form-group col-md-12" style="width:80%">
                                @(Html.Kendo().Grid<dblu.Docs.Interfacce.ISoggettoElementiAperti>()
                                .Name("gridSoggettoElementiAperti")
                                .Columns(columns =>
                                {
                                    columns.Bound(p => p.Numero).Title("Numero").Width("20%");
                                    columns.Bound(p => p.Riferimento).Title("Riferimento").Width("40%");
                                    columns.Bound(p => p.DataConsegna).Title("Data cons.").Width("20%").Format("{0:dd/MM/yy}");
                                    columns.Bound(p => p.Stato).Title("Stato").Width("20%");
                                })
                                .Pageable()
                                .Sortable()
                                .Scrollable(s => s.Height("auto"))
                                .Filterable()
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .PageSize(10)
                                    .Batch(false)
                                    .ServerOperation(true)
                                    .AutoSync(true)
                                    .Events(events => events.Error("error_handler"))
                                    .Model(model =>
                                    {
                                        model.Id(p => p.Numero);
                                    })
                                    .Read(read => read.Action("SoggettoElementiAperti", "ZipView").Data("getSoggetto"))
                                 )
                                .Groupable(false)
                                .Resizable(resize => resize.Columns(true))
                                .HtmlAttributes(new { style = "font-size:10" })
                            )
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <div class="box box-default" id="divFascicolo" hidden>
                @Html.Hidden("IdFascicolo")
                @Html.Hidden("IdElemento")
                <div class="box-header with-border">
                    <i class="ion ion-folder"></i>
                    <h4 class="box-title">Fascicolo / Elementi</h4>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse" id="CollapseFascicolo">
                            <i class="fa fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="box-body">
                    <form>
                        <div class="form-group">
                            @* <label class="control-label col-md-4" style="font-size:12px">Fascicolo / Elemento</label>*@
                            <div class="col-md-12" style="width:100%;">
                                <div class="form-row">
                                    <div class="form-group col-md-6">
                                        <input type="text" class="form-control" id="DescrizioneElemento" placeholder="" value="" />
                                    </div>
                                    <div class="form-group col-md-2">
                                        @(Html.Kendo().Button()
                                                .Name("CercaFascicolo")
                                                .HtmlAttributes(new { type = "button", @class = "k-primary" })
                                                .Content("Cerca")
                                            .Events(e => e.Click("CercaElementiOnClick"))
                                        )
                                    </div>
                                    <div class="form-group col-md-2">
                                        @(Html.Kendo().Button()
                                    .Name("Completa")
                                    .HtmlAttributes(new { type = "button", @class = "k-primary" })
                                    .Content("Operazione Completa")
                                    .Events(e => e.Click("ZipCompleto"))
                                    )
                                    </div>
                                    <div class="form-group col-md-2">
                                        @(Html.Kendo().Button()
                                            .Name("StampaRiepilogo")
                                            .HtmlAttributes(new { type = "button", @class = "k-primary" })
                                            .Content("Stampa Riepilogo")
                                            .Events(e => e.Click("StampaRiepilogo"))
                                        )
                                    </div>

                                </div>
                            </div>
                        </div>
                        <div class="form-group" id="divElemento">
                            <div class="col-md-12" style="width:100%;">

                                <div class="form-row">
                                    <div class="form-group col-md-12">
                                        @(Html.Kendo().Grid<EmailElementi>()
                                            .Name("gridZipElementi")
                                            .Columns(columns =>
                                            {
                                                columns.Bound(p => p.Id).Title("Id").Hidden(true);
                                                columns.Bound(p => p.IsUltimo).Title("Ult.").Width(30);
                                                columns.Bound(p => p.DscTipoElemento).Title("Tipo").Width(60);
                                                columns.Bound(p => p.DscElemento).Title("Descrizione").Width("40%");
                                                columns.Bound(p => p.Campo1).Title(ElCols.ElementAt(0).Des).Visible(ElCols.ElementAt(0).Visible).Width(50);
                                                columns.Bound(p => p.Campo2).Title(ElCols.ElementAt(1).Des).Visible(ElCols.ElementAt(1).Visible).Width(50);
                                                columns.Bound(p => p.Campo3).Title(ElCols.ElementAt(2).Des).Visible(ElCols.ElementAt(2).Visible).Width(50);
                                                columns.Bound(p => p.Campo4).Title(ElCols.ElementAt(3).Des).Visible(ElCols.ElementAt(3).Visible).Width(50);
                                                columns.Bound(p => p.Campo5).Title(ElCols.ElementAt(4).Des).Visible(ElCols.ElementAt(4).Visible).Width(50);
                                                columns.Bound(p => p.LastOp).Width(50).Title("Operaz.").ClientTemplate("#= xIconLastOp(data) #");
                                                columns.Command(command => command.Custom("History").Template("#= xIconLastOp(data) #").Click("viewHistoryEl").IconClass("k-icon ").HtmlAttributes(new { style = "width:30px " })).Hidden();
                                            })
                                            .ToolBar(toolbar =>
                                            {
                                                // toolbar.ClientTemplateId("GridToolbarTemplate");
                                                toolbar.Custom().Text("Apri").IconClass("k-icon k-i-folder-open").HtmlAttributes(new { style = "width:75px", onclick = "ApriElementoGrid()" });
                                                toolbar.Custom().Text("Agg.").IconClass("k-icon k-i-folder-add").HtmlAttributes(new { style = "width:75px", onclick = "AggiungiAElementoGrid()" });
                                                toolbar.Custom().Text("Canc.").IconClass("k-icon k-i-delete").HtmlAttributes(new { style = "width:75px", onclick = "CancellaElemento()" });
                                                toolbar.Search();
                                            })
                                            .DataSource(dataSource => dataSource
                                                 .Ajax()
                                                 .PageSize(5)
                                                 .Batch(false)
                                                 .ServerOperation(true)
                                                 .AutoSync(true)
                                                 .Events(events => events.Error("error_handler"))
                                                 .Model(model =>
                                                 {
                                                     model.Id(p => p.Id);
                                                 })
                                                 .Read(read => read.Action("ListaZipElementi", "ZipView").Data("getFascicolo"))
                                             )
                                             .Groupable(false)
                                             .Selectable()
                                             .HtmlAttributes(new { style = "font-size:10" })
                                             .Events(events => events
                                                 .Change("gridZipElementiOnChange"))
                                        )
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-4" style="font-size:12px">Nuovo</label>
                            <div class="col-md-10" style="width:80%;">
                                <div id="DivGridElementi">
                                    <div class="grid-container">
                                        @foreach (dblu.Docs.Models.TipiElementi item in ListaTipiElementi)
                                        {
                                            @if (item.AggregaAElemento == false)
                                            {
                                                <div class="grid-item">
                                                    <button id="@item.Codice" type="button" onclick="NuovoElemento(this, '@item.Categoria', '@item.Codice')" class="b btn btn-info">@item.Descrizione </button>
                                                </div>
                                            }
                                        }
                                        <style>
                                            .grid-container {
                                                display: inline-grid;
                                                grid-template-columns: auto auto auto;
                                                background-color: #2196F3;
                                                padding: 5px;
                                            }

                                            .grid-item {
                                                background-color: rgba(255, 255, 255, 0.8);
                                                border: 1px solid rgba(0, 0, 0, 0.8);
                                                padding: 5px;
                                                font-size: 15px;
                                                text-align: center;
                                            }

                                            .b {
                                                margin-left: 5px;
                                            }
                                        </style>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <div class="box box-default">
                <div class="box-header with-border">
                    <i class="ion ion-folder"></i>
                    <h4 class="box-title">Allegati</h4>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse" id="CollapseContenuto">
                            <i class="fa fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="box-body">
                    <form>
                        <div class="form-group" hidden>
                            <label class="control-label col-md-2" style="font-size:12px">Testo</label>
                            <div class="col-md-12" style="width:100%">
                                <textarea class="form-control" id="TestoEmail" name="TestoEmail" rows="5" style="width:100%" readonly="readonly"></textarea>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2" style="font-size:12px" hidden>Allegati da includere</label>
                            <div class="col-md-12" style="width:100%">
                                @(Html.Kendo().Grid<EmailAttachments>()
                                    .Name("zipAttachments")
                                    .PersistSelection()
                                    .Columns(columns =>
                                    {
                                        columns.Select().Width(50).Title("Allega");
                                        columns.Bound(p => p.NomeFile).Title("Nome ").Width("40%");
                                        columns.Bound(p => p.IsIncluso).Title("Incluso nel pdf").Width("10%");
                                        columns.Bound(p => p.Avvisi).Title("Avvisi").ClientTemplate("#= templateAvvisi(data)#").Width("40%");
                                        columns.Command(command =>
                                        {
                                            command.Custom("download").Text(" ").Click("ScaricaAllegato").IconClass("k-icon my-icon-class-download");
                                        }).Width("10%");
                                    })
                                    .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .Model(model => model.Id(p => p.Id))
                                        )
                                    .HtmlAttributes(new { style = "font-size:12" })
                                    )
                                @*
                                     .ClientTemplate("<input type='checkbox' #= Incluso ? checked='checked' :'' # />")
                                     .Events(events => events.Change("Attachments_OnRowSelect"))
                                    .Events(ev => ev.Change("xxonChange"))*@
                            </div><br /><br />
                        </div>

                        <div class="form-group" style="margin-top:10px" hidden>
                            <div class="col-md-10" style="font-size:15px">
                                @(Html.Kendo().CheckBox().Name("allegamail")
                                    .Checked(false).Label("Allega il testo della Mail")
                                )
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="box box-solid box-default">
                <div class="box-body">
                    <div class="form-group" style="margin-top:10px">
                        <div class="form-row">
                            <div class="col-md-12" style="width:100%" id="anteprimapdf">
                                @(Html.Kendo().ToolBar()
                                       .Name("pdfToolBar")
                                       .Items(items =>
                                       {
                                           items.Add().Type(CommandType.Button).Id("tbruotasx").Text("-90°").Icon("undo");
                                           items.Add().Type(CommandType.Button).Id("tbruotadx").Text("+90°").Icon("redo");
                                           items.Add().Type(CommandType.Button).Id("tbcanc").Text("Canc.").Icon("delete");
                                           items.Add().Type(CommandType.Separator);
                                           items.Add().Type(CommandType.Button).Id("tbrefresh").Text("Ricarica").Icon("refresh");
                                           items.Add().Type(CommandType.Separator);
                                           items.Add().Type(CommandType.Button).Id("tbsalva").Text("Salva").Icon("save");
                                           items.Add().Type(CommandType.Separator);
                                           items.Add().Type(CommandType.Button).Id("tbespandi").Text("Espandi Ctrl+Maiusc").Icon("zoom-in");
                                           items.Add().Type(CommandType.Separator);
                                           items.Add().Template("<label id='tbdescrizione' class='k-label' style='font-size:16px;font-weight:400;padding-top:6px' ></label>");
                                       })
                                       .Events(e => e.Click("tbpdf_click"))
                                   )

                                <ejs-pdfviewer id="zippdfviewer" serviceUrl="/api/PdfEditor" documentPath=""
                                               enablePrint="true"
                                               printEnd="documentPrinted"
                                               documentLoad="documentLoaded"
                                               annotationAdd="annotationAdd"
                                               enableStampAnnotations="false"
                                               exportSuccess="exportSuccess"
                                               printStart="documentPrint"
                                               locale="it-IT"
                                               downloadFileName="@string.Concat("",".pdf")" height="900px"
                                               toolbarSettings="@(new Syncfusion.EJ2.PdfViewer.PdfViewerToolbarSettings { ShowTooltip = true, ToolbarItems = "PageNavigationTool,PanTool,MagnificationTool,SelectionTool,SearchOption,PrintOption,DownloadOption,UndoRedoTool,AnnotationEditTool"  })">
                                </ejs-pdfviewer>

                            </div>
                            <div class="col-md-12" style="width:80%" id="anteprimajpg" hidden>
                                <input type="image" id="imageviewer" src="" style="height:700px;width:auto">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <form class="new-tab-opener" method="get" target="_blank"></form>
</section>


<script type="text/javascript">

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>


@(Html.Kendo().Window()
    .Name("detElemento")
    .Visible(false).Modal(false)
    .Title("Dettaglio Elemento")
    .Draggable()
    .Resizable()
    .Width(750)
    .Position(p => p.Top(200).Left(0))
    .Actions(actions => actions.Pin().Minimize().Maximize().Close())
    .Events(e => e.Close("detElementoClose").Open("detElementoOpen")  )
)
@(Html.Kendo().Window()
    .Name("wCercaElementi")
    .Visible(false).Modal(false)
    .Title("Cerca Elemento")
    .Draggable()
    .Resizable()
    .Width(900)
    .Height(700)
    .Modal(true)
    .Position(p => p.Top(0).Left(0))
    .Actions(actions => actions.Pin().Minimize().Maximize().Close())
    .Events(e => e.Close("wCercaElementiClose") )
)
@(Html.Kendo().Window()
    .Name("cercasoggetti")
    .Size("auto")
    .Title("Cerca")
    .Visible(false)
    .Actions(actions => actions.Refresh().Minimize().Maximize().Close())
    .Content("")
    .Draggable()
    .Resizable()
    .Scrollable(true)
    .Width(900)
    .Height(700)
    .Modal(true)

)
@(Html.Kendo().Window()
    .Name("wSposta")
    .Size("auto")
    .Title("Sposta in:")
    .Visible(false)
    .Actions(actions => actions.Close())
    .Content(@<text>
        <div class="box-body">
            <form>
                <div class="form-group">
                    @*              <label class="control-label col-md-1" style="font-size:14px">indirizzo</label>*@
                    <div class="form-group col-md-8">
                         @(Html.Kendo().ComboBox()
                            .Name("zipServer_sposta")
                            .Placeholder("Seleziona cartella...")
                            .DataTextField("Nome")
                            .DataValueField("Cartella")
                            .BindTo(ListaServer)
                            .Suggest(true)
                            .HtmlAttributes(new { style = "width:100%;" })
                        )
                    </div>
                    <div class="form-group col-md-2">
                        @(Html.Kendo().Button()
                        .Name("okSposta")
                        .Content("Sposta")
                        .Events(ev => ev.Click("spostaOnClick"))
                        )
                    </div>
                </div>
            </form >
        </div >
    </text>)
    .Width(600)
    .Height(180)
    .Modal(true)
                 )
@(Html.Kendo().Window()
    .Name("wHistory")
    .Size("auto")
    .Title("Operazioni:")
    .Visible(false)
    .Actions(actions => actions.Close())
    .Content(@<text>
        <div class="box-body">
            <div class="form-group col-md-11">
              @(Html.Kendo().Grid<LogDoc>()
                .Name("logs")
                .Columns(columns =>
                {
                    columns.Bound(p => p.Data).Title("Data").Width("50%").ClientTemplate("#= kendo.toString(Data, 'dd/MM/yyyy HH:mm') #");
                    columns.Bound(p => p.Operazione).Title("Operazione").Width("20%");
                    columns.Bound(p => p.Utente).Title("Utente").Width("20%");
                })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Read(read => read.Action("GetLogsItem", "Docs").Data("GetLogsItem"))

                    )
                    .HtmlAttributes(new { style = "font-size:12" })
                )
            </div>
        </div >
    </text>)
    .Width(600)
    .Height(180)
    .Modal(true)
)
@(Html.Kendo().Dialog()
    .Name("dialogElimina")
    .Title("Eliminazione")
    .Content("<p>Sei sicuro di eliminare il documento?<p>")
    .Width(400)
    .Modal(false)
    .Visible(false)
    .Actions(actions =>
    {
        actions.Add()
        .Text("Annulla")
        .Action("onAnnullaElimina");
        actions.Add().Text("Elimina")
        .Primary(true)
        .Action("onConfermaElimina");
    })
)
@(Html.Kendo().Window()
    .Name("wPdfEditor")
    .Size("auto")
    .Title("Editor")
    .Visible(false)
    .Actions(actions => actions.Refresh().Close())
    .Content("")
    .Scrollable(true)
    .Modal(true)
    .Events(e => e.Close("wPdfEditorClose").Open("wPdfEditorOpen"))
);


