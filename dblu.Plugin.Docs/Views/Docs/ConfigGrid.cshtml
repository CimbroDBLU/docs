

@using dblu.Portale.Plugin.Docs.ViewModels
@using Kendo.Mvc.UI
@model List<dblu.Docs.Models.Colonna>

<section class="content-header">
    <h1>
        Configurazione griglie
    </h1>
    <ol class="breadcrumb">
        <li><a href="/Index"><i class="fa fa-dashboard"></i>Home</a></li>
        <li class="active">Griglie</li>
    </ol>
</section>

<section class="content">
    <div class="row">
        <div class="col-md-12">
            <label class="control-label col-md-4" style="font-size:12px">Tipo griglia:</label>
            <div class="col-md-6">
                @(Html.Kendo().ComboBox()
                    .Name("ConfigGrid")
                    .Placeholder("Seleziona Griglia...")
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .BindTo(new List<SelectListItem>() {
                      new SelectListItem() {
                        Text = "Allegati", Value = "vALLEGATO "
                      },
                      new SelectListItem() {
                        Text = "Elementi", Value = "vELEMENTO "
                      },
                      new SelectListItem() {
                        Text = "Fascicoli", Value = "vFASCICOLO"
                      }
                    })
                    .SelectedIndex(0)
                    .Suggest(true)
                    .HtmlAttributes(new { style = "width:100%;" })
                    .Events(e =>
                    {
                        e.Select("onSelectGrid");
                    })

                )
            </div>
        </div>
    </div>


    <!-- Main row -->
    <div class="row">
        <div class="box-body">
           

                    @(Html.Kendo().Grid<dblu.Docs.Models.Colonna>()
                           .Name("gridColonne")
                           .Columns(columns =>
                           {
                               columns.Bound(p => p.Field).Title("Campo").Width(200);
                               columns.Bound(p => p.Des).Title("Descrizione").Width(200);
                               columns.Bound(p => p.Visible).ClientTemplate("<input type='checkbox' #= Visible ? checked='checked':'' # class='chkbxW' disabled />").Width(100);
                               columns.Command(command =>
                               {
                                   command.Edit().Text("Modifica");
                               }).Width(500);
                           })
                           .ToolBar(toolbar => toolbar.Create())
                           .Editable(editable => editable.Mode(GridEditMode.InLine))
                           .Pageable()
                           .Sortable()
                           .Scrollable()
                           .DataSource(dataSource => dataSource
                                .Ajax()
                                .PageSize(20)
                                .Model(model =>
                                {
                                    model.Id(p => p.Field);
                                    model.Field(p => p.Field).Editable(false);
                                })
                                .Read(read => read.Action("ConfigGrid_Read", "Configurazione").Data("getConfigurazione"))
                                .Update(update => update.Action("ConfigGrid_Update", "Configurazione").Data("getConfigurazione"))
                            
                         )

                        )

                </div>

           
    </div>


    <script type="text/javascript">
        var NomeConfig = null;

           function error_handler(e) {
                if (e.errors) {
                    var message = "Errors:\n";
                    $.each(e.errors, function (key, value) {
                        if ('errors' in value) {
                            $.each(value.errors, function () {
                                message += this + "\n";
                            });
                        }
                    });
                    alert(message);
                }
            }
        function onSelectGrid(e) {

            if (e.item) {
                //var dataItem = this.dataItem(e.item.index());
                NomeConfig = e.dataItem.Value;

                $("#gridColonne").data("kendoGrid").dataSource.read();


            }
        }
        function getConfigurazione() {
                var configurazione = "";
                   if (NomeConfig != null) {
                       configurazione = NomeConfig;
                }
            else
               configurazione = $("#ConfigGrid").data("kendoComboBox").value();
            return {
                NomeConfig: configurazione
            };
            //var configurazione = "";
            //return {
            //    NomeConfig: $("#ConfigGrid").data("kendoComboBox").value()
            //};
        }


    </script>
</section>