@*@model dblu.Docs.Models.Allegati*@

@model dblu.Portale.Plugin.Docs.ViewModels.inArrivoView

@using dblu.Docs.Classi
@using dblu.Docs.Models
@using dblu.Portale.Core.Infrastructure.Interfaces
@using dblu.Portale.Core.Infrastructure.Identity.Classes
@using dblu.Portale.Core.UI
@inject dblu.Portale.Plugin.Docs.Services.MailService _mailservice
@inject dblu.Docs.Interfacce.ISoggettiService  _sggservice
@inject dblu.Portale.Plugin.Docs.Services.AllegatiService _allservice
@inject dblu.Portale.Core.Infrastructure.Identity.Services.IUserManager _Man

@using Kendo.Mvc.UI
@using Syncfusion.EJ2
@using dblu.Portale.Plugin.Docs.ViewModels
@using Syncfusion.EJ2.Navigations;
@addTagHelper *, Kendo.Mvc
@addTagHelper *, Syncfusion.EJ2

@{
    ViewData["Title"] = "Email in arrivo";
    List<dblu.Docs.Models.TipiElementi> ListaTipiElementi;
    List<dblu.Docs.Models.TipiElementi> ListaTipiElementiServ;
    TipiAllegati TipoAll = _mailservice._allMan.GetTipoAllegato("EMAIL");
    List<string> ListaRuoli = null;

    if (!string.IsNullOrEmpty(Model.Ruolo))
    {
        ListaRuoli = new List<string>();
        ListaRuoli.Add(Model.Ruolo);

    }
    else
    {
        ListaRuoli = _mailservice.getRuoli(Context.User.Claims, "");
    }

    ListaTipiElementi = _mailservice._elmMan.GetAllTipiElementi(ListaRuoli);
    var ListaServer = _mailservice._serMan.GetServersEmailinRoles(ListaRuoli, TipiRecordServer.CartellaMail);
    var ListaServerIngresso = _mailservice._serMan.GetServerEmailInIngresso();

    if (ListaServer != null && ListaServer.Count > 0)
    {
        var ListaRuoliServ = _mailservice.getRuoli(ListaRuoli, ListaServer);
        ListaTipiElementiServ = _mailservice._elmMan.GetAllTipiElementi(ListaRuoliServ);
    }
    else
    {
        ListaTipiElementiServ = ListaTipiElementi;
    }
    bool mostraSposta = ListaServerIngresso.Count > 1;

    string IsPrintedLocally = "true";
    string Printer = "";
    if (!string.IsNullOrEmpty(_Man.GetCurrentUser(Context).Properties["Printer",""]))
    {
        IsPrintedLocally = "false";
        Printer = _Man.GetCurrentUser().Properties["Printer",""];
    }


    List<dblu.Docs.Models.Colonna> ElCols = _allservice.GetColonne("vELEMENTO");


    var Title = "Email in arrivo";
}


@(await Html.RenderComponentAsync<PageTitle>(RenderMode.Server,  new { nTitle = Title}))

<style>

    #gridEmail td {
        font-size: 12px;
        padding-top: 0em;
        padding-bottom: 0em;
        height: 100%;
    }

    #emailAttachments td {
        font-size: 12px;
        padding-top: 0em;
        padding-bottom: 0em;
    }

    #gridemailElementi td {
        font-size: 12px;
        padding-top: 0em;
        padding-bottom: 0em;
    }

    #gridSoggettoElementiAperti td {
        font-size: 12px;
        padding-top: 0em;
        padding-bottom: 0em;
    }

    html body #emailpdfviewer {
        width: 100% !important;
    }

    .new-tab-opener {
        display: none;
    }

    .my-icon-class-inoltra:before {
        content: "\e101"; /* Adds a glyph using the Unicode character number */
    }

    .my-icon-class-rispondi:before {
        content: "\e100"; /* Adds a glyph using the Unicode character number */
    }

    .my-icon-class-sposta:before {
        content: "\e903"; /* Adds a glyph using the Unicode character number */
    }

    .my-icon-class-cancella:before {
        content: "\e10c"; /* Adds a glyph using the Unicode character number */
    }

    .my-icon-class-download:before {
        content: "\e132"; /* Adds a glyph using the Unicode character number */
    }

.my-icon-class-mostra:before { content: "\e501"; /* Adds a glyph using the Unicode character number */ }

    body.waiting * {
        cursor: progress;
    }
</style>

<script>



    $(document).ready(function () {

        var emailpdfviewer = document.getElementById('emailpdfviewer').ej2_instances[0];
        emailpdfviewer.stickyNotesSettings.author = '@User.Identity.Name' //'@User.Identity.Name.Replace('.',' ')';
        emailpdfviewer.strikethroughSettings.author = '@User.Identity.Name';
        emailpdfviewer.underlineSettings.author = '@User.Identity.Name';
        emailpdfviewer.highlightSettings.author = '@User.Identity.Name';
        emailpdfviewer.annotationSettings.author = '@User.Identity.Name';
        emailpdfviewer.freeTextSettings.author = '@User.Identity.Name';
        emailpdfviewer.annotationSettings.color = '#ff0000';
        emailpdfviewer.freeTextSettings.author = '@User.Identity.Name';
        emailpdfviewer.freeTextSettings.fontColor = '#ff0000';
        emailpdfviewer.freeTextSettings.fontSize = '20';
        emailpdfviewer.arrowSettings.author = '@User.Identity.Name';
        emailpdfviewer.enableAnnotationToolbar=true;
    });


</script>


<script src="~/Scripts/dblupdf.js"></script>
<script src="~/Scripts/dblugrid.js"></script>
<script src="~/Scripts/emailinarrivo.js"></script>

<script>
    // variabili globali

    UrlActions = {
        MailView_InArrivoCaricaDettaglio: '@Url.Action("InArrivoCaricaDettaglio", "MailView")',
        MailView_editDettaglioElemento: '@Url.Action("editDettaglioElemento", "MailView" )',
        MailView_InArrivo_Inoltra: '@Url.Action("InArrivo_Inoltra","MailView" )',
        MailView_InArrivo_Rispondi: '@Url.Action("InArrivo_Rispondi","MailView" )',
        MailView_InArrivo_Sposta: '@Url.Action("InArrivo_Sposta", "MailView" )',
        MailView_InArrivoApri: '@Url.Action("InArrivoApri", "MailView" )',
        MailView_InArrivo_Cancella: '@Url.Action("InArrivo_Cancella", "MailView" )',
        MailView_InArrivo_Completa: '@Url.Action("InArrivo_Completa","MailView" )',
        MailView_ApriFile: '@Url.Action("ApriFile", "MailView" )',
        MailView_AllegaAElementoFascicolo: '@Url.Action("AllegaAElementoFascicolo","MailView")',
        MailView_GetSoggetto: '@Url.Action("GetSoggetto", "MailView")',
        MailView_GetSoggettiByMail: '@Url.Action("GetSoggettiByMail", "MailView")',
        MailView_NotificaAssociazione: '@Url.Action("NotificaAssociazione","MailView" )',
        MailView_CreaElementoFascicolo: '@Url.Action("CreaElementoFascicolo","MailView")',
        MailView_DuplicaElemento: '@Url.Action("DuplicaElemento","MailView")',
        MailView_StampaRiepilogo: '@Url.Action("StampaRiepilogo","MailView" )',
        MailView_CancellaElemento: '@Url.Action("CancellaElemento", "MailView" )',
        MailView_InArrivo_Stampato: '@Url.Action("InArrivo_Stampato", "MailView")',
        MailView_InArrivo_Stampa: '@Url.Action("InArrivo_Stampa", "MailView")',
        sggservice_UrlServizio: '@_sggservice.UrlServizio()',
        sggservice_UrlServizioRicercaElementi: '@_sggservice.UrlServizioRicercaElementi()',
        MailPdfViewer_EditorPdf: '@Url.Action("EditorPdf", "MailPdfViewer")',
        MailPdfViewer_GetPdfEditAction: '@Url.Action("GetPdfEditAction", "MailPdfViewer")',
        Pdf_Editor: '@Url.Action("Editor", "PdfEditor")',
        ImagePreview: '@Url.Action("ImagePreview", "MailView")',
        ControllaStampa: '@Url.Action("ControllaStampa", "MailView")',
        MailView_GetHTML:'@Url.Action("GetHTML", "MailView")'

        
    };

    TipoAll = {
        Codice: '@TipoAll.Codice'
    };

    TipiOggetto = {
        ALLEGATO: '@TipiOggetto.ALLEGATO'
        };

    PdfCorrente.Printer = '@Printer';

   function MostraSposta(dataItem) {

        if (@mostraSposta)
            return true;
        else
            return false;
    }

</script>

<div class="e-card">
    <div class="e-card-header">
        <div class="e-card-header-caption">
            <div class="e-card-header-title">
                @Title
            </div>
        </div>
    </div>
    <div class="e-card-separator"></div>
    <div class="e-card-content">
        <section class="content">
            <div class="container-fluid mb-2">
                <div class="row" hidden="@(ListaServer.Count <= 1)">
                    <div class="col-5">
                        <div class="row">
                            <label class="control-label col-4 mt-1" style="font-size:12px">Casella di posta:</label>
                            <div class="col-6">
                                @(Html.Kendo().DropDownList()
                    .Name("emailServer")
                   // .Placeholder("Seleziona Server...")
                    .DataTextField("Nome")
                    .DataValueField("Nome")
                    .BindTo(ListaServer)
                    .SelectedIndex(0)
                  //  .Suggest(true)
                    .HtmlAttributes(new { style = "width:100%;" })
                    .Events(e =>
                    {
                        e.Select("onSelectServer");
                    })

                )
                            </div>
                        </div>
                    </div>
                    <div class="col-7"></div>
                </div>
            </div>
            <div>
                @(Html.Kendo().Dialog()
        .Name("dialog")
        .Title("Eliminazione")
        .Content("<p>Sei sicuro di eliminare l'email?<p>")
        .Width(400)
        .Modal(false)
        .Visible(false)
        .Actions(actions =>
        {
            actions.Add()
            .Text("Annulla")
            .Action("onAnnulla");
            actions.Add().Text("Elimina")
            .Primary(true)
            .Action("onElimina");
        })
    )
            </div>
            <div>
                @(Html.Kendo().Dialog()
        .Name("dialogElemento")
        .Title("Eliminazione")
        .Content("<p>Sei sicuro di eliminare <strong>completamente</strong> l'elemento?<p>")
        .Width(400)
        .Modal(false)
        .Visible(false)
        .Actions(actions =>
        {
            actions.Add()
            .Text("Annulla")
            .Action("onAnnullaElemento");
            actions.Add().Text("Elimina")
            .Primary(true)
            .Action("onEliminaElemento");
        })
    )
            </div>
            <div class="row">
                <div class="col-5" style="align-self: auto;">
                    <div class="card card-outline card-secondary card-solid card-default">
                        @Html.Hidden("IdAllegato")

                        <div class="card-body p-0 m-0">
                            <div class="k-grid">
                                @(Html.Kendo().Grid<dblu.Docs.Models.AllegatoEmail>()
                        .Name("gridEmail")
                        .Columns(columns =>
                        {
                            columns.Bound(p => p.Id).Title("Id").Width(0).Hidden();
                            columns.Bound(p => p.Chiave4).Title("Nome").Width(0).Hidden();
                            columns.Bound(p => p.Mittente).Title(TipoAll.Attributi.Descrizione("Mittente")).Width(300)
                                        .ClientTemplate("<span> cliente #: Chiave3# </span> <br/>"
                                            + "<span><b> #: Chiave4# </b></span>"
                                            + "<span> #: Mittente# </span><br/>");
                            columns.Bound(p => p.Oggetto).Title("Oggetto").Width(150);
                            columns.Bound(p => p.Data).Title(TipoAll.Attributi.Descrizione("Data")).Width(100).Format("{0:dd/MM/yy HH:mm}");
                            columns.Bound(p => p.LastOp).Width(75).Title("Operaz.").ClientTemplate("#= xIconLastOp(data) #");
                            columns.Command(command => command.Custom("History").Template("#= xIconLastOp(data) #").Click("viewHistory").IconClass("k-icon ").HtmlAttributes(new { style = "width:30px " })).Hidden();
                        })
                             .ToolBar(toolbar =>
                             {
                                 toolbar.Custom().Text("Inoltra").IconClass("k-icon my-icon-class-inoltra").HtmlAttributes(new { style = "width:75px", onclick = "InoltraEmail(event)" });
                                 toolbar.Custom().Text("Sposta").IconClass("k-icon my-icon-class-sposta").HtmlAttributes(new { style = "width:75px", onclick = "SpostaEmail(event)" });
                                 toolbar.Custom().Text("Rispondi").IconClass("k-icon my-icon-class-rispondi").HtmlAttributes(new { style = "width:90px", onclick = "RispondiEmail(event)" });
                                 toolbar.Custom().Text("Canc.").IconClass("k-icon my-icon-class-cancella").HtmlAttributes(new { style = "width:70px", onclick = "CancellaEmail(event)" });
                                 toolbar.Custom().Text("Mostra").IconClass("k-icon my-icon-class-mostra").HtmlAttributes(new { style = "width:80px", onclick = "MostraEmail(event)" });
                                 toolbar.Search();
})
                        .Selectable()
                        .Pageable()
                        .Sortable()
                                    .Scrollable(s => s.Height("auto"))
                        .Filterable()
                        .Groupable(false)
                        .Selectable()
                        .DataSource(dataSource => dataSource
                            .Ajax()
                                        .PageSize(20)
                            .Batch(false)
                            .ServerOperation(true)
                            .AutoSync(true)
                            .Events(events => events.Error("error_handler"))
                            .Model(model =>
                            {
                                model.Id(p => p.Id);
                            })
                            .Read(read => read.Action("InArrivo_Read", "MailView").Data("getEmails"))
                            .Sort(sort => sort.Add("DataC").Ascending())
                         )
                         .Events(events => events
                            .Remove("OnRemove")
                            .Change("gridEmailOnChange")
                         )
                         .Resizable(resize => resize.Columns(true))
                         .HtmlAttributes(new { Height = "100%", style = "font-size:10" })

                        .Search(s=> { s.Field(c => c.Descrizione ); s.Field(c => c.Chiave1); s.Field(c => c.Chiave3); s.Field(c => c.Chiave4); })
                            .PersistSelection()
                            .Height(900)
                        )
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-7" style="align-self: auto;">
                    <div class="card card-outline card-secondary card-solid card-default" id="divSoggetto">
                        <div class="card-header p-1">
                            <i class="mt-2 fas fa-user float-left"></i>
                            <div class="card-title mt-1 ml-2">
                                Cliente
                            </div>
                            <div class="card-tools pull-right">
                                <button type="button" class="btn btn-card-tool" data-card-widget="collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body pb-0 pt-1">
                            <form class="form-group mb-0">
                                <div class="row" id="divCliente">
                                    <div class="col">
                                        <div class="row">
                                            <div class="mb-1 col-2" style="display:flex">
                                                <input type="text" id="CodiceSoggetto" style="width:100%" placeholder="" value="" onchange="CodiceSoggettoOnChange()" />
                                            </div>
                                            <div class="mb-1  col-6" style="display:flex">
                                                <input type="text" id="NomeSoggetto" style="width:100%" placeholder="" disabled value="" />
                                            </div>
                                            <div class="mb-1  col-2">
                                                @(Html.Kendo().Button()
                                            .Name("CercaSoggetti")
                                            .HtmlAttributes(new { type = "button" })
                                            .Content("Cerca Soggetto")
                                            .Events(e => e.Click("CercaSoggettiOnClick"))
                                        )
                                            </div>
                                            <div class="mb-1  col-2">
                                                @(Html.Kendo().Button()
                                            .Name("AssociaElemento")
                                            .HtmlAttributes(new { type = "button" })
                                            .Content("Associa")
                                            .Events(e => e.Click("AssociaElementoOnClick"))
                                        )
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row" id="divSoggettoElementiAperti" style="display:none">
                                        <div class="form-group col-12">
                                            @(Html.Kendo().Grid<dblu.Docs.Interfacce.ISoggettoElementiAperti>()
                                    .Name("gridSoggettoElementiAperti")
                                    .Columns(columns =>
                                    {
                                        columns.Bound(p => p.Numero).Title("Numero").Width("20%");
                                        columns.Bound(p => p.Riferimento).Title("Riferimento").Width("40%");
                                        columns.Bound(p => p.DataConsegna).Title("Data cons.").Width("20%").Format("{0:dd/MM/yy}");
                                        columns.Bound(p => p.Stato).Title("Stato").Width("20%");
                                    })
                                    .Pageable()
                                    .Sortable()
                                    .Scrollable(s => s.Height("auto"))
                                    .Filterable()
                                    .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .PageSize(10)
                                        .Batch(false)
                                        .ServerOperation(true)
                                        .AutoSync(true)
                                        .Events(events => events.Error("error_handler"))
                                        .Model(model =>
                                        {
                                            model.Id(p => p.Numero);
                                        })
                                        .Read(read => read.Action("SoggettoElementiAperti", "MailView").Data("getSoggetto"))
                                     )
                                    .Groupable(false)
                                    .Resizable(resize => resize.Columns(true))
                                    .HtmlAttributes(new { style = "font-size:10" })
                                )
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>

                    <div class="card card-outline card-secondary card-solid card-default" id="divFascicolo" style="display:none">
                        @Html.Hidden("IdFascicolo")
                        @Html.Hidden("IdElemento")
                        <div class="card-header p-1  with-border p-1 ">
                            <i class="mt-2 fas fa-archive float-left"></i>
                            <div class="card-title mt-1 ml-2">
                                Fascicolo\Elementi
                            </div>
                            <div class="card-tools pull-right">
                                <button type="button" class="btn btn-card-tool" data-card-widget="collapse" id="CollapseFascicolo">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body pb-0 pt-1">
                            <form>
                                <div class="mb-1">
                                    <div class="col-12" style="width:100%;">
                                        <div class="form-row">
                                            <div class="mb-1 col-6">
                                                <input type="text" class="form-control" id="DescrizioneElemento" placeholder="" value="" />
                                            </div>
                                            <div class="mb-1p col-2">
                                                @(Html.Kendo().Button()
                                        .Name("CercaFascicolo")
                                        .HtmlAttributes(new { type = "button", @class = "k-default" })
                                        .Content("Cerca")
                                    .Events(e => e.Click("CercaElementiOnClick"))
                                )
                                            </div>
                                            <div class="mb-1 col-2">
                                                @(Html.Kendo().Button()
                                        .Name("Completa")
                                        .HtmlAttributes(new { type = "button", @class = "k-default" })
                                        .Content("Email Completa")
                                        .Events(e => e.Click("EmailCompleta"))
                                    )
                                            </div>
                                            <div class="mb-1 col-2">
                                                @(Html.Kendo().Button()
                                            .Name("StampaRiepilogo")
                                            .HtmlAttributes(new { type = "button", @class = "k-default" })
                                            .Content("Riepilogo")
                                            .Events(e => e.Click("StampaRiepilogo"))
                                        )
                                            </div>

                                        </div>
                                    </div>
                                </div>
                                <div class="mb-1" id="divElemento">
                                    <div class="col-12" style="width:100%;">
                                        <div class="form-row" style="display:none">
                                            <div class="form-group col-2">
                                                @(Html.Kendo().Button()
                                        .Name("ApriDettaglio")
                                        .HtmlAttributes(new { type = "button", @class = "k-default" })
                                        .Content("Apri")
                                    .Events(e => e.Click("ApriDettaglioOnClick"))
                                    )
                                            </div>
                                            <div class="form-group col-4">
                                                @(Html.Kendo().Button()
                                        .Name("AggiungiAElemento")
                                        .HtmlAttributes(new { type = "button", @class = "k-default" })
                                        .Content("Aggiungi a Elemento")
                                        .Events(e => e.Click("AggiungiAElementoOnClick"))
                                    )
                                            </div>

                                        </div>
                                        <div class="form-row">
                                            <div class="mb-0 col-12">
                                                @(Html.Kendo().Grid<EmailElementi>()
                                    .Name("gridemailElementi")
                                    .Columns(columns =>
                                    {
                                        columns.Bound(p => p.Id).Title("Id").Hidden(true);
                                                columns.Bound(p => p.IsUltimo).Title("Ult.").Width(30);
                                                columns.Bound(p => p.DscTipoElemento).Title("Tipo").Width(60);
                                                columns.Bound(p => p.DscElemento).Title("Descrizione").Width("40%");
                                                columns.Bound(p => p.Campo1 ).Title(ElCols.ElementAt(0).Des).Visible(ElCols.ElementAt(0).Visible).Width(50);
                                                columns.Bound(p => p.Campo2).Title(ElCols.ElementAt(1).Des).Visible(ElCols.ElementAt(1).Visible).Width(50);
                                                columns.Bound(p => p.Campo3).Title(ElCols.ElementAt(2).Des).Visible(ElCols.ElementAt(2).Visible).Width(50);
                                                columns.Bound(p => p.Campo4 ).Title(ElCols.ElementAt(3).Des).Visible(ElCols.ElementAt(3).Visible).Width(50);
                                                columns.Bound(p => p.Campo5 ).Title(ElCols.ElementAt(4).Des).Visible(ElCols.ElementAt(4).Visible).Width(50);
                                                   columns.Bound(p => p.LastOp).Width(50).Title("Operaz.").ClientTemplate("#= xIconLastOp(data) #");
                                        columns.Command(command => command.Custom("History").Template("#= xIconLastOp(data) #").Click("viewHistoryEl").IconClass("k-icon ").HtmlAttributes(new { style = "width:30px " })).Hidden();
                                                    })
                                                    .ToolBar(toolbar =>
                                                    {

                                                        toolbar.Custom().Text("Apri").IconClass("k-icon k-i-folder-open").HtmlAttributes(new { style = "width:75px", onclick = "ApriElementoGrid(event)" });
                                                        toolbar.Custom().Text("Agg.").IconClass("k-icon k-i-folder-add").HtmlAttributes(new { style = "width:75px", onclick = "AggiungiElementoGrid(event)" });
                                                        toolbar.Custom().Text("Canc.").IconClass("k-icon k-i-delete").HtmlAttributes(new { style = "width:75px", onclick = "CancellaElemento(event)" });
                                                        toolbar.Custom().Text("Duplica.").IconClass("k-icon k-i-copy").HtmlAttributes(new { style = "width:85px", onclick = "DuplicaElemento(event)" });
                                                        toolbar.Search();
                                    })
                                    .DataSource(dataSource => dataSource
                                        .Ajax()
                                                .PageSize(4)
                                        .Batch(false)
                                        .ServerOperation(true)
                                        .AutoSync(true)
                                        .Events(events => events.Error("error_handler"))
                                        .Model(model =>
                                        {
                                            model.Id(p => p.Id);
                                        })
                                        .Read(read => read.Action("ListaEmailElementi", "MailView").Data("getFascicolo"))
                                    )
                                            .Pageable()
                                    .Groupable(false)
                                            .Selectable()
                                    .HtmlAttributes(new { style = "font-size:10" })
                                            .Events(events => events
                                                .Change("gridemailElementionChange")

                                )
                                        )
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-4" style="font-size:12px">Nuovo</label>
                                    <div class="col-10" style="width:80%;">
                                        <div id="DivGridElementi">
                                            <div class="grid-container">
                                                @foreach (dblu.Docs.Models.TipiElementi item in ListaTipiElementiServ)
                                                {
                                                    @if (item.AggregaAElemento == false)
                                                    {
                                                        <div class="grid-item">
                                                            <button id="@item.Codice" type="button" onclick="NuovoElemento(this, '@item.Categoria', '@item.Codice')" class="b btn btn-info">@item.Descrizione </button>
                                                        </div>
                                                    }
                                                }
                                                <style>
                                                    .grid-container {
                                                        display: inline-grid;
                                                        grid-template-columns: auto auto auto;
                                                        background-color: #2196F3;
                                                        padding: 5px;
                                                    }

                                                    .grid-item {
                                                        background-color: rgba(255, 255, 255, 0.8);
                                                        border: 1px solid rgba(0, 0, 0, 0.8);
                                                        padding: 5px;
                                                        font-size: 15px;
                                                        text-align: center;
                                                    }

                                                    .b {
                                                        margin-left: 5px;
                                                    }
                                                </style>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>

                    <div class="card card-outline card-secondary card-solid card-default" id="divAllegati">
                        <div class="card-header p-1">
                            <i class="mt-2 fas fa-paperclip float-left"></i>
                            <div class="card-title mt-1 ml-2">
                                Allegati
                            </div>
                            <div class="card-tools pull-right">
                                <button type="button" class="btn btn-card-tool" data-card-widget="collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body pb-0 pt-1">
                            <form>
                                <div class="form-group" style="display:none">
                                    <label class="control-label col-2" style="font-size:12px">Testo</label>
                                    <div class="col-12" style="width:100%">
                                        <textarea class="form-control" id="TestoEmail" name="TestoEmail" rows="5" style="width:100%" readonly="readonly"></textarea>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-2" style="font-size:12px" style="display:none">Allegati da includere</label>
                                    <div class="col-12" style="width:100%">
                                        @(Html.Kendo().Grid<EmailAttachments>()
                             .Name("emailAttachments")
                            .Columns(columns =>
                            {
                                columns.Select().Width(50).Title("Allega");
                                columns.Bound(p => p.NomeFile).Title("Nome ").Width("40%");
                                columns.Bound(p => p.IsIncluso).Title("Incluso nel pdf").Width("10%");
                                columns.Bound(p => p.Avvisi).Title("Avvisi").ClientTemplate("#= templateAvvisi(data)#").Width("40%");
                                columns.Command(command =>
                                {
                                    command.Custom("download").Text(" ").Click("ScaricaAllegato").IconClass("k-icon my-icon-class-download");
                                }).Width("10%");
                                columns.Command(command => command.Custom("anteprimaImg").Text(" ").Click("ApriAllegato").IconClass("k-icon k-i-file-image")).Width("10%");
                            })
                            .Events(events => events.DataBound("onDataBoundAttachments"))
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .Model(model => model.Id(p => p.Id))
                                )
                            .HtmlAttributes(new { style = "font-size:12"  })
                            )
                                    </div>
                                </div>

                                <div class="form-group" style="margin-top:10px;display:none">
                                    <div class="col-10">
                                        @(Html.Kendo().CheckBox().Name("allegamail")
                                .Checked(true).Label("Allega il testo della Mail")
                            )
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>

                    <div class="card card-outline card-secondary card-solid card-default">
                        <div class="card-header p-1 ">
                            <i class="mt-2 far fa-file-pdf float-left"></i>
                            <div class="card-title mt-1 ml-2">
                                Anteprima
                            </div>
                            <div class="card-tools float-right">
                                <button type="button" class=" btn btn-card-tool" data-card-widget="collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body p-0 m-0">
                            <div class="form-group">

                                <div class="col-12" style="width:100%; margin-top:10px" id="anteprimapdf">

                                    @(Html.Kendo().ToolBar()
               .Name("pdfToolBar")
               .Items(items =>
               {
                                           items.Add().Type(CommandType.Button).Id("tbruotasx").Text("-90°").Icon("undo");
                   items.Add().Type(CommandType.Button).Id("tbruotadx").Text("+90°").Icon("redo");
                   items.Add().Type(CommandType.Button).Id("tbcanc").Text("Canc.").Icon("delete");
                   items.Add().Type(CommandType.Separator);
                   items.Add().Type(CommandType.Button).Id("tbrefresh").Text("Ricarica").Icon("refresh");
                                           items.Add().Type(CommandType.Separator);
                                           items.Add().Type(CommandType.Button).Id("tbsalva").Text("Salva").Icon("save");
                                           items.Add().Type(CommandType.Separator);
                                           items.Add().Type(CommandType.Button).Id("tbespandi").Text("Espandi Ctrl+Maiusc").Icon("zoom-in");
                                           items.Add().Type(CommandType.Separator);
                                           items.Add().Template("<label id='tbdescrizione' class='k-label' style='font-size:16px;font-weight:400;padding-top:6px' ></label>");
               })
               .Events(e => e.Click("tbpdf_click"))

                                   )

                                    <ejs-pdfviewer id="emailpdfviewer" serviceUrl="/api/mailPdfViewer" documentPath=""
                                                   enablePrint="true"
                                                   printEnd="documentPrinted"
                                                   documentLoad="documentLoaded"
                                                   annotationAdd="annotationAdd"
                                                   printStart="documentPrint"
                                                   enableStampAnnotations="false"
                                                   enableAnnotation="true"
                                                   enableFreeText="true"
                                                   exportSuccess="exportSuccess"
                                                   locale="it-IT"
                                                   downloadFileName="@string.Concat("",".pdf")" height="900px"
                                                   toolbarSettings="@(new Syncfusion.EJ2.PdfViewer.PdfViewerToolbarSettings { ShowTooltip = true, ToolbarItems = "PageNavigationTool,PanTool,MagnificationTool,SelectionTool,SearchOption,PrintOption,DownloadOption,UndoRedoTool,AnnotationEditTool"  })">

                                    </ejs-pdfviewer>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            @*<div class="row">
                <div class="col-5" style="align-self: auto;">
                    <component type="typeof(dblu.Portale.Plugin.Docs.Pages.Mail.MailBrowser)" render-mode="Server" />
                </div>
            </div>*@


            <div class="modal fade" id="MsgControllaStampa" tabindex="-1" role="dialog" aria-labelledby="MsgControllaStampaLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Attenzione</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            Non tutti gli elementi del fascicolo sono stati stampati.
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Chiudi</button>
                        </div>
                    </div>
                </div>
            </div>

        </section>
    </div>
</div>



@(Html.Kendo().Window()
    .Name("detElemento")
    .Visible(false).Modal(false)
    .Title("Dettaglio Elemento")
    .Draggable()
    .Resizable()
    .Width(685)
    .Position(p => p.Top(0).Left(252))
    .Actions(actions => actions.Pin().Minimize().Maximize().Close())
    .Events(e => e.Close("detElementoClose").Open("detElementoOpen")  )
)
@(Html.Kendo().Window()
    .Name("wCercaElementi")
    .Visible(false)
    .Title("Cerca Elemento")
    .Draggable()
    .Resizable()
    .Modal(true)
    .Width(1400)
    .Height(800)
    .Position(p => p.Top(20).Left(20))
    .Actions(actions => actions.Pin().Minimize().Maximize().Close())
    .Events(e => e.Close("wCercaElementiClose") )
  )
@(Html.Kendo().Window()
    .Name("cercasoggetti")
    .Size("auto")
    .Title("Cerca")
    .Visible(false)
    .Actions(actions => actions.Refresh().Minimize().Maximize().Close())
    .Content("")
    .Draggable()
    .Resizable()
    .Scrollable(true)
    .Width(900)
    .Height(700)
    .Modal(true)
  )
@(Html.Kendo().Window()
    .Name("wInoltra")
    .Size("auto")
    .Title("Inoltra a:")
    .Visible(false)
    .Actions(actions => actions.Close())
    .Content(@<text>
            <div class="card-body">
                <form id="formInoltra">
                    <div class="form-group">
                        <div class="form-group col-8">
                        @(Html.Kendo().MultiSelect()
                                .Name("multiMailInoltro")
                                .DataTextField("Email")
                                .DataValueField("Email")
                                .Placeholder("Seleziona gli utenti")
                                .ItemTemplate("#if(Name != null){# #= Name # #}#  #if(LastName != null){# #= LastName # #}# #if(Email != null){# <span class=\"UserName\">#= Email #</span> #}# ")
                                //.ItemTemplate("#= Name # #= LastName #, <span class=\"UserName\">#= Email #</span>")
                                .Height(450)
                                .Events(ev => ev.DataBound("onmultiMailInoltroDataBound"))
                                .DataSource(source =>
                                {
                                    source
                                    .Ajax()
                                    .PageSize(80)
                                    //.Events(e => e.RequestEnd("onRequestEnd"))
                                    .Read(read => read.Action("Email_Read", "MailView").Data("ValidMail"));

                                })
                         )
                        </div>
                        <div class="form-group col-2">
                            @(Html.Kendo().Button()
                                .Name("okinoltra")
                                .Content("Invia")
                                .Events(ev => ev.Click("inoltraOnClick"))
                                    )
                        </div>

                    </div>
                    <div class="form-group">
                        <div class="form-group col-10" >
                            <input type="checkbox" checked  id="chkemailInoltro" title="Chiudi email">
                            <label class="control-label col-3" >Chiudi email</label>
                        </div>
                    </div>
                </form>
            </div>
            </text>)
    .Width(600)
    .Height(450)
    .Modal(true)
)
@(Html.Kendo().Window()
    .Name("wRispondi")
    .Size("auto")
    .Title("Rispondi:")
    .Visible(false)
    .Actions(actions => actions.Close())
    .Content(@<text>
                <div class="card-body">
                    <form id="formRispondi">
                        <div class="form-group">
                            <label class="control-label col-2" style="font-size:12px">A: </label>
                            <div class="form-group col-8">

                                @(Html.Kendo().TextBox()
                                    .Name("destinatarioRisposta")
                                    .Value("")
                                    .HtmlAttributes(new { style = "width: 100%" })
                                )
                            </div>
                            <label class="control-label col-2" style="font-size:12px">CC: </label>
                            <div class="form-group col-8">
                                @*@(Html.Kendo().TextBox()
                                    .Name("ccRisposta")
                                    .Value("")
                                    .HtmlAttributes(new { style = "width: 100%" })
                                )*@

                                 @(Html.Kendo().MultiSelect()
                                .Name("multiccRisposta")
                                .DataTextField("Email")
                                .DataValueField("Email")
                                .ItemTemplate("#if(Name != null){# #= Name # #}#  #if(LastName != null){# #= LastName # #}# #if(Email != null){# <span class=\"UserName\">#= Email #</span> #}# ")
                                .Height(450)
                                .Events(ev => ev.DataBound("onmulticcRispostaDataBound"))
                                .DataSource(source =>
                                {
                                    source
                                    .Ajax()
                                    .PageSize(80)
                                    //.Events(e => e.RequestEnd("onRequestEndccRisposta"))
                                    .Read(read => read.Action("Email_Read", "MailView").Data("ValidMail"));

                                })
                         )



                            </div>
                            <label class="control-label col-2" style="font-size:12px">Oggetto: </label>
                            <div class="form-group col-8">
                                @(Html.Kendo().TextBox()
                                    .Name("oggettoRisposta")
                                    .Value("")
                                    .HtmlAttributes(new { style = "width: 100%" })
                                )
                            </div>
                            <label class="control-label col-2" style="font-size:12px">Testo: </label>
                            <div class="form-group col-8">
                                 @Html.TextArea("testoRisposta", "", new { @class="k-textbox", style = "width: 100%;",rows=5 })
                            </div>
                            <div class="form-group col-2">
                                @(Html.Kendo().Button()
                            .Name("okrispondi")
                            .Content("Invia")
                            .Events(ev => ev.Click("rispondiOnClick"))
                                )
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="form-group col-10" >
                                <input type="checkbox" checked  id="chkemailRispondi" title="Allega originale">
                                <label class="control-label col-3" >Allega originale</label>
                            </div>
                            <div class="form-group col-10" >
                                <input type="checkbox" checked  id="chkemailRispondiChiudi" title="Chiudi email">
                                <label class="control-label col-3" >Chiudi email</label>                            </div>
                        </div>
                        </form>
                    </div>
            </text>)
    .Width(600)
    .Height(500)
    .Modal(true)
)
@(Html.Kendo().Window()
    .Name("wSposta")
    .Size("auto")
    .Title("Sposta in:")
    .Visible(false)
    .Actions(actions => actions.Close())
    .Content(@<text>
        <div class="card-body">
            <form>
                <div class="form-group">

                    <div class="form-group col-8">
                         @(Html.Kendo().DropdownList()
                            .Name("emailServer_sposta")
                            //.Placeholder("Seleziona Server...")
                            .DataTextField("Nome")
                            .DataValueField("Nome")
                            .BindTo(ListaServerIngresso)
                            .SelectedIndex(0)
                            //.Suggest(true)
                            .HtmlAttributes(new { style = "width:100%;" })

                        )
                    </div>
                    <div class="form-group col-2">
                        @(Html.Kendo().Button()
                        .Name("okSposta")
                        .Content("Sposta")
                        .Events(ev => ev.Click("spostaOnClick"))
                        )
                    </div>
                </div>
            </form >
        </div >
    </text>)
    .Width(600)
    .Height(180)
    .Modal(true)
                 )
@(Html.Kendo().Window()
    .Name("wHistory")
    .Size("auto")
    .Title("Operazioni:")
    .Visible(false)
    .Actions(actions => actions.Close())
    .Content(@<text>
        <div class="card-body">
            <div class="form-group col-11">
              @(Html.Kendo().Grid<LogDoc>()
                .Name("logs")
                .Columns(columns =>
                {
                    columns.Bound(p => p.Data).Title("Data").Width("50%").ClientTemplate("#= kendo.toString(Data, 'dd/MM/yyyy HH:mm') #");
                    columns.Bound(p => p.Operazione).Title("Operazione").Width("20%");
                    columns.Bound(p => p.Utente).Title("Utente").Width("20%");
                })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    //.Model(model => model.Id(p => p.ID))
                    .Read(read => read.Action("GetLogsItem", "Docs").Data("GetLogsItem"))

                    )
                    .HtmlAttributes(new { style = "font-size:12" })
                )
            </div>
        </div >
    </text>)
    .Width(600)
    .Height(300)
    .Modal(true)
                 )
@(Html.Kendo().Window()
        .Name("wPdfEditor")
        .Size("auto")
        .Title("Editor")
        .Visible(false)
        .Actions(actions => actions.Refresh().Close())
        .Content("")
        .Scrollable(true)
        .Modal(true)
                .Events(e => e.Close("wPdfEditorClose").Open("wPdfEditorOpen"))
        )

@(Html.Kendo().Window()
        .Name("wMostraEmail")
        .Size("auto")
        .Width(800)
        .Title("Email in formato HTML")
        .Visible(false)
        .Actions(actions => actions.Refresh().Close())
        .Content("")
        .Scrollable(true)
        .Modal(true)                
        )

@(Html.Kendo().Window()
    .Name("wSoggetti")
    .Size("auto")
    .Title("Soggetti:")
    .Visible(false)
    .Actions(actions => actions.Close())
    .Content(@<text>
        <div class="card-body">
            <div class="form-group col-11">
              @(Html.Kendo().Grid<Soggetti>()
                .Name("cSogg")
                .Columns(columns =>
                {
                    columns.Bound(p => p.Codice).Title("Codice").Width("20%");
                    columns.Bound(p => p.Nome).Title("Nome").Width("80%");
                })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    //.Model(model => model.Id(p => p.ID))
                    .Read(read => read.Action("GetSoggettiByMail", "MailView").Data("GetMail"))

                    )

                 .HtmlAttributes(new { style = "font-size:12" })
                 .Events(events => events
                    .DataBound("cSoggonDataBound")
                    .Change("cSoggonChange")
                  )
                 .Selectable(selectable => selectable
                    .Mode(GridSelectionMode.Single )
                    .Type(GridSelectionType.Row))
                )
            </div>
        </div >
    </text>)
    .Width(600)
    .Height(300)
    .Modal(true)
 )


<ejs-scripts></ejs-scripts>
